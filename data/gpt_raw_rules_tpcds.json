{"train_workload_random_4_5q": [["train_workload_random_4_5q", " [store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), date_dim(d_date)].", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition or are frequently used in WHERE clauses across multiple queries, as this can lead to redundant indexing and potential performance regressions. Focus on indexing columns that are used in filtering conditions and are not already covered by existing indexes.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index is frequently used in queries. Ensure that indexes on columns used in join conditions are maintained, and avoid redundant indexes on columns that are already covered by existing composite indexes.\"}"], ["train_workload_random_4_5q", " [store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), date_dim(d_date)].", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear benefit in query performance. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, and ensure that indexes are not redundant or overly broad.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index is necessary for specific query patterns. Check for redundant composite indexes that may overlap with existing single-column indexes.\"}"], ["train_workload_random_4_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), date_dim(d_year)]", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, and ensure composite indexes are only created for columns that are commonly used together in query conditions.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_color, i_current_price), Date_dim(d_year, d_date), Customer_address(ca_address_sk)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{\"rule\": \"Avoid creating indexes that include columns already covered by existing indexes, especially when the existing index is more selective or covers more columns relevant to the query predicates. Ensure that indexes are aligned with the most frequently used query patterns and avoid redundant indexes that do not add value to query performance.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_item_sk), Date_dim(d_year), Promotion(p_promo_sk), Store(s_store_sk), Web_site(web_site_sk), Catalog_page(cp_catalog_page_sk)]", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{\"rule\": \"Avoid creating indexes on columns that are already part of a composite index covering the same query patterns, as this can lead to redundancy and potential regression in performance. Focus on creating indexes that cover the most frequently queried columns and join conditions, and ensure that the indexes are aligned with the query workload to optimize performance.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index significantly improves query performance by reducing the number of scanned rows or enhancing join operations. Prioritize indexing columns involved in join conditions and filtering criteria, especially for large tables, and ensure that indexes align with the workload's most frequent and performance-critical queries.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_color, i_current_price), Date_dim(d_year, d_date), Customer_address(ca_address_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already covered by existing indexes, especially when the existing indexes are more focused and relevant to the query workload. Prioritize indexes that align with the most frequently queried columns and conditions, such as filtering and joining columns, to prevent regression.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition or are frequently used in WHERE clauses across multiple queries, unless they are part of a composite index that optimizes multiple queries. Focus on indexing columns that are used in filtering conditions and have high cardinality, especially if they are used in multiple queries.\"}"], ["train_workload_random_4_5q", " [store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date, d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns involved in join conditions and filters over columns used in select or order by clauses.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually unless there is a clear benefit in query performance. Prioritize indexing columns that are frequently used in join conditions and where clauses, especially those with high cardinality.\"}"], ["train_workload_random_4_5q", " [Store_sales(ss_sold_date_sk), Date_dim(d_date), Catalog_sales(cs_sold_date_sk), Web_sales(ws_sold_date_sk), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or are frequently used in equality predicates, as they may lead to regression by increasing index maintenance overhead without significant query performance benefits.\"}"], ["train_workload_random_4_5q", " [store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date, d_year)]", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index covering the same query conditions. Prioritize composite indexes that match the join and filter conditions in the workload queries to prevent redundancy and potential regression.\"}"], ["train_workload_random_4_5q", " [promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_page(cp_catalog_page_sk)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and are not part of existing indexes in other tables.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing the overhead of maintaining the index. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, which can significantly improve query performance.\"}"], ["train_workload_random_4_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), date_dim(d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless there is a clear benefit in query performance. Prioritize single-column indexes on frequently filtered or joined columns, especially those used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_4_5q", " [store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date, d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns involved in join conditions and filters over columns used in select or order by clauses.\"}"], ["train_workload_random_4_5q", " [promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_page(cp_catalog_page_sk)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Avoid creating multiple indexes on the same table for different columns when a single composite index can cover the query needs. Focus on composite indexes that match the join and filter conditions across the workload to prevent regression.\"}"], ["train_workload_random_4_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), date_dim(d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index is necessary for specific query patterns. Prioritize single-column indexes for frequently joined or filtered columns, especially when they are used across multiple queries.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless there is a specific query pattern that benefits from the composite index. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in join or filter conditions across multiple queries. Prioritize single-column indexes on columns that are consistently used in join conditions or filters, especially those with high cardinality or those involved in frequent range queries.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_color, i_current_price), Date_dim(d_year, d_date), Customer_address(ca_address_sk)]", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes that include columns already covered by existing indexes, especially if the existing index is more comprehensive or includes frequently queried columns. Prioritize indexes that align with the most common query patterns and join conditions, and ensure they cover the necessary columns for filtering and joining efficiently.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_item_sk), web_sales(ws_sold_date_sk)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in WHERE clauses with range conditions or are part of large tables to optimize query performance.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'item(i_item_id)' and 'item(i_item_sk)', unless they are frequently used in join conditions or where clauses. Instead, focus on composite indexes that cover multiple columns used together in queries, like 'store_returns(sr_ticket_number, sr_item_sk)'.\"}"], ["train_workload_random_4_5q", " [Store_sales(ss_sold_date_sk), Date_dim(d_date), Catalog_sales(cs_sold_date_sk), Web_sales(ws_sold_date_sk), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining operations across multiple queries.\"}"], ["train_workload_random_4_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), date_dim(d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless there is a specific query pattern that benefits from the composite index. Prioritize single-column indexes for frequently joined or filtered columns, especially when they are used across multiple queries.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store(s_store_sk)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and have high cardinality, as seen in the improvement index selection.\"}"], ["train_workload_random_4_5q", " [store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), date_dim(d_date)].", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index is necessary for specific query patterns. Ensure that indexes on columns frequently used in WHERE clauses or JOIN conditions are maintained, and avoid redundant indexes that do not significantly improve query performance.\"}"], ["train_workload_random_4_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), date_dim(d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless there is a specific query pattern that benefits from the composite index. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that indexes are not redundant with existing ones.\"}"], ["train_workload_random_4_5q", " [store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date, d_year)]", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index unless necessary, as it may lead to redundancy and potential performance regression. Prioritize composite indexes that cover multiple columns used together in queries, especially in join conditions and where clauses.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, as these can significantly improve query performance by reducing the number of rows processed.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing the index maintenance overhead. Instead, focus on indexing columns that are used in filtering conditions and have high selectivity.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_item_sk), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index is necessary for specific query patterns. Prioritize single-column indexes on frequently joined or filtered columns, especially those involved in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_color, i_current_price), Date_dim(d_year, d_date), Customer_address(ca_address_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are frequently filtered or joined, and composite indexes only for columns that are consistently used together in multiple queries.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be already optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions that are not covered by existing indexes.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index is frequently used in queries. Check for redundant composite indexes that may overlap with existing single-column indexes.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_item_sk), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize single-column indexes for columns frequently used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_item_sk), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index is specifically required for multi-column query optimization. Prioritize single-column indexes for frequently joined or filtered columns.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_item_sk), Date_dim(d_year), Promotion(p_promo_sk), Store(s_store_sk), Web_site(web_site_sk), Catalog_page(cp_catalog_page_sk)]", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other columns that are frequently used together in queries. Instead, focus on creating composite indexes that match the join and filter conditions in the workload, especially for columns involved in joins across large tables.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes that support frequent join operations, such as those on date keys and item keys, which are critical for query performance in analytical workloads.\"}"], ["train_workload_random_4_5q", " [store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), date_dim(d_date)].", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Focus on indexing columns that are used in filtering conditions and are not already indexed, to prevent redundancy and potential performance degradation.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index is specifically required by the workload. Check for redundant composite indexes that may overlap with existing single-column indexes.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index is necessary for specific query patterns. Check for redundant composite indexes that may overlap with existing single-column indexes.\"}"], ["train_workload_random_4_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), date_dim(d_year)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included in the index selection to prevent regression. Prioritize indexing on columns frequently used in WHERE clauses and join conditions, especially those with high cardinality or used in range queries.\"}"], ["train_workload_random_4_5q", " [store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date, d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless there is a clear benefit in query performance. Prioritize single-column indexes for columns frequently used in join conditions and filters, especially for large tables.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or are frequently used in equality conditions, as they may lead to regression by increasing index size and reducing selectivity. Instead, focus on single-column indexes for high cardinality columns or those frequently used in range queries.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_item_sk), Date_dim(d_year), Promotion(p_promo_sk), Store(s_store_sk), Web_site(web_site_sk), Catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially if they are part of large tables or have high cardinality.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually and are frequently used in join conditions across multiple queries. Instead, focus on indexing columns that are used in filtering conditions and are not already indexed, especially in large tables.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and filters, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, particularly for tables with high row counts.\"}"], ["train_workload_random_4_5q", " [Store_sales(ss_sold_date_sk), Date_dim(d_date), Catalog_sales(cs_sold_date_sk), Web_sales(ws_sold_date_sk), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)]", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing maintenance overhead and reducing query performance. Focus on indexing columns that are used in filtering conditions and have high cardinality.\"}"], ["train_workload_random_4_5q", " [Store_sales(ss_sold_date_sk), Date_dim(d_date), Catalog_sales(cs_sold_date_sk), Web_sales(ws_sold_date_sk), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for columns that are frequently filtered or joined on, especially those with high selectivity.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_item_sk), Date_dim(d_year), Promotion(p_promo_sk), Store(s_store_sk), Web_site(web_site_sk), Catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially if they are used in multiple queries across the workload.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently joined with other tables, as these columns are likely to be involved in join operations and may not benefit from additional indexing. Focus on indexing columns that are used in WHERE clauses or are frequently filtered, especially in large tables, to improve query performance.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store(s_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index is necessary for specific query patterns. Prioritize single-column indexes on frequently joined or filtered columns, especially those involved in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index significantly improves query performance. Prioritize single-column indexes on frequently joined or filtered columns, especially those involved in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Ensure that composite indexes are used for join conditions and filtering columns in large tables, especially when multiple columns are involved in the join or filter conditions. Avoid using single-column indexes when multi-column indexes can better optimize the query performance.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and filtering criteria, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, particularly for tables with high row counts.\"}"], ["train_workload_random_4_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), date_dim(d_year)]", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless there is a specific query pattern that benefits from the composite index. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality, to improve query performance.\"}"], ["train_workload_random_4_5q", " [promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually unless there is a specific query pattern that benefits from the composite index. Prioritize single-column indexes on frequently filtered or joined columns, especially those involved in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Prioritize composite indexes on columns involved in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index is necessary for specific query patterns. Prioritize single-column indexes on frequently joined or filtered columns, especially those involved in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_4_5q", " [store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), date_dim(d_date)].", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially for large tables. Remove redundant composite indexes that do not provide additional performance benefits over individual indexes.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_color, i_current_price), Date_dim(d_year, d_date), Customer_address(ca_address_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially if they are used in multiple queries across the workload.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_color, i_current_price), Date_dim(d_year, d_date), Customer_address(ca_address_sk)]", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes that include columns already covered by existing indexes, especially when the existing index is more comprehensive or includes additional columns that are frequently used together in queries. Prioritize indexes that cover multiple columns used in WHERE clauses or JOIN conditions to optimize query performance.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as this can lead to regression by increasing the overhead of maintaining these indexes. Instead, focus on indexing columns that are used in filtering conditions and have high selectivity.\"}"], ["train_workload_random_4_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), date_dim(d_year)]", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially if they are frequently used in join conditions or filters. Prioritize indexing columns that are used in WHERE clauses with equality conditions and have moderate cardinality, as well as columns involved in frequent joins with other tables. Consider the workload and query patterns to ensure indexes improve query performance without causing unnecessary overhead.\"}"], ["train_workload_random_4_5q", " [store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date, d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize single-column indexes for columns frequently used in join conditions and filters.\"}"], ["train_workload_random_4_5q", " [store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), date_dim(d_date)].", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear benefit in query performance. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_color, i_current_price), Date_dim(d_year, d_date), Customer_address(ca_address_sk)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently joined with other tables, as these columns are likely to be involved in join operations and may not benefit from additional indexing. Instead, focus on indexing columns that are used in WHERE clauses or are frequently filtered, such as columns with high cardinality or those involved in range queries.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index is necessary for specific query patterns. Ensure that indexes on columns frequently used in WHERE clauses or JOIN conditions are prioritized over composite indexes that may not be utilized effectively.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store(s_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually, especially when the workload involves frequent joins on those columns. Prioritize single-column indexes on frequently joined columns and ensure they align with the join conditions in the workload.\"}"], ["train_workload_random_4_5q", " [Store_sales(ss_sold_date_sk), Date_dim(d_date), Catalog_sales(cs_sold_date_sk), Web_sales(ws_sold_date_sk), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or are frequently used in equality joins, as they may lead to regression by increasing index size and reducing selectivity. Instead, focus on single-column indexes for frequently filtered columns and ensure indexes align with query predicates and join conditions.\"}"], ["train_workload_random_4_5q", " [promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_page(cp_catalog_page_sk)]", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or primary key, especially if they are frequently used in joins or filters. Prioritize indexing columns that are used in WHERE clauses and JOIN conditions across multiple queries, and ensure that indexes are not redundant with existing constraints or indexes.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure indexes on foreign key columns used in joins and filters, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially when they are already indexed in the improvement selection. Focus on indexing columns that are used in filtering conditions and are not already covered by existing indexes.\"}"], ["train_workload_random_4_5q", " [store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date, d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless there is a clear benefit in query performance. Prioritize indexing columns that are frequently used in join conditions and where clauses, especially those with high cardinality.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially for large tables. Remove redundant indexes that do not contribute to query optimization.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_item_sk), web_sales(ws_sold_date_sk)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily filtered or joined in the workload queries, as this can lead to redundant or less effective indexing. Instead, focus on indexing columns that are frequently used in WHERE clauses or JOIN conditions but are not already indexed, especially those with high cardinality and those that can significantly reduce the search space.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear benefit in query performance, as it may lead to regression by increasing index maintenance overhead without significant query optimization.\"}"], ["train_workload_random_4_5q", " [promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize single-column indexes for frequently joined or filtered columns, especially when they are used in multiple queries across the workload.\"}"], ["train_workload_random_4_5q", " [store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), date_dim(d_date)].", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in join or filter conditions across multiple queries. Focus on single-column indexes for columns that are consistently used in join conditions or filters, especially for large tables.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually and are frequently used in join conditions across multiple queries. Instead, focus on indexing columns that are used in filtering conditions and are not already indexed, especially if they are part of large tables or have high cardinality.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_color, i_current_price), Date_dim(d_year, d_date), Customer_address(ca_address_sk)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{\"rule\": \"Avoid creating indexes that include columns already covered by existing indexes, especially when the existing index is more selective or covers more columns relevant to the query predicates. Focus on creating composite indexes that align with the most frequently queried columns and join conditions in the workload.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_item_sk), Date_dim(d_year), Promotion(p_promo_sk), Store(s_store_sk), Web_site(web_site_sk), Catalog_page(cp_catalog_page_sk)]", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join conditions involve columns with high cardinality or are part of complex queries. Instead, focus on indexing columns that are used in WHERE clauses with filtering conditions, and ensure that the indexes align with the most selective predicates in the workload.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns involved in join conditions and filters over columns used in select or group by clauses.\"}"], ["train_workload_random_4_5q", " [store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), date_dim(d_date)].", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear benefit in query performance. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that indexes are not redundant or overly broad, which can lead to regression in performance.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store(s_store_sk)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Focus on indexing columns that are used in filtering conditions and are not already indexed in the improvement selection.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear benefit in query performance. In this case, the regression index selection added composite indexes on (item.i_color, item.i_item_id) and (item.i_item_id, item.i_item_sk) which may not provide additional benefits over the existing individual indexes on item.i_item_id and item.i_item_sk.\"}"], ["train_workload_random_4_5q", " [Store_sales(ss_sold_date_sk), Date_dim(d_date), Catalog_sales(cs_sold_date_sk), Web_sales(ws_sold_date_sk), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the workload involves simple equality joins or filters on those columns. Prioritize single-column indexes for frequently joined or filtered columns to prevent redundancy and potential performance regression.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_color, i_current_price), Date_dim(d_year, d_date), Customer_address(ca_address_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already covered by other indexes, especially when the workload involves filtering or joining on those columns. Instead, focus on creating indexes that align with the most frequently used query patterns, such as filtering by specific attributes or joining on foreign keys, to prevent regression in query performance.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually and are frequently used in join conditions, as this can lead to regression by increasing index maintenance overhead and not providing additional query performance benefits.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, as these can significantly improve query performance without causing regression.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection unless they are part of a composite index that significantly improves query performance. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and have high cardinality.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear benefit in query performance. In this case, the regression index selection includes composite indexes on (item.i_item_id, item.i_item_sk) and (item.i_color, item.i_item_id) which may not provide additional benefits over the individual indexes on item.i_item_id and item.i_item_sk, and could lead to unnecessary index maintenance overhead.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Ensure composite indexes are used for join conditions involving multiple columns, especially when the workload involves complex joins and aggregations. Prioritize composite indexes on columns frequently used together in join conditions, such as (sr_ticket_number, sr_item_sk) in store_returns, to optimize query performance and prevent regression.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index is specifically required by the workload. Check for redundant composite indexes that may overlap with existing single-column indexes.\"}"], ["train_workload_random_4_5q", " [Store_sales(ss_sold_date_sk), Date_dim(d_date), Catalog_sales(cs_sold_date_sk), Web_sales(ws_sold_date_sk), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid composite indexes on columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize single-column indexes on frequently filtered or joined columns, especially those involved in date range queries or large table joins.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store(s_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually, especially when the individual indexes are frequently used in join conditions or where clauses. Prioritize single-column indexes on frequently joined or filtered columns over composite indexes that may not align with the query patterns.\"}"], ["train_workload_random_4_5q", " [store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), date_dim(d_date)].", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially if the individual indexes are frequently used in the workload. This can lead to redundancy and potential performance regression.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these are likely to be covered by existing indexes. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions in SELECT statements, especially if they are involved in filtering large datasets.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes, especially when they are part of composite indexes that are frequently used in join operations. Focus on maintaining indexes that optimize join conditions and filtering criteria in the workload.\"}"], ["train_workload_random_4_5q", " [promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually unless there is a specific query pattern that benefits from the composite index. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that indexes align with the query workload to prevent unnecessary index creation that can lead to regression.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or that are already indexed individually, as they may lead to regression by increasing index maintenance overhead without significant query performance benefits.\"}"], ["train_workload_random_4_5q", " [store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), date_dim(d_date)].", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently used in join or filter conditions. Focus on indexing columns that are used in join conditions and have high selectivity in the workload queries.\"}"], ["train_workload_random_4_5q", " [Store_sales(ss_sold_date_sk), Date_dim(d_date), Catalog_sales(cs_sold_date_sk), Web_sales(ws_sold_date_sk), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining operations across multiple queries.\"}"], ["train_workload_random_4_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), date_dim(d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index is necessary for specific query patterns. Prioritize single-column indexes for frequently joined or filtered columns, especially when they are used across multiple queries.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear benefit in query performance. In this case, the regression index selection added composite indexes on (item.i_color, item.i_item_id) and (item.i_item_id, item.i_item_sk), which may not provide additional benefits over the existing individual indexes on item.i_item_id and item.i_item_sk.\"}"], ["train_workload_random_4_5q", " [store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date, d_year)]", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the individual indexes are frequently used in join conditions across multiple queries. Instead, focus on optimizing indexes for columns that are consistently used together in WHERE clauses or join conditions, and ensure that these indexes do not overlap with existing indexes that are already optimized for specific query patterns.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_color, i_current_price), Date_dim(d_year, d_date), Customer_address(ca_address_sk)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes that include columns not used in WHERE clauses or JOIN conditions. Focus on columns frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses. Ensure indexes are not overly broad by including only necessary columns to optimize query performance.\"}"], ["train_workload_random_4_5q", " [promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_page(cp_catalog_page_sk)]", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join conditions involve large tables. Instead, focus on indexing columns that are used in WHERE clauses and GROUP BY operations to improve query performance.\"}"], ["train_workload_random_4_5q", " [store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), date_dim(d_date)].", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently queried together or do not appear together in join conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression in query performance.\"}"], ["train_workload_random_4_5q", " [store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), date_dim(d_date)].", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in join or filter conditions across multiple queries. Focus on single-column indexes for columns that are consistently used in join conditions or filters, especially for large tables.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_item_sk), web_sales(ws_sold_date_sk)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join conditions involve large tables. Instead, prioritize indexing columns that are used in filtering conditions or are part of smaller tables to improve query performance without causing regression.\"}"], ["train_workload_random_4_5q", " [store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date, d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually, especially when the individual indexes are frequently used in join conditions or filters. Prioritize indexes on columns that are used in join conditions and filters across multiple queries, and ensure that these indexes are not redundant with existing indexes.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless there is a specific query pattern that benefits from the composite index. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality.\"}"], ["train_workload_random_4_5q", " [store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date, d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns involved in join conditions and filters over columns used in select or group by clauses.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store(s_store_sk)]", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index unless the workload specifically benefits from single-column access patterns. Prioritize composite indexes that cover multiple columns used together in join conditions or filters, especially when they are frequently accessed together in the workload.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_color, i_current_price), Date_dim(d_year, d_date), Customer_address(ca_address_sk)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes that include columns not directly involved in filtering or joining conditions in the workload queries. Focus on columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or that are part of complex expressions. Additionally, prioritize indexes on columns that are used in multiple queries across the workload to maximize their utility.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_color, i_current_price), Date_dim(d_year, d_date), Customer_address(ca_address_sk)]", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes that include columns not used in WHERE, JOIN, or GROUP BY clauses of the workload queries, as they may lead to unnecessary overhead without improving query performance.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_item_sk), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store(s_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually, especially when the individual indexes are frequently used in join conditions or filters. Prioritize single-column indexes on frequently joined or filtered columns over composite indexes that may not align with the query patterns.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_color, i_current_price), Date_dim(d_year, d_date), Customer_address(ca_address_sk)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes that include columns not directly involved in filtering or joining conditions in the workload queries. Focus on columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or those that significantly reduce the result set size.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually, especially when the individual indexes are frequently used in the workload. This can lead to redundancy and potential performance regression.\"}"], ["train_workload_random_4_5q", " [store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date, d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexes on columns frequently used in join conditions and filters, especially for large tables.\"}"], ["train_workload_random_4_5q", " [store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), date_dim(d_date)].", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index significantly improves query performance by reducing the number of scanned rows or enhancing join operations. Prioritize single-column indexes on frequently filtered or joined columns, especially those involved in WHERE clauses or JOIN conditions, to prevent unnecessary complexity and potential regressions.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_item_sk), web_sales(ws_sold_date_sk)]", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index significantly improves query performance by reducing the number of scanned rows or enhancing join operations. Prioritize single-column indexes on frequently filtered or joined columns, especially in large tables, to prevent unnecessary complexity and potential performance regressions.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure multi-column indexes are used for columns frequently joined together in queries, especially when they involve large tables. Avoid single-column indexes on columns that are part of complex join conditions or are used in conjunction with other columns in the workload.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_item_sk), Date_dim(d_year), Promotion(p_promo_sk), Store(s_store_sk), Web_site(web_site_sk), Catalog_page(cp_catalog_page_sk)]", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index covering the same query patterns, as this can lead to redundancy and potential regression in performance. Focus on creating indexes that cover the most frequently queried columns and join conditions, and ensure that the indexes align with the query workload's filtering and sorting requirements.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_4_5q", " [store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), date_dim(d_date)].", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear benefit in query performance. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Ensure composite indexes are used for join conditions involving multiple columns, especially when the workload involves frequent joins on multiple columns from the same table. Prioritize composite indexes over single-column indexes when the workload shows patterns of joining on multiple columns simultaneously.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_item_sk), Date_dim(d_year), Promotion(p_promo_sk), Store(s_store_sk), Web_site(web_site_sk), Catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index is frequently used in queries. Prioritize single-column indexes on frequently joined or filtered columns, especially those involved in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_4_5q", " [Store_sales(ss_sold_date_sk), Date_dim(d_date), Catalog_sales(cs_sold_date_sk), Web_sales(ws_sold_date_sk), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{\"rule\": \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, and ensure they align with the query predicates and join conditions.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_color, i_current_price), Date_dim(d_year, d_date), Customer_address(ca_address_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in query predicates. Focus on single-column indexes for columns that are consistently used in WHERE clauses across multiple queries, especially those with high cardinality or those involved in join conditions.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_item_sk), Date_dim(d_year), Promotion(p_promo_sk), Store(s_store_sk), Web_site(web_site_sk), Catalog_page(cp_catalog_page_sk)]", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear benefit in query performance. Ensure that indexes on foreign key columns are maintained to support join operations efficiently.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and consider the selectivity of the columns. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_4_5q", " [store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), date_dim(d_date)].", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition or are frequently used in WHERE clauses across multiple queries, as this can lead to redundant indexing and potential performance regressions. Focus on indexing columns that are used in filtering conditions and are not already covered by existing indexes.\"}"], ["train_workload_random_4_5q", " [promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index significantly improves query performance. Prioritize single-column indexes on frequently joined or filtered columns, especially those involved in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless there is a clear benefit in query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality.\"}"], ["train_workload_random_4_5q", "[catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), web_site(web_site_sk)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store(s_store_sk), store_sales(ss_item_sk), web_sales(ws_sold_date_sk), date_dim(d_year), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition or are frequently used in WHERE clauses across multiple queries, unless they are proven to significantly improve query performance. Prioritize indexing columns that are used in filtering conditions and have high cardinality, and ensure that indexes are not redundant or overlapping with existing indexes.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store(s_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually, especially when the individual indexes are frequently used in join conditions or where clauses. Prioritize single-column indexes on frequently joined or filtered columns over composite indexes that may not align with the query patterns.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize single-column indexes for columns frequently used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_4_5q", " [store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), date_dim(d_date)].", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently queried together or do not appear together in join or filter conditions. Focus on single-column indexes for high cardinality columns that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_4_5q", " [Item(i_item_id, i_color, i_current_price), Date_dim(d_year, d_date), Customer_address(ca_address_sk)]", "[date_dim(d_date_sk, d_year, d_date), web_sales(ws_sold_date_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk), item(i_item_id), customer_address(ca_address_sk), store(s_store_id)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize composite indexes that include columns used in WHERE clauses and JOIN conditions, especially for tables with high row counts or frequent access patterns. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_4_5q", " [Store_sales(ss_sold_date_sk), Date_dim(d_date), Catalog_sales(cs_sold_date_sk), Web_sales(ws_sold_date_sk), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)]", "[date_dim(d_date_sk), item(i_item_sk, i_color), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses and GROUP BY operations, as these are critical for query performance.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_current_price), web_sales(ws_item_sk), date_dim(d_year), item(i_color), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), store(s_store_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in composite indexes, especially when the composite index covers multiple columns used together in queries. Prioritize composite indexes that match the join and filter conditions in the workload, as they can significantly improve query performance by reducing the need for multiple single-column indexes.\"}"], ["train_workload_random_4_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index is specifically required by the workload. Check for redundant composite indexes that may overlap with existing single-column indexes.\"}"], ["train_workload_random_4_5q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_color,C item.i_item_id), I(C item.i_item_id,C item.i_item_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear benefit in query performance. Ensure that indexes on foreign key columns are maintained, as they are crucial for join operations in the workload.\"}"]], "train_workload_random_5_4q": [["train_workload_random_5_4q", " [date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_returns(wr_item_sk), web_sales(ws_order_number)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid indexing columns that are not directly used in join conditions or filtering criteria. Prioritize indexing columns that are frequently used in join conditions and filtering criteria across multiple queries, such as foreign keys and date keys. Ensure that indexes on date columns are on the primary key or surrogate key rather than the actual date value to optimize join operations.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in query predicates. Focus on single-column indexes for columns that are consistently used in WHERE clauses across multiple queries, especially those involved in JOIN operations.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently queried together in the workload. Focus on single-column indexes for columns that are consistently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in the workload, especially when multiple columns are involved in WHERE clauses or JOIN conditions. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple conditions.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid single-column indexes when multi-column indexes can better optimize the workload.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{rule: \"Avoid indexing columns with low cardinality or columns that are frequently used in range queries, such as date columns, unless they are part of a composite index that includes high cardinality columns. Prioritize indexing columns that are frequently used in join conditions and have high cardinality, such as primary keys or unique identifiers.\"}"], ["train_workload_random_5_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), store(s_store_sk)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns not directly used in join conditions or filtering criteria, especially when they increase index size without significant performance benefits. Focus on single-column indexes for primary join keys and frequently filtered columns.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in join conditions or filters across multiple queries. Prioritize single-column indexes on columns that are consistently used in WHERE clauses or JOIN conditions across the workload.\"}"], ["train_workload_random_5_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), store(s_store_sk)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "{\"rule\": \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently used in join or filter conditions. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and have high cardinality to improve query performance.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid adding composite indexes that include columns not used together in WHERE clauses or JOIN conditions, as seen with date_dim(d_date_sk, d_date) and promotion(p_promo_sk). Prioritize single-column indexes for frequently filtered or joined columns, such as date_dim(d_date_sk) and store_sales(ss_sold_date_sk, ss_item_sk), to prevent regression.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for columns frequently used in WHERE clauses and JOIN conditions. Prioritize composite indexes for columns used together in multiple queries, and avoid regression by maintaining indexes on columns with high cardinality and frequent usage in filtering or joining.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for columns frequently used in WHERE clauses and JOIN conditions. Prioritize composite indexes that include date columns and identifiers used in joins, such as order numbers and item identifiers, to optimize query performance.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Ensure multi-column indexes are used for columns frequently involved in join conditions and filters, especially when dealing with large tables. Avoid single-column indexes on columns that are part of complex queries involving multiple tables, as they may lead to regressions in query performance.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially in large tables.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently queried together or do not have a high correlation in the workload. Prioritize single-column indexes on columns that are frequently used in WHERE clauses, JOIN conditions, or have high cardinality.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in filtering or joining operations in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and have high cardinality. Consider the size of the tables and the frequency of access patterns to optimize index selection.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_order_number), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns frequently used in joins across large tables, and ensure indexes on columns used in WHERE clauses for filtering, especially when dealing with large datasets. Avoid removing indexes that support critical join operations or filter conditions in the workload.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date columns or columns with a wide range of values, unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered or joined on, especially those with equality conditions, to improve query performance.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns not directly involved in filtering or joining conditions, especially when single-column indexes suffice for the workload's query patterns.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as date keys and item keys. Avoid regression by maintaining indexes on columns involved in multiple query patterns, like order numbers and date keys.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_returns(wr_item_sk), web_sales(ws_order_number)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "{\"rule\": \"Avoid creating multiple indexes on the same table with overlapping columns unless necessary. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that indexes are aligned with the query workload to prevent regression.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions, especially for large tables and frequently queried columns. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve performance by reducing the need for additional lookups.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, and avoid single-column indexes on small tables or columns with low cardinality.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, such as date keys and item keys, to prevent regressions.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions in SELECT statements.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in query predicates. Focus on single-column indexes for columns that are consistently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in join or filter conditions across multiple queries. Prioritize single-column indexes on columns that are consistently used in join conditions or filters across the workload.\"}"], ["train_workload_random_5_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), store(s_store_sk)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{\"rule\": \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions in the workload, especially if they are not part of the primary filtering criteria. Focus on indexing columns that are consistently used in filtering and joining across multiple queries to prevent regression.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, and avoid single-column indexes that do not align with query patterns.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{rule: \"Ensure that indexes on columns used in join conditions and where clauses are maintained, especially for large tables. Avoid replacing indexes on frequently joined or filtered columns with indexes on less frequently used columns.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_returns(wr_item_sk), web_sales(ws_order_number)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns not used in join or filter conditions, especially if they increase index size without significant query performance benefits. Focus on single-column indexes for frequently joined or filtered columns.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize multi-column indexes for columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are frequently used in isolation.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in join conditions, filtering predicates, or as part of aggregation operations. Remove redundant indexes on columns that are already covered by composite indexes or are not critical for query performance.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns in the workload are maintained or improved, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve query performance.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions with high cardinality columns, as this can lead to performance regressions. Instead, focus on indexing high cardinality columns that are frequently used in WHERE clauses or as join keys.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid indexing columns that are less frequently used or only appear in specific queries, unless they are critical for performance in those cases.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns in WHERE clauses are maintained. Avoid removing composite indexes that cover multiple columns used together in queries, especially when they are part of UNION operations or subqueries. Prioritize indexes on columns with high cardinality and those involved in date range queries.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently queried together in the workload. Focus on single-column indexes for high cardinality columns that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently queried together in the workload. Focus on single-column indexes for columns that are consistently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_order_number), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are consistently maintained across both improving and regression index selections, especially for high cardinality columns and those frequently used in WHERE clauses or JOIN operations.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve performance by reducing the need for full table scans.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{rule: \"Ensure indexes are created on columns frequently used in join conditions and filters, especially those with high cardinality or involved in range queries. Avoid replacing indexes on such columns with indexes on columns less frequently used in joins or filters.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables and frequently joined columns. Avoid removing composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in join or filter conditions across multiple queries. Focus on indexing columns that are consistently used in WHERE clauses or JOIN conditions, especially those with high cardinality, to improve query performance.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index in the improvement selection, especially if they are frequently used in join conditions or filters. Prioritize indexing on columns that are directly involved in filtering or joining operations in the workload queries, and ensure that the indexes cover the most selective columns first.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions with high cardinality columns, as this can lead to performance regressions. Instead, focus on indexing high cardinality columns that are frequently filtered or sorted in queries.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, and avoid relying solely on single-column indexes for tables with high cardinality or frequent joins.\"}"], ["train_workload_random_5_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), store(s_store_sk)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid replacing integer-based indexes with date-based indexes on columns frequently used in join conditions, especially when the integer-based index is on a primary or foreign key column.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently queried together or do not have a high cardinality, as they may lead to unnecessary overhead and regression in query performance. Focus on single-column indexes for frequently filtered columns and ensure they align with the workload's query patterns.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, especially those involved in JOIN operations across large tables.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure multi-column indexes are used for columns frequently involved in join conditions and filters, especially when they are part of large tables or have high cardinality. Avoid single-column indexes on columns that are part of complex join conditions or are frequently filtered alongside other columns.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{rule: \"Avoid indexing columns with low cardinality or columns that are frequently used in range queries, such as date columns, unless they are part of a composite index that includes high cardinality columns. Prioritize indexing columns that are frequently used in join conditions and have high cardinality, such as order numbers or item identifiers.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in complex queries, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, and avoid omitting indexes on critical columns like order numbers and date keys.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in join or filter conditions across multiple queries. Instead, focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality or used in range queries.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for columns frequently used in WHERE clauses and JOIN conditions. Prioritize composite indexes for columns used together in queries, and avoid redundant single-column indexes when composite indexes are more efficient.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating composite indexes that include both a primary key and a non-key attribute when the primary key alone is sufficient for query optimization. Focus on indexing foreign keys and frequently filtered columns separately to prevent regression.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in range queries, as they may lead to performance regressions. Instead, focus on indexing columns that are frequently used in equality joins or have high cardinality, which can significantly improve query performance.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily filtered or joined in the workload, as they may not provide additional performance benefits and can lead to regression. Instead, focus on indexing columns that are frequently used in WHERE clauses or as join keys but are not already indexed.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_order_number), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid indexing columns that are not directly used in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in join conditions, such as foreign keys, and columns involved in WHERE clauses for filtering, especially those with high cardinality or used in range queries.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Ensure composite indexes include all necessary columns for join and filter conditions, especially when multiple columns are used together in queries, such as (C store_returns.sr_ticket_number, C store_returns.sr_returned_date_sk) and (C store_sales.ss_sold_date_sk, C store_sales.ss_customer_sk).\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables and frequently queried columns. If the improvement and regression indexes are identical, verify that the workload queries are optimized for the current schema and indexes, and consider additional indexes if performance issues persist.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improving index selection, especially if they are frequently used in join conditions or filters, as this can lead to redundant indexing and potential performance regressions.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid indexing columns that are less frequently used or only appear in specific queries without significant performance impact.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{rule: \"Avoid indexing columns with low cardinality or columns that are frequently used in range queries, such as date columns, unless they are part of a composite index that includes high cardinality columns. Prioritize indexing columns that are frequently used in join conditions and have high cardinality, such as primary keys or unique identifiers.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Ensure that all join and filter conditions in the workload are covered by indexes. Specifically, include indexes on columns frequently used in join conditions and where clauses, such as order numbers and date keys, across all relevant tables.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_order_number), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Ensure indexes on columns involved in join conditions and filtering criteria across multiple queries, especially those with high cardinality or frequently used in WHERE clauses. Avoid redundant indexes on columns with low cardinality or those not directly involved in performance-critical operations.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in join conditions and where clauses, especially those with high cardinality, to improve query performance and prevent regression.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index unless the workload specifically benefits from single-column access patterns. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Consider the impact of composite indexes on query performance and ensure they align with the workload's access patterns.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{rule: \"Ensure that indexes cover both join and filter conditions, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, such as date keys and item keys, which are critical for query performance.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_returns(wr_item_sk), web_sales(ws_order_number)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns are consistently applied across all relevant tables in the workload. Prioritize indexing on columns that are part of join conditions and have high cardinality, such as order numbers and item keys, to prevent regression in query performance.\"}"], ["train_workload_random_5_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), store(s_store_sk)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid replacing integer-based indexes with date-based indexes on columns frequently used in join conditions, especially when the integer-based index is on a primary or foreign key column.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_returns(wr_item_sk), web_sales(ws_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Ensure composite indexes include all necessary columns for join conditions and filtering, especially when multiple columns are used together in queries. For example, maintain composite indexes like (sr_ticket_number, sr_returned_date_sk) and (ss_sold_date_sk, ss_customer_sk) to optimize joins and filters in the workload.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{rule: \"Ensure multi-column indexes are used for columns frequently involved in join conditions or filters across multiple queries, especially when they involve large tables. Prioritize indexes on columns that are part of composite keys or are used in conjunction with other columns in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_5_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), store(s_store_sk)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes are selected on columns that are frequently used in join conditions across multiple queries, especially when they involve large tables. Avoid removing indexes that optimize join operations on large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries, especially for large tables. Avoid single-column indexes when multi-column indexes can optimize multiple conditions simultaneously.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns frequently used in join conditions across multiple queries, such as order numbers and date keys, to prevent regression in query performance.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join conditions involve large tables. Instead, focus on indexing columns that are used in filtering conditions or are part of the workload's WHERE clause, as these can significantly improve query performance by reducing the number of rows processed.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection, especially if they are frequently used in join conditions or filters. Prioritize indexing columns that are used in join conditions and filters across multiple queries, and ensure that indexes on columns with high cardinality are maintained to optimize query performance.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions, as they may lead to regression by increasing index maintenance overhead without improving query performance. Focus on single-column indexes for frequently filtered or joined columns.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_order_number), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{rule: \"Avoid adding composite indexes that include columns not used in join conditions or filtering predicates, especially on large tables, as they may lead to regression by increasing index maintenance overhead without improving query performance.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, such as date keys and foreign keys, to prevent regression.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Ensure multi-column indexes are used for columns frequently involved in join conditions and filters, especially when they are part of large tables or have high cardinality. Avoid replacing multi-column indexes with single-column indexes unless the workload specifically benefits from it.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating multi-column indexes that include columns with high cardinality and low selectivity, especially when single-column indexes on those columns already exist and are sufficient for the workload.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Ensure multi-column indexes are preserved when they cover multiple columns used together in WHERE clauses or JOIN conditions, especially when they involve large tables or frequently queried columns.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{rule: \"Ensure multi-column indexes are used for columns frequently involved in join conditions and filters, especially when they appear together in multiple queries. Prioritize indexes on columns with high cardinality and those involved in date range filters.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in join conditions and filters, especially when they involve large tables. Avoid single-column indexes on columns that are part of multi-column join conditions or filters, as they may lead to regressions in query performance.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries. Avoid single-column indexes when multi-column indexes can optimize multiple conditions simultaneously.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Ensure that all join and filter conditions in the workload are covered by indexes. Specifically, include composite indexes for columns frequently used together in joins or filters, such as (store_returns.sr_ticket_number, store_returns.sr_returned_date_sk) and (store_sales.ss_sold_date_sk, store_sales.ss_customer_sk). Avoid omitting critical indexes on columns like order numbers and date keys that are heavily used in the workload.\"}"], ["train_workload_random_5_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), store(s_store_sk)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in join or filter conditions across multiple queries. Focus on single-column indexes for high cardinality columns that are consistently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "{rule: \"Ensure multi-column indexes are used for columns frequently joined together or filtered in combination, especially when dealing with large tables. Prioritize indexes on columns involved in WHERE clauses and JOIN conditions, and consider the use of composite indexes for columns that are often queried together to improve query performance.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in join or filter conditions across multiple queries. Focus on single-column indexes for columns that are consistently used in join conditions or filters across the workload.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for large tables. Prioritize composite indexes that include both join keys and frequently filtered columns. Avoid regression by maintaining indexes on columns used in WHERE clauses and JOIN conditions, particularly for tables with high row counts.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, such as date and foreign key columns, to prevent regression.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns are maintained. Avoid removing indexes on columns that are part of join conditions or are frequently used in WHERE clauses, especially if they are used in multiple queries across the workload.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in query predicates. Focus on single-column indexes for columns that are consistently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{\"rule\": \"Ensure that indexes on date columns used in range queries (e.g., date_dim.d_date_sk) are consistently applied across all related tables in the workload to prevent regression.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance. Remove indexes on columns that are not part of these operations, as they may lead to regression by increasing maintenance overhead without providing significant query performance benefits.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. If an index is removed or replaced, verify that it does not lead to missing coverage for critical join keys or frequently filtered columns, especially in large tables. Consider composite indexes for multi-column conditions.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{rule: \"Avoid indexing columns with data types that are not directly used in join conditions or filters, such as 'date' when 'integer' is used for joins. Prioritize indexing columns that are frequently used in join conditions and filters, especially those with high cardinality or involved in complex queries.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_order_number), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Avoid creating composite indexes that include both high cardinality and low cardinality columns together, as it may lead to regression in query performance. Instead, focus on creating separate indexes for high cardinality columns and ensure that the indexes align with the most frequently used query patterns.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid indexes on columns with low cardinality or those not involved in frequent queries.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of composite keys or are heavily used in WHERE clauses, such as date columns in date_dim, to prevent regression in query performance.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. If a query involves multiple tables with join conditions, indexes should be created on the columns used in the join conditions across these tables. Additionally, if there are frequent filter conditions on certain columns, those should also be indexed. Avoid removing indexes that cover both join and filter conditions, as this can lead to regression.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, such as date keys and identifiers. Avoid single-column indexes on small tables or columns with low cardinality unless they are critical for specific query performance.\"}"], ["train_workload_random_5_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), store(s_store_sk)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables unless they are part of a composite index that optimizes the specific join pattern. Prioritize indexing columns that are used in filtering conditions and have high cardinality to improve query performance.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Ensure that indexes on join keys and frequently filtered columns are maintained, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve query performance by reducing the need for full table scans.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Ensure composite indexes include all necessary columns for join conditions and filtering, especially when multiple columns are used together in queries. For example, maintain composite indexes like (C store_returns.sr_ticket_number, C store_returns.sr_returned_date_sk) and (C store_sales.ss_sold_date_sk, C store_sales.ss_customer_sk) to optimize performance for queries involving these columns together.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating multi-column indexes that include both a date column and its corresponding year column, as it may lead to regression by increasing index size and complexity without significant performance gain.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join involves large tables. Instead, prioritize indexing columns that are used in filtering conditions or are part of the primary key, as these can significantly improve query performance by reducing the search space.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve performance by reducing the need for full table scans.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_order_number), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{rule: \"Avoid indexing columns that are frequently used in range conditions or calculations, such as date columns used in date range filters, and numeric columns used in calculations, as they may lead to regression in query performance. Instead, focus on indexing columns that are used in equality conditions or joins, such as primary keys or foreign keys.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries, especially for large tables and frequently joined columns. Avoid removing indexes that are used in multiple queries or are part of composite indexes that optimize complex query patterns.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize multi-column indexes for columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes if columns are often used in combination with others in queries.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are part of foreign key relationships, especially when they are frequently used in join conditions. Prioritize indexing columns that are used in WHERE clauses and are not already indexed, and ensure that indexes are created on columns with high cardinality to improve query performance.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_returns(wr_item_sk), web_sales(ws_order_number)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not directly used in join conditions or filtering criteria, especially when they are not frequently queried together. Focus on single-column indexes for columns that are consistently used in join conditions or filtering across multiple queries.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, such as date keys and identifiers. Avoid regression by maintaining indexes on columns involved in multiple query conditions, like date_dim(d_date_sk, d_date, d_year) and store_sales(ss_sold_date_sk, ss_customer_sk).\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions, especially for large tables and frequently queried columns. Avoid omitting composite indexes that cover multiple columns used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_order_number), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Ensure that indexes are created on columns frequently used in join conditions and where clauses, especially for large tables. Avoid replacing indexes on surrogate keys (e.g., *_sk) with indexes on non-surrogate keys (e.g., *_date) unless there is a clear performance benefit. Prioritize indexing columns that are used in multiple queries across the workload.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{\"rule\": \"Ensure composite indexes are maintained when they involve frequently joined or filtered columns, especially when they include date or customer keys, as seen with the missing composite indexes on store_returns (sr_ticket_number, sr_returned_date_sk) and store_sales (ss_sold_date_sk, ss_customer_sk) in the regression index selection.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Ensure multi-column indexes are preserved when they cover multiple columns used together in WHERE clauses or JOIN conditions, especially for large tables with frequent queries involving these columns.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid redundant indexes on columns that are already covered by existing indexes in the improvement set.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure multi-column indexes are created for columns frequently used together in join conditions or filters, especially when they involve large tables. Avoid single-column indexes on columns that are part of multi-column join conditions unless they are also used independently in other queries.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{rule: \"Ensure indexes are created on columns frequently used in join conditions and filters, especially those involved in date range queries and high cardinality columns. Avoid replacing indexes on such columns with indexes on columns less frequently used in joins or filters.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables. Avoid missing multi-column indexes that are used together in join conditions or filters, as seen in the improvement index selection with multi-column indexes on store_returns and store_sales.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_returns(wr_item_sk), web_sales(ws_order_number)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Ensure that indexes on columns used in join conditions and where clauses are consistently applied across all relevant tables, especially for high cardinality columns and those frequently used in filtering and joining operations. Avoid unnecessary composite indexes that do not align with query patterns, and prioritize single-column indexes on primary keys and foreign keys that are frequently joined.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance. Remove redundant indexes on columns that are already covered by composite indexes or are not part of the critical query paths.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure that multi-column indexes are preserved when they are used in join conditions or filtering conditions across multiple tables, as they can significantly improve query performance by reducing the number of rows scanned. Additionally, prioritize indexes on columns frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially when they are part of large tables.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{\"rule\": \"Ensure that indexes cover join and filter conditions in the workload queries. Specifically, prioritize composite indexes on columns frequently used together in joins and filters, such as (store_returns.sr_ticket_number, store_returns.sr_returned_date_sk) and (store_sales.ss_sold_date_sk, store_sales.ss_customer_sk). Avoid single-column indexes on high cardinality columns unless they are frequently used in isolation.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as these columns are likely to be part of foreign key relationships and already have implicit indexing. Instead, focus on indexing columns that are used in filtering conditions or aggregations, especially those with high cardinality, to improve query performance.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_order_number), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid indexing columns that are not directly used in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in join conditions, such as foreign keys, and columns involved in WHERE clauses for filtering, especially those with high cardinality or used in range queries.\"}"], ["train_workload_random_5_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), store(s_store_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear benefit in query performance. Prioritize single-column indexes on frequently joined or filtered columns, especially those involved in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating multi-column indexes that include columns with high cardinality or low selectivity, especially when single-column indexes on those columns already exist and are sufficient for the workload.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Prioritize indexes on columns with high cardinality and those involved in date range queries. Avoid regression by maintaining indexes on columns that are part of complex queries involving multiple tables and conditions.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and where clauses are prioritized, especially for large tables. Avoid replacing indexes that cover multiple columns with single-column indexes unless the single-column index is more frequently used in critical queries.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{rule: \"Avoid using indexes on columns with high cardinality and frequent range queries, such as date columns, unless they are part of a composite index that includes other columns used in filtering or joining. Prefer indexes on columns that are frequently used in equality conditions or joins, especially if they are foreign keys or primary keys.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns not directly involved in join conditions or filtering criteria, especially when they are already covered by single-column indexes. Prioritize single-column indexes on frequently joined or filtered columns to prevent regression.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Ensure multi-column indexes include all columns used in join conditions and filters, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and consider the cardinality and data type of columns to optimize index selection.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "```json\n{\n    \"rule\": \"Ensure that indexes on columns used in join conditions and frequently filtered columns are included. Avoid removing composite indexes that cover multiple columns used together in queries, especially when they are part of join conditions or where clauses. Additionally, maintain indexes on columns that are used in both join conditions and where clauses across multiple queries in the workload.\"\n}\n```"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions, as they may lead to regression by increasing index size and reducing selectivity. Focus on single-column indexes for frequently filtered or joined columns.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, such as date keys and identifiers. Avoid single-column indexes on small tables or columns with low cardinality unless they are critical for specific query patterns.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily filtered or joined in the workload queries, as they may not provide additional performance benefits and could lead to regression. Instead, focus on indexing columns that are frequently used in WHERE clauses or as join keys but are not already indexed.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Ensure indexes on columns used in join conditions and where clauses, especially for large tables. Avoid replacing indexes on primary key or frequently joined columns with indexes on less frequently used columns.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_returns(wr_item_sk), web_sales(ws_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear performance benefit. Ensure that indexes on frequently joined columns, such as foreign keys, are maintained. Prioritize indexing columns used in WHERE clauses and JOIN conditions over those used in SELECT or ORDER BY clauses.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes with multiple columns from the same table when single-column indexes on those columns already exist or are more frequently used in the workload. Prioritize single-column indexes on columns that are frequently used in WHERE clauses, JOIN conditions, or as part of UNION operations.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{rule: \"Ensure that indexes on join keys and frequently filtered columns are maintained, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve query performance by reducing the need for full table scans.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid removing indexes that support critical join operations or filter conditions in complex queries.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{\"rule\": \"Ensure that multi-column indexes are preserved when they cover multiple query conditions, especially for large tables or frequently joined columns. Avoid replacing them with single-column indexes that do not cover the same query patterns.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns not directly involved in join conditions or filtering criteria. Focus on single-column indexes for primary join keys and frequently filtered columns.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Ensure indexes cover join and filter conditions, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, such as date keys and identifiers. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance. Remove redundant indexes on columns that are already covered by composite indexes.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{\"rule\": \"Ensure that indexes on join keys and frequently filtered columns are maintained across all tables involved in the workload. Specifically, maintain indexes on columns used in WHERE clauses and JOIN conditions, such as date_dim.d_date_sk, item.i_item_sk, and store_sales.ss_item_sk, to prevent regression in query performance.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes that include both high cardinality and low cardinality columns together, especially when the low cardinality column is not used in filtering conditions. Instead, focus on single-column indexes for high cardinality columns that are frequently used in join or filter conditions.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_order_number), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Avoid removing indexes on columns frequently used in join conditions across multiple queries, especially when they involve large tables or are part of complex query structures. Prioritize maintaining indexes on columns that are used in WHERE clauses with range conditions or are involved in EXISTS/NOT EXISTS subqueries.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns are maintained. Avoid removing indexes on columns that are part of join conditions or are frequently used in WHERE clauses, especially if they are used in multiple queries across the workload.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Ensure composite indexes include all necessary columns for join conditions and filtering, especially when multiple columns are used together in queries. For example, maintain composite indexes like (sr_ticket_number, sr_returned_date_sk) and (ss_sold_date_sk, ss_customer_sk) to optimize joins and filters in the workload.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_order_number), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index is specifically required by the workload. Ensure that indexes on frequently joined columns, such as foreign keys, are maintained. Remove redundant indexes that do not align with the workload's query patterns.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when they are already indexed in other tables. Prioritize indexing columns that are used in filtering conditions and have high cardinality, as well as columns involved in frequent aggregations or sorting operations.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. If an index is removed or replaced, verify that all critical join and filter columns are still indexed, especially in large tables or those frequently joined, such as 'date_dim' and 'item_sk' columns across different tables.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{rule: \"Ensure indexes cover join and filter conditions. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid indexes on columns with low cardinality or those not directly involved in query conditions.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually and frequently used in join conditions, as this can lead to redundancy and potential performance regression. Instead, focus on indexing columns that are used in filtering conditions and are not already indexed, ensuring that indexes are aligned with the workload's query patterns.\"}"], ["train_workload_random_5_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), store(s_store_sk)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in join or filter conditions across multiple queries. Focus on single-column indexes for high cardinality columns that are consistently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_order_number), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "{\"rule\": \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently used in join or filter conditions. Focus on indexing columns that are used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality and those that are part of large tables. Remove indexes on columns that are not used in the workload or are already indexed in a more efficient way.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially in large tables.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{rule: \"Ensure that indexes cover join and filter conditions in queries, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, such as order numbers and date keys, as these are critical for query performance.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, such as date keys and identifiers across sales and returns tables.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns in WHERE clauses are maintained. Avoid removing composite indexes that cover multiple columns used together in queries, especially when they are part of UNION operations or complex joins.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Missing columns in composite indexes can lead to regressions in query performance.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually and are frequently used in join conditions or filters. Prioritize single-column indexes for columns involved in equality joins and filters, especially when they are used across multiple queries.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{rule: \"Ensure that indexes on join keys and frequently filtered columns are maintained, especially for large tables. Avoid removing indexes on columns that are used in WHERE clauses, JOIN conditions, and GROUP BY clauses in the workload queries.\"}"], ["train_workload_random_5_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), store(s_store_sk)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions across large tables, especially when they are frequently used in the workload. Prioritize indexes on columns that are used in both join conditions and filtering conditions to optimize query performance.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables. Avoid regression by maintaining composite indexes on columns frequently used together in joins and filters, such as date columns and identifiers like order numbers or item keys.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions, as they may lead to regression by increasing index size and reducing selectivity. Focus on single-column indexes or composite indexes that match the query patterns in the workload.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Ensure indexes cover join and filter conditions, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, such as (cr_order_number, cr_returned_date_sk) and (ws_order_number, ws_sold_date_sk). Avoid single-column indexes on columns with high cardinality unless they are frequently used in isolation.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Prioritize indexing columns that are part of WHERE clauses and JOIN conditions, and consider the use of composite indexes for columns that are often queried together.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "```json\n{\n    \"rule\": \"Ensure that indexes on columns frequently used in join conditions and filters, especially those involving date ranges and order numbers, are maintained. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve query performance by reducing the need for sorting and filtering operations.\"\n}\n```"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries, as they may lead to performance regressions. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, especially if they are involved in frequent queries.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Ensure that indexes cover join and filter conditions in queries, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, such as order numbers and date keys, as these are critical for query performance.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns in WHERE clauses are maintained. Avoid removing composite indexes that cover multiple columns used together in queries, especially when they are part of join conditions or are used in conjunction with date filters.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_order_number), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear performance benefit. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses. Ensure that indexes align with the query patterns and avoid redundant or overlapping indexes.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Missing columns in composite indexes can lead to regressions in query performance.\"}"], ["train_workload_random_5_4q", "[I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improving index selection, especially if they are frequently used in join conditions or filters, as this can lead to redundant indexing and potential performance regressions.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions, especially for large tables. Avoid removing indexes on columns frequently used in join conditions across multiple queries, such as order numbers and item keys, to prevent regression.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{rule: \"Avoid replacing indexes on primary key or frequently joined columns with indexes on non-key columns, especially if the non-key columns are not used in join conditions or are less selective.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns not directly involved in join conditions or filtering criteria. Focus on single-column indexes for primary join keys and filtering columns used in WHERE clauses.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Ensure indexes cover join and filter conditions, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, such as (cr_order_number, cr_returned_date_sk) and (ws_order_number, ws_sold_date_sk). Avoid single-column indexes on columns with low cardinality or those not directly involved in join conditions.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join involves large tables. Instead, prioritize indexing columns that are used in filtering conditions or are part of the primary key, as these can significantly improve query performance by reducing the search space.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_order_number), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index unless necessary. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality. Consider the workload and query patterns to ensure indexes are aligned with query performance needs.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{rule: \"Ensure that indexes cover join and filter conditions in queries, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, such as order numbers and date keys, as these are critical for query performance.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_order_number), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns are consistently applied across all relevant tables in the workload. Specifically, maintain indexes on columns that are used in join conditions across large tables, such as order numbers and item keys, to prevent regression in query performance.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Ensure indexes on columns used in join conditions and filters, especially for large tables. Avoid indexing columns that are not directly used in join conditions or filters, as seen with 'date_dim(d_date)' and 'promotion(p_promo_sk)' in the regression index.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_returns(wr_item_sk), web_sales(ws_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index significantly improves query performance. Prioritize single-column indexes on frequently joined or filtered columns, especially those involved in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables. If an index is missing or not covering a critical part of the query, it can lead to regression. In this case, both index selections are identical, indicating no regression in index selection.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", "[item(i_item_sk), promotion(p_promo_sk), store_returns(sr_returned_date_sk), web_returns(wr_item_sk), catalog_returns(cr_returned_date_sk), store(s_store_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance. Remove redundant indexes that do not contribute to query efficiency.\"}"], ["train_workload_random_5_4q", " [date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_returns(wr_item_sk), web_sales(ws_order_number)]", " [web_returns(wr_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized, especially when they are frequently used across multiple queries in the workload. Additionally, maintain indexes on columns that are part of WHERE clauses with range conditions or are used in GROUP BY clauses.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_current_price)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes for columns frequently used together in joins and filters, such as date_dim(d_date_sk, d_date, d_year) and catalog_sales(cs_sold_date_sk, cs_order_number). Avoid single-column indexes that do not cover the full scope of query conditions.\"}"], ["train_workload_random_5_4q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_returns(wr_order_number, wr_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk)]", " [Date_dim(d_date_sk, d_date, d_year), Item(i_item_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns not directly used in join conditions or filtering criteria. Focus on single-column indexes for primary join keys and frequently filtered columns to prevent regression.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk, sr_ticket_number), item(i_item_sk, i_current_price), customer_address(ca_state)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns are included, especially for large tables. Avoid removing indexes on columns that are part of composite keys used in joins or filters, as this can lead to performance regressions.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), date_dim(d_date_sk), date_dim(d_date), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), date_dim(d_year), catalog_returns(cr_item_sk), web_site(web_site_id)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are maintained, especially for large tables. Avoid removing indexes that are used in multiple queries across different parts of the workload, such as date_dim(d_date_sk) and item(i_item_sk). Prioritize indexes on columns that are frequently used in WHERE clauses and JOIN operations, particularly those involving large datasets.\"}"], ["train_workload_random_5_4q", " [Web_returns(wr_order_number), Web_sales(ws_order_number), Catalog_sales(cs_sold_date_sk), Store_sales(ss_item_sk, ss_sold_date_sk)]", "[date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), store_returns(sr_returned_date_sk), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses and have high cardinality, especially if they are used in filtering conditions or aggregations.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_state)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters, especially those involving large tables or frequently queried columns, are maintained or improved. Avoid removing or downgrading indexes on such columns, as it can lead to performance regressions.\"}"], ["train_workload_random_5_4q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Store(s_store_sk), Date_dim(d_date_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Promotion(p_promo_sk), Item(i_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, such as date keys and foreign keys, to optimize query performance and prevent regressions.\"}"]], "train_workload_random_7_10q": [["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that indexes on join keys and frequently filtered columns are included in the regression index selection, especially for large tables. Prioritize indexes on columns used in WHERE clauses and JOIN conditions, such as ticket numbers, item keys, and date keys, to prevent performance regressions.\"}"], ["train_workload_random_7_10q", "[date_dim(d_date), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), catalog_returns(cr_order_number), item(i_item_id), date_dim(d_date_sk), date_dim(d_month_seq)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes with multiple columns on large tables unless the workload specifically benefits from multi-column filtering or joining. Instead, prioritize single-column indexes on frequently filtered or joined columns across different tables to improve query performance.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in WHERE clauses or JOIN conditions. Instead, prioritize single-column indexes for such columns to optimize query performance.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Ensure composite indexes are used for join conditions involving multiple columns, especially when the workload involves complex joins and aggregations. Avoid single-column indexes when multi-column conditions are prevalent in the workload.\"}"], ["train_workload_random_7_10q", "[customer_address(ca_state), item(i_category), date_dim(d_year), store(s_store_sk), web_site(web_site_id)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily filtered or joined in the workload, as this can lead to redundant or less effective indexing. Instead, focus on indexing columns that are frequently used in WHERE clauses or JOIN conditions but are not already covered by existing indexes.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that indexes cover join keys and filter conditions used in the workload queries. Avoid removing indexes on columns frequently used in joins or where clauses, such as ticket numbers, item keys, and date keys, which are critical for query performance.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure composite indexes are used for frequently joined columns and filter conditions, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filters on multiple columns.\"}"], ["train_workload_random_7_10q", "[customer_address(ca_state), item(i_category), date_dim(d_year), store(s_store_sk), web_site(web_site_id)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the workload involves joins on these columns. Instead, focus on indexing columns that are frequently used in WHERE clauses or as join keys, and ensure that these indexes are not redundant with existing indexes.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Avoid creating composite indexes that do not align with the join conditions or filter criteria in the workload. Instead, prioritize single-column indexes on columns frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Ensure composite indexes match the specific multi-column conditions used in queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Ensure that composite indexes are used for join conditions and filtering columns in large tables, especially when multiple columns are involved in the join or filter conditions. Avoid using single-column indexes on columns that are frequently used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid replacing composite indexes with single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_7_10q", " [date_dim(d_date, d_date_sk), web_sales(ws_item_sk), customer_address(ca_gmt_offset), customer(c_customer_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other columns that are frequently used together in queries. Instead, focus on creating composite indexes that match the query patterns, especially for columns involved in joins and filters.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating composite indexes that include columns not used together in queries, as this can lead to regression by increasing index maintenance overhead without improving query performance.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually if the individual indexes are frequently used in the workload. Instead, focus on maintaining individual indexes that align with the most common query patterns, especially for columns involved in joins and where clauses.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Ensure that composite indexes are used for join conditions and filtering columns in large tables, especially when multiple columns are involved in the join or filter conditions. Avoid using single-column indexes on large tables when the workload involves complex queries with multiple joins and filters.\"}"], ["train_workload_random_7_10q", " [date_dim(d_date, d_date_sk), web_sales(ws_item_sk), customer_address(ca_gmt_offset), customer(c_customer_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other columns that are frequently used together in queries. Instead, focus on single-column indexes for columns that are independently filtered or joined in multiple queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filters on multiple columns.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions, especially when multiple columns are used together in join conditions across large tables. Prioritize composite indexes over single-column indexes for such scenarios to prevent regression.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are included, especially when they are frequently used in the workload. Avoid creating composite indexes that do not align with the query patterns, as they may lead to regressions by not optimizing the most critical join operations.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Ensure that composite indexes cover all join and filter conditions in the workload. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filters on multiple columns.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. If an index is removed or replaced, verify that it does not lead to missing coverage for frequently used join keys or filter predicates, especially for large tables. Consider the workload's most common join and filter patterns when selecting indexes.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure composite indexes are used for frequently joined columns and columns involved in WHERE clauses with multiple conditions. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filtering on multiple columns.\"}"], ["train_workload_random_7_10q", " [date_dim(d_date, d_date_sk), web_sales(ws_item_sk), customer_address(ca_gmt_offset), customer(c_customer_sk)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Avoid redundant indexes on columns already covered by other indexes. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Avoid creating composite indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by not optimizing for specific query patterns. Instead, prioritize single-column indexes on such columns to improve join performance.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Ensure composite indexes are used for join conditions involving multiple columns, especially when the workload involves complex joins and aggregations. Avoid single-column indexes when multiple columns are frequently used together in join conditions or filters.\"}"], ["train_workload_random_7_10q", "[date_dim(d_date), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), catalog_returns(cr_order_number), item(i_item_id), date_dim(d_date_sk), date_dim(d_month_seq)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the workload involves joins or filters on those individual columns. Instead, focus on indexing columns that are frequently used together in join conditions or where clauses, and ensure that indexes cover the most selective columns first.\"}"], ["train_workload_random_7_10q", " [date_dim(d_date, d_date_sk), web_sales(ws_item_sk), customer_address(ca_gmt_offset), customer(c_customer_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other columns that are frequently used together in join conditions or filters. Instead, focus on single-column indexes for columns that are used independently in multiple queries, especially if they are used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_7_10q", " [store(s_store_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes, especially when they are frequently used in joins or filters, as this can lead to regression by increasing maintenance overhead without significant query performance benefits.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure that composite indexes include all necessary columns for join conditions and filtering, especially when multiple columns are involved in joins and where clauses. Avoid creating indexes that are too broad and include columns not frequently used together in queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the workload involves frequent joins or filters on those individual columns. Instead, prioritize individual indexes on columns that are frequently used in WHERE clauses or JOIN conditions to optimize query performance.\"}"], ["train_workload_random_7_10q", " [Promotion(p_promo_sk), Item(i_item_sk, i_color), Date_dim(d_date, d_date_sk), Customer_address(ca_gmt_offset), Customer(c_customer_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across large tables. Avoid indexes that do not cover critical join conditions or filter predicates, especially in high cardinality columns.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions or aggregations, as these can significantly improve query performance.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included in the index selection to prevent regression. Prioritize indexing columns that are frequently used in WHERE clauses and join conditions across multiple queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially if they are used across multiple queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in WHERE clauses or JOIN conditions across multiple queries. Instead, prioritize single-column indexes for such columns to optimize query performance and prevent regression.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Ensure that composite indexes are used for join conditions and filtering columns in large tables, especially when multiple columns are involved in the join or filter conditions. Avoid using single-column indexes on columns that are frequently used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index in the regression selection, especially if they are frequently used in join conditions or filters. Instead, focus on indexing columns that are used in WHERE clauses or join conditions but are not part of any composite index, as seen in the improvement selection.\"}"], ["train_workload_random_7_10q", "[customer_address(ca_state), item(i_category), date_dim(d_year), store(s_store_sk), web_site(web_site_id)]", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are frequently used in joins or filters, as this can lead to regression by increasing maintenance overhead and reducing query performance. Focus on indexing columns that are used in WHERE clauses and are not already indexed in other tables.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are included, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the workload involves frequent joins or filters on those individual columns. Instead, prioritize individual indexes that align with the join and filter conditions in the workload.\"}"], ["train_workload_random_7_10q", " [date_dim(d_date_sk, d_date), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number), item(i_item_id)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Avoid removing indexes on columns frequently used in joins or filters, especially for large tables. Prioritize indexing columns involved in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_7_10q", " [date_dim(d_date), customer_address(ca_gmt_offset), item(i_color)].", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple queries, as they may lead to redundant indexing and potential performance regressions. Focus on indexing columns that are used in filtering conditions and are not already indexed by primary or foreign keys.\"}"], ["train_workload_random_7_10q", " [date_dim(d_date, d_date_sk), web_sales(ws_item_sk), customer_address(ca_gmt_offset), customer(c_customer_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear performance benefit. Check for redundant indexes on the same columns across different tables and ensure that indexes align with the most frequently used query patterns.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that indexes on join keys and frequently filtered columns are included in the regression index selection, especially for large tables. Prioritize indexes on columns used in WHERE clauses and JOIN conditions, such as ticket numbers and date keys, to prevent performance regressions.\"}"], ["train_workload_random_7_10q", " [store(s_store_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions, as this can lead to regression by increasing index maintenance overhead without significant query performance benefits. Focus on single-column indexes for high cardinality columns that are frequently used in filtering or joining, and ensure that composite indexes are only created for columns that are consistently used together in queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Ensure that the regression index selection includes composite indexes that cover both the join and filter conditions in the workload queries, especially for large tables. If a composite index is missing, consider adding it to prevent performance regression.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Ensure that composite indexes are used for join conditions and filtering columns in large tables, especially when multiple columns are involved in the join or filter conditions. Avoid using single-column indexes on columns that are frequently used together in join conditions or filters, as this can lead to regressions in query performance.\"}"], ["train_workload_random_7_10q", " [date_dim(d_date_sk, d_date), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number), item(i_item_id)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as they may lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in filtering conditions or aggregations, especially if they are not part of a foreign key relationship.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filters on multiple columns.\"}"], ["train_workload_random_7_10q", "[customer_address(ca_state), item(i_category), date_dim(d_year), store(s_store_sk), web_site(web_site_id)]", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are frequently used in join conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, and ensure that indexes are not redundant with existing indexes on similar columns in related tables.\"}"], ["train_workload_random_7_10q", " [date_dim(d_date), customer_address(ca_gmt_offset), item(i_color)].", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index covering multiple columns used in join conditions or filters, as this can lead to redundancy and potential performance regression. Instead, focus on indexing columns that are frequently used in WHERE clauses or as standalone join keys, especially if they are not part of existing composite indexes.\"}"], ["train_workload_random_7_10q", " [date_dim(d_date_sk, d_date), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number), item(i_item_id)]", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Avoid creating indexes on columns that are frequently used in range conditions or aggregations without considering their selectivity and the overall query pattern. Instead, prioritize indexing columns that are used in equality joins or have high cardinality, especially when they are part of the WHERE clause or JOIN conditions.\"}"], ["train_workload_random_7_10q", " [Promotion(p_promo_sk), Item(i_item_sk, i_color), Date_dim(d_date, d_date_sk), Customer_address(ca_gmt_offset), Customer(c_customer_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across large tables. Avoid indexes that only cover columns used in SELECT without filtering or joining, especially if they are on smaller tables.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_7_10q", " [store(s_store_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the workload involves frequent joins on those columns. Prioritize single-column indexes for columns frequently used in WHERE clauses and joins, and ensure they align with the workload's filtering and joining patterns.\"}"], ["train_workload_random_7_10q", " [store(s_store_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Prioritize indexing on columns frequently used in WHERE clauses and JOIN conditions, especially for tables with high row counts. Avoid redundant indexes on columns already covered by other indexes in the same table, and ensure indexes align with the workload's filtering and joining patterns.\"}"], ["train_workload_random_7_10q", "[customer_address(ca_state), item(i_category), date_dim(d_year), store(s_store_sk), web_site(web_site_id)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the workload involves multiple joins on these columns. Instead, focus on indexing columns that are frequently used in WHERE clauses and join conditions separately to optimize query performance.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Avoid creating composite indexes that do not align with the join conditions or filter criteria in the workload. Ensure that composite indexes cover columns used together in join conditions or filters, and prioritize single-column indexes for columns frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in the workload queries. Avoid single-column indexes when composite indexes can provide better performance for complex queries.\"}"], ["train_workload_random_7_10q", " [Promotion(p_promo_sk), Item(i_item_sk, i_color), Date_dim(d_date, d_date_sk), Customer_address(ca_gmt_offset), Customer(c_customer_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included in the index selection to prevent regression. Prioritize indexing on columns frequently used in WHERE clauses and join conditions, especially those with high cardinality or involved in range queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Prioritize composite indexes over single-column indexes when the workload involves complex joins and conditions on multiple columns.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes with more than two columns unless necessary. Prioritize single-column indexes for frequently filtered columns and two-column composite indexes for columns often used together in joins or filters.\"}"], ["train_workload_random_7_10q", " [store(s_store_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Avoid creating composite indexes that include both a date column and a non-date column when the workload heavily filters or joins on the date column separately. Instead, create single-column indexes on the date columns to optimize date-based filtering and joining.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Ensure that composite indexes are used for join conditions and filtering columns in large tables, especially when multiple columns are involved in joins or filters. Avoid using single-column indexes on columns that are frequently used together in join conditions or filters, as this can lead to performance regressions.\"}"], ["train_workload_random_7_10q", " [date_dim(d_date), customer_address(ca_gmt_offset), item(i_color)].", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as they may lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in filtering conditions or aggregations without existing indexes.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and where clauses are consistently applied across all tables involved in the queries. Prioritize indexing on columns that are frequently used in join conditions and filters, especially those with high cardinality or those that are part of large tables.\"}"], ["train_workload_random_7_10q", " [date_dim(d_date), customer_address(ca_gmt_offset), item(i_color)].", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the individual indexes are frequently used in join conditions across multiple queries. Instead, focus on indexing columns that are used in WHERE clauses and join conditions but are not yet indexed, to prevent redundancy and potential performance regression.\"}"], ["train_workload_random_7_10q", " [store(s_store_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or columns that are frequently used in range queries, as they may lead to inefficient index usage and potential regressions. Instead, prioritize single-column indexes on such columns or ensure that composite indexes are aligned with the most common query patterns.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes that do not align with query patterns.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that composite indexes in the regression selection cover all join and filter conditions present in the workload queries, similar to the improvement selection. Specifically, include composite indexes on store_sales(ss_ticket_number, ss_item_sk) and web_sales(ws_item_sk, ws_order_number) to prevent regression.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filters on multiple columns.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in combination, especially for large tables. Prioritize composite indexes over single-column indexes when multiple columns are involved in join conditions or where clauses.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used in filtering conditions across multiple queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover filter conditions without considering join conditions, especially when multiple tables are involved in the query.\"}"], ["train_workload_random_7_10q", " [date_dim(d_date), customer_address(ca_gmt_offset), item(i_color)].", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition or are frequently used in WHERE clauses across multiple queries, unless they are part of a composite index that optimizes the specific query pattern. Instead, focus on indexing columns that are used in filtering conditions and are not already indexed, especially if they are used in aggregation or sorting operations.\"}"], ["train_workload_random_7_10q", " [Promotion(p_promo_sk), Item(i_item_sk, i_color), Date_dim(d_date, d_date_sk), Customer_address(ca_gmt_offset), Customer(c_customer_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included in the regression index selection, especially when they are present in the improvement index selection. This includes indexes on columns like 'i_item_sk', 'd_date_sk', and 'p_promo_sk' which are frequently used in joins across multiple queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that all join and filter conditions in the workload are covered by indexes. Specifically, include indexes on columns used in join conditions across large tables, such as store_sales(ss_ticket_number, ss_item_sk), store_returns(sr_ticket_number, sr_item_sk), and web_returns(wr_order_number, wr_item_sk). Additionally, maintain indexes on frequently filtered columns like date_dim(d_year) and customer_address(ca_address_sk) to optimize query performance.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and filters, especially for large tables. Prioritize indexes on columns with high cardinality and those frequently used in WHERE clauses or JOIN conditions. Avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_7_10q", "[date_dim(d_date), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), catalog_returns(cr_order_number), item(i_item_id), date_dim(d_date_sk), date_dim(d_month_seq)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes that include multiple columns from the same table when single-column indexes on frequently filtered columns can suffice. Prioritize single-column indexes on columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_7_10q", "[date_dim(d_date), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), catalog_returns(cr_order_number), item(i_item_id), date_dim(d_date_sk), date_dim(d_month_seq)]", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually and frequently used in join conditions or filters. Instead, prioritize single-column indexes for columns involved in frequent joins or filters across multiple queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables. Consider the workload's most common query patterns and ensure indexes support them efficiently.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filters on multiple columns.\"}"], ["train_workload_random_7_10q", " [store(s_store_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or columns that are frequently used in range queries, as they may lead to performance regressions. Instead, focus on single-column indexes for such columns, especially when they are used in join conditions or filters.\"}"], ["train_workload_random_7_10q", "[date_dim(d_date), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), catalog_returns(cr_order_number), item(i_item_id), date_dim(d_date_sk), date_dim(d_month_seq)]", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure indexes on columns used in WHERE clauses and JOIN conditions, especially for tables with high row counts. Prioritize indexes on date columns used in range queries and columns frequently involved in JOINs across multiple queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes or composite indexes that match the query patterns in the workload, especially for columns used in filtering and joining operations.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in WHERE clauses or JOIN conditions. Instead, prioritize single-column indexes for such columns to optimize query performance.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Ensure that composite indexes are used for join conditions involving multiple columns, especially when the workload involves complex joins and aggregations. Avoid replacing composite indexes with single-column indexes if the workload heavily relies on multi-column join conditions.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filters on multiple columns.\"}"], ["train_workload_random_7_10q", " [date_dim(d_date), customer_address(ca_gmt_offset), item(i_color)].", " [promotion(p_promo_sk), web_sales(ws_item_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), date_dim(d_date_sk), customer(c_customer_sk), store_sales(ss_item_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are used in join conditions or filters in the workload. Instead, focus on indexing columns that are frequently used in WHERE clauses or GROUP BY operations but lack existing indexes.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number, sr_returned_date_sk), catalog_sales(cs_item_sk, cs_order_number, cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number, ws_sold_date_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for columns that are consistently used across multiple queries, especially those involved in filtering or joining operations.\"}"], ["train_workload_random_7_10q", " [date_dim(d_date_sk, d_date), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number), item(i_item_id)]", " [date_dim(d_date, d_moy), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_item_sk, ss_sold_date_sk)].", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained or added, especially when they are frequently used in the workload. Avoid replacing or removing indexes on primary key or foreign key columns that are used in join conditions, as this can lead to performance regressions.\"}"], ["train_workload_random_7_10q", " [Promotion(p_promo_sk), Item(i_item_sk, i_color), Date_dim(d_date, d_date_sk), Customer_address(ca_gmt_offset), Customer(c_customer_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that indexes cover join keys and frequently filtered columns across all tables involved in the workload. Avoid omitting indexes on critical join keys such as ticket numbers and order numbers, which are present in the improvement index but missing in the regression index.\"}"], ["train_workload_random_7_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_item_sk, ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), date_dim(d_date), customer_address(ca_gmt_offset), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filters on multiple columns.\"}"]], "train_workload_random_9_3q": [["train_workload_random_9_3q", " [customer_demographics(cd_demo_sk), customer_address(ca_address_sk)].", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid adding indexes on columns that are already part of a join condition with high cardinality tables, as it may lead to regression by increasing the overhead of maintaining the index without significant query performance improvement.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Avoid removing indexes that are used in multiple queries, especially those involving large tables or frequently joined columns. Consider composite indexes for columns that are often queried together.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Prioritize composite indexes on columns frequently used together in WHERE clauses, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are frequently used in isolation. Ensure indexes cover join conditions and filter criteria to optimize query performance.\"}"], ["train_workload_random_9_3q", "[date_dim(d_date_sk, d_year), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), customer_demographics(cd_demo_sk)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes that include both high cardinality and low cardinality columns together, as it may lead to regression in query performance. Instead, focus on creating single-column indexes on high cardinality columns or composite indexes on columns that are frequently queried together and have similar cardinality.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of composite indexes unless they are frequently used independently in queries. Prioritize single-column indexes for columns that are frequently used in WHERE clauses or JOIN conditions, especially if they are used independently across multiple queries.\"}"], ["train_workload_random_9_3q", " [customer_demographics(cd_marital_status, cd_education_status), item(i_color)].", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple queries, as they may lead to unnecessary overhead and regression in performance. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, such as those used in WHERE clauses with specific values or ranges.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Prioritize composite indexes that include columns used in WHERE clauses and JOIN conditions, especially for large tables. Avoid single-column indexes when multiple columns are frequently queried together.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins and filters are maintained, especially for large tables. Avoid removing composite indexes that include frequently filtered columns, such as price or date, which are critical for query performance.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes with more than two columns unless necessary, especially when the columns are frequently used individually in queries. Prioritize single-column indexes or two-column composite indexes that match the query predicates closely.\"}"], ["train_workload_random_9_3q", " [customer_demographics(cd_marital_status, cd_education_status), item(i_color)].", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless there is a clear benefit in query performance. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that indexes are not redundant or overly broad, which can lead to regression in performance.\"}"], ["train_workload_random_9_3q", "[date_dim(d_date_sk, d_year), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), customer_demographics(cd_demo_sk)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure indexes on date columns used in WHERE clauses, especially for tables with large row counts, to prevent regressions in query performance.\"}"], ["train_workload_random_9_3q", "[date_dim(d_date_sk, d_year), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), customer_demographics(cd_demo_sk)]", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for large tables. Avoid indexes that only cover non-join columns or columns with high cardinality unless they are frequently used in filter conditions.\"}"], ["train_workload_random_9_3q", "[date_dim(d_date_sk, d_year), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), customer_demographics(cd_demo_sk)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions, especially for large tables. Avoid indexes on columns with low cardinality or those not directly involved in filtering or joining operations.\"}"], ["train_workload_random_9_3q", " [customer_demographics(cd_demo_sk), customer_address(ca_address_sk)].", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating multi-column indexes that include columns not used in WHERE clauses or JOIN conditions, especially when they are not part of the filtering criteria. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and have high selectivity.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on multiple columns that are not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used in filtering or joining operations across multiple queries.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and filtering criteria across multiple queries, especially for large tables. Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions to prevent regression.\"}"], ["train_workload_random_9_3q", " [customer_demographics(cd_demo_sk), customer_address(ca_address_sk)].", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOIN conditions and WHERE clauses with high cardinality, especially in large tables.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Avoid single-column indexes on columns with high cardinality or frequently used in join conditions. Prefer composite indexes that cover multiple columns involved in filtering and joining, especially for large tables. Ensure indexes align with query patterns, such as filtering, joining, and aggregation, to prevent regressions.\"}"], ["train_workload_random_9_3q", "[date_dim(d_date_sk, d_year), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), customer_demographics(cd_demo_sk)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria. Prioritize indexes on columns frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Ensure indexes are created on primary key columns and foreign key columns involved in joins.\"}"], ["train_workload_random_9_3q", " [customer_demographics(cd_marital_status, cd_education_status), item(i_color)].", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables when they are used in join conditions across multiple tables. Focus on indexing columns that are frequently filtered or aggregated in the workload, and ensure that indexes are not redundant or overly broad, which can lead to performance regressions.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Avoid single-column indexes when composite indexes can better serve the query patterns.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Prioritize composite indexes that include multiple columns used together in queries, especially for large tables. Avoid single-column indexes if the column is part of a composite key in the workload.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions, especially for large tables. Prioritize composite indexes for columns frequently queried together, and avoid single-column indexes on columns with high cardinality unless they are used in isolation.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially if they are used across multiple queries. Consider the selectivity and cardinality of columns when creating composite indexes.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in query predicates. Focus on single-column indexes for columns that are frequently used in WHERE clauses or JOIN conditions, especially for large tables.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Prioritize composite indexes over single-column indexes when the workload involves complex queries with multiple joins and filters.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that all join keys and frequently filtered columns in the workload are indexed. Avoid removing composite indexes that cover multiple columns used together in queries, especially when they include both join and filter conditions.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are involved in filtering, joining, or sorting operations, especially those with high cardinality or those that are part of composite keys in the workload.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in conjunction with other columns in join conditions. Instead, focus on indexing columns that are used in WHERE clauses with high cardinality and columns that are frequently used in GROUP BY or ORDER BY clauses. Additionally, consider composite indexes for columns that are often queried together.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index is necessary for specific query patterns. Prioritize single-column indexes for frequently filtered or joined columns, especially when they are used across multiple queries.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering predicates are maintained, especially for large tables. Avoid removing indexes on columns that are frequently used in WHERE clauses or JOIN conditions, such as 'i_item_sk', 'ca_address_sk', and 'cd_demo_sk', as these are critical for query performance.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Ensure composite indexes cover all columns used in WHERE clauses and JOIN conditions, especially for large tables. Avoid single-column indexes when multiple columns are frequently queried together.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are involved in filtering, joining, or sorting operations, especially those with high cardinality or those that are part of composite keys in the workload.\"}"], ["train_workload_random_9_3q", "[date_dim(d_date_sk, d_year), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), customer_demographics(cd_demo_sk)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes that include both high cardinality columns and low cardinality columns, especially when the low cardinality columns are used in equality predicates. Instead, create separate indexes for high cardinality columns and ensure that low cardinality columns are indexed individually if they are frequently used in WHERE clauses.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating multi-column indexes that include columns with high cardinality and low selectivity, such as 'i_color' in 'item(i_item_id, i_item_sk, i_color, i_current_price)', as they can lead to regression by increasing index size and reducing performance. Instead, focus on single-column indexes or combinations of columns that are frequently used in WHERE clauses and have high selectivity.\"}"], ["train_workload_random_9_3q", " [customer_demographics(cd_demo_sk), customer_address(ca_address_sk)].", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in joins across multiple tables, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses with selective conditions or are part of GROUP BY or ORDER BY operations to improve query performance.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Avoid removing indexes that are used in multiple queries, especially those involving large tables or frequently joined columns. Consider composite indexes for columns that are often queried together, such as (i_item_sk, i_current_price) in the improvement index, which is missing in the regression index.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are involved in filtering, joining, or sorting operations, especially those with high cardinality or those that are part of composite keys in the workload.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in query predicates. Focus on single-column indexes for high cardinality columns and composite indexes for columns that are frequently queried together, especially in join conditions.\"}"], ["train_workload_random_9_3q", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_item_sk, wr_order_number)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'd_year' in 'date_dim' and 'i_color' in 'item', as they may lead to regression by increasing index maintenance overhead without significant query performance improvement.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filters on multiple columns.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that all join keys and frequently filtered columns in the workload are indexed. Avoid removing composite indexes that cover multiple columns used together in queries, especially when they include both join and filter conditions.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are prioritized, especially for large tables. Avoid removing indexes on columns that are frequently used in WHERE clauses or JOIN conditions, such as 'item_sk' and 'date_sk', as these are critical for query performance.\"}"], ["train_workload_random_9_3q", " [customer_demographics(cd_demo_sk), customer_address(ca_address_sk)].", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the columns are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, as these can significantly improve query performance by reducing the search space.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless there is a specific query pattern that benefits from the composite index. Prioritize single-column indexes on frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Prioritize composite indexes over single-column indexes when the workload involves complex joins and filters on multiple columns from the same table.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially those involving large tables. Maintain composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes solely on columns with low cardinality or those that are not frequently used in WHERE clauses or JOIN conditions. Prioritize composite indexes that align with the query's access patterns, especially for large tables.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on multiple columns with high cardinality unless necessary. Focus on single-column indexes for frequently queried columns and columns involved in joins.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating multi-column indexes that include columns with high cardinality and low selectivity, such as 'i_color' in 'item(i_item_id, i_item_sk, i_color, i_current_price)', as they can lead to regression by increasing index size and reducing performance. Instead, focus on single-column indexes or combinations with high selectivity and frequent use in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in the workload, especially when multiple columns are involved in the WHERE clause or JOIN conditions. Avoid using single-column indexes when the workload involves complex queries with multiple conditions, as composite indexes can significantly improve query performance by reducing the number of index lookups.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially those involving large tables. Maintain composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for high cardinality columns and those involved in frequent joins. Prioritize composite indexes that align with query patterns, such as those combining foreign keys and filter columns, to prevent regression.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating multi-column indexes that include columns with high cardinality and low selectivity, such as 'i_color' in 'item(i_item_id, i_item_sk, i_color, i_current_price)', as they can lead to performance regressions. Instead, focus on single-column indexes or combinations of columns that are frequently used in WHERE clauses and have high selectivity.\"}"], ["train_workload_random_9_3q", " [customer_demographics(cd_demo_sk), customer_address(ca_address_sk)].", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating multi-column indexes that include columns not used in WHERE clauses or JOIN conditions, especially when they are not part of the primary filtering criteria. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and have high selectivity.\"}"], ["train_workload_random_9_3q", " [customer_demographics(cd_demo_sk), customer_address(ca_address_sk)].", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid adding indexes on columns that are already part of a join condition with high cardinality tables unless they are frequently filtered or aggregated in the workload. Prioritize indexing columns that are used in WHERE clauses with selective filters or are part of GROUP BY and ORDER BY clauses.\"}"], ["train_workload_random_9_3q", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_item_sk, wr_order_number)]", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'i_color' in the 'item' table, unless they are frequently used in WHERE clauses with equality conditions. Instead, focus on indexing columns that are used in JOIN conditions and have high selectivity, such as 'i_item_id' and 'i_item_sk' in the 'item' table, which are more likely to improve query performance.\"}"], ["train_workload_random_9_3q", " [Item(i_item_id), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Store(s_store_sk), Promotion(p_promo_sk)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and have high cardinality to improve query performance.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in query predicates. Focus on single-column indexes for high cardinality columns and composite indexes for columns that are frequently queried together, especially in join conditions.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially if they are used across multiple queries. Consider the selectivity and cardinality of columns when designing indexes.\"}"], ["train_workload_random_9_3q", " [customer_demographics(cd_marital_status, cd_education_status), item(i_color)].", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in joins across multiple queries, as they may lead to unnecessary overhead and regression in performance. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, such as those used in WHERE clauses with specific values or ranges.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize composite indexes that include columns used in WHERE clauses and JOIN conditions, especially for large tables. Avoid regression by maintaining indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_9_3q", "[date_dim(d_date_sk, d_year), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), customer_demographics(cd_demo_sk)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Ensure that indexes cover the join keys and frequently filtered columns. Avoid replacing indexes on join keys with those on less frequently filtered columns, especially when the join keys are used in multiple queries.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on multiple columns with low cardinality or non-filtering attributes, especially when they are combined with high cardinality columns. Instead, focus on single-column indexes for high cardinality columns or combinations that directly match query predicates and join conditions.\"}"], ["train_workload_random_9_3q", " [customer_demographics(cd_marital_status, cd_education_status), item(i_color)].", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as they may lead to redundant indexing and increased maintenance overhead. Focus on indexing columns that are used in filtering conditions and have high cardinality to improve query performance.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and filtering predicates across multiple queries, especially when they are used in subqueries or common table expressions. Prioritize composite indexes on columns frequently used together in join conditions.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Avoid omitting indexes on frequently joined or filtered columns, especially those involving large tables or complex queries. Prioritize composite indexes that match the query patterns, such as those involving multiple columns in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_9_3q", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_item_sk, wr_order_number)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOINs and WHERE clauses with high cardinality, especially if they are involved in multiple queries across the workload.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes with more than two columns unless necessary. Prioritize single-column indexes or two-column composite indexes that directly match the query's WHERE clause conditions or JOIN conditions. Ensure indexes are aligned with the most frequently queried columns and avoid redundant columns in composite indexes.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes with more than two columns unless necessary, as they may lead to regression by increasing index maintenance overhead and reducing query performance. Focus on single or two-column indexes that align closely with query predicates and join conditions.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together and filtered on, especially when involving large tables. Avoid using single-column indexes on columns that are part of frequent multi-column joins or filters, as this can lead to regressions in query performance.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multi-column conditions are present in queries.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover filter conditions without considering join keys, especially for large tables. Prioritize composite indexes that include both join and filter columns used in the workload.\"}"], ["train_workload_random_9_3q", " [Item(i_item_id), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Store(s_store_sk), Promotion(p_promo_sk)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other frequently queried columns, as this can lead to redundancy and potential regression in performance. Focus on creating indexes that cover the most critical columns used in WHERE clauses and JOIN conditions, especially those with high cardinality and frequent use across multiple queries.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes for columns that are frequently filtered or joined, especially if they are used across multiple queries. Ensure that composite indexes are only created for columns that are consistently used together in multiple queries to avoid unnecessary complexity and potential performance regressions.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Prioritize indexes that cover both join and filter conditions to optimize query performance.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize composite indexes that include columns used in WHERE clauses and JOIN conditions, especially for large tables. Avoid regression by maintaining indexes on columns frequently used together in queries, such as date and item identifiers, and ensure indexes are not removed from columns that are part of multiple query conditions.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins and filters are maintained, especially for large tables. Avoid removing composite indexes that include frequently filtered columns, such as 'i_item_sk' and 'i_current_price', which are critical for performance in queries with multiple joins and conditions.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns not directly involved in join conditions or filtering criteria. Focus on single-column indexes for primary keys and foreign keys used in joins, and columns frequently used in WHERE clauses for filtering.\"}"], ["train_workload_random_9_3q", " [customer_demographics(cd_marital_status, cd_education_status), item(i_color)].", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently joined, as they may not provide additional performance benefits and can lead to regression by increasing maintenance overhead. Focus on indexing columns that are used in WHERE clauses with high selectivity and are not already indexed by primary or foreign keys.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together and filtered, especially when involving large tables. Avoid single-column indexes on high cardinality columns unless they are frequently used in isolation.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [store_sales(ss_sold_date_sk), date_dim(d_date), item(i_item_id, i_color, i_current_price), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that all join and filter conditions in the workload are covered by indexes. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions that are missing in the regression index selection, such as 'store_sales(ss_item_sk)', 'catalog_sales(cs_item_sk)', 'web_sales(ws_item_sk)', and 'store_returns(sr_item_sk)'. Additionally, consider composite indexes for columns frequently used together in queries, like 'item(i_item_sk, i_current_price)'.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [Date_dim(d_date), Customer_demographics(cd_marital_status, cd_education_status), Item(i_item_id), Store_returns(sr_item_sk), Promotion(p_promo_sk), Store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize composite indexes that cover multiple columns used together in queries, especially those involved in JOINs and WHERE conditions. Ensure indexes are created on columns with high cardinality and frequent usage in filtering or joining operations.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially if they are used in multiple queries across the workload.\"}"], ["train_workload_random_9_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date, d_year), store_sales(ss_sold_date_sk), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id, i_item_sk, i_color, i_current_price), customer_address(ca_address_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating composite indexes with more than two columns unless necessary. Prioritize single-column indexes on frequently filtered columns and two-column composite indexes on columns that are often joined together or filtered together in queries.\"}"]], "train_workload_random_13_7q": [["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables with similar names or purposes, especially when they are frequently used in joins across multiple queries. Prioritize indexing columns that are used in WHERE clauses and GROUP BY operations, and ensure that indexes are not redundant across tables.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure that indexes cover all join conditions and filter predicates in the workload queries. Specifically, prioritize composite indexes that include columns used in joins and filters across multiple tables, such as date_dim(d_date_sk) and store_sales(ss_sold_date_sk, ss_item_sk).\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables. Avoid redundant indexes on columns already covered by existing indexes, and prioritize composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year)].", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the workload primarily benefits from single-column indexes. Prioritize single-column indexes on frequently filtered or joined columns, and ensure composite indexes are necessary for multi-column filtering or ordering.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are used in queries with IS NULL conditions or are not part of any join or filter conditions that significantly reduce the result set size.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid adding indexes on columns with high cardinality and low selectivity, such as 'cs_bill_hdemo_sk' and 'ws_bill_addr_sk', unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on columns that are frequently filtered or joined, like 'ss_item_sk' and 'ss_sold_date_sk', which are part of composite indexes in the improvement selection.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used across multiple queries, such as 'date_dim(d_year)' and 'item(i_item_sk)'.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions, as they may lead to regression by increasing index size and reducing selectivity. Instead, focus on single-column indexes for frequently filtered or joined columns.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in joins or filters if they are already covered by existing indexes, as this can lead to redundant indexes and potential performance regressions. Focus on creating composite indexes that cover multiple columns used together in queries, rather than individual indexes on each column.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries. Avoid indexes that only partially cover query conditions, especially when they miss critical join or filter columns.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes that only cover filter conditions without considering join conditions, especially when the join conditions involve large tables.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables with similar names or purposes, especially when they are frequently used in joins across multiple tables. Prioritize indexing columns that are used in WHERE clauses and GROUP BY operations, and ensure that indexes are not redundant across tables.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Prioritize indexing columns involved in multiple queries and those with high cardinality, especially when they are used in WHERE clauses or JOIN conditions. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes that do not include the join keys or filter conditions used in the workload queries. Ensure indexes cover both join keys and filter conditions to optimize query performance.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating separate indexes on columns that are already part of a composite index, especially when the composite index covers the query's filtering and joining conditions. This can lead to redundant indexes and potential performance regressions.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially if they are not frequently used in WHERE clauses or JOIN conditions in the workload. Instead, focus on indexing columns that are frequently filtered or joined on, and have lower cardinality, as seen in the improvement index selection.\"}"], ["train_workload_random_13_7q", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), item(i_category)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless there is a clear performance benefit. Ensure that indexes on foreign key columns are consistent across related tables to prevent regression.\"}"], ["train_workload_random_13_7q", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), item(i_category)]", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear benefit in query performance. Check for redundant columns in composite indexes and ensure they align with the query patterns in the workload.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining operations across multiple queries.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating separate indexes on columns that are frequently used together in join conditions or filters. Instead, create composite indexes that cover multiple columns used in the same query, especially when they are part of the same table or frequently joined tables.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already covered by single-column indexes, especially when the workload involves multiple tables with join conditions on these columns. Instead, prioritize single-column indexes on frequently joined columns across tables.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year)].", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the individual index is frequently used in the workload. This can lead to redundant indexing and potential performance regressions.\"}"], ["train_workload_random_13_7q", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), item(i_category)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions across multiple tables, as these are likely to be covered by existing indexes or can lead to redundant indexing. Focus on indexing columns that are used in WHERE clauses or as part of GROUP BY and ORDER BY operations to improve query performance.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as 'customer.c_customer_sk', 'customer_address.ca_address_sk', and 'item.i_item_sk'. Avoid redundant indexes that do not cover these conditions, as seen in the regression index selection.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables. Avoid creating indexes on columns with low cardinality or those not involved in filtering or joining operations.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes, especially when the existing indexes are composite and cover multiple columns used together in queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and ensure they are not redundant with existing indexes.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions in the workload. Instead, focus on indexing columns that are frequently filtered or joined on, and have a higher likelihood of reducing the search space significantly.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid adding indexes on columns with high cardinality and low selectivity, such as 'cs_bill_hdemo_sk' in 'catalog_sales', unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexes on columns that are frequently filtered or joined, like 'cs_sold_date_sk' and 'i_item_sk'.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Instead, focus on single-column indexes for columns that are consistently used in WHERE clauses or JOIN conditions, especially for large tables.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes with multiple columns that are not frequently used together in WHERE clauses or JOIN conditions. Focus on indexing columns that are consistently used in filtering or joining across multiple queries in the workload.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Focus on indexing columns that are used in filtering conditions and are not already indexed, to prevent redundancy and potential performance regression.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are maintained, especially when they are frequently used in the workload. Avoid replacing composite indexes that cover multiple columns with single-column indexes unless the workload specifically benefits from such a change.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already covered by single-column indexes, especially when the single-column indexes are frequently used in the workload. Prioritize single-column indexes for columns that are used in join conditions and filters across multiple queries.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables with similar join conditions, especially when the workload involves frequent joins across multiple tables. Focus on indexing unique or less frequently indexed columns to prevent redundancy and potential performance regression.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year)].", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Avoid creating indexes on columns that are already frequently used in join conditions across multiple queries, as they may lead to regression by increasing the overhead of maintaining the index without significant performance gain. Instead, focus on indexing columns that are used in filtering conditions or aggregations, such as date_dim(d_year) in this case.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables. Avoid redundant indexes on columns already covered by existing indexes, and prioritize composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating separate indexes on columns that are frequently used together in join conditions or filters. Instead, create composite indexes that cover multiple columns used together in queries to improve performance and reduce redundancy.\"}"], ["train_workload_random_13_7q", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), item(i_category)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially if they are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on columns that are frequently filtered or joined, and have moderate to low cardinality, as they are more likely to benefit from indexing.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Prioritize single-column indexes on columns that are consistently used in filtering conditions across the workload.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially in large tables.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating separate indexes on columns that are frequently used together in join conditions or filters. Instead, create composite indexes that cover multiple columns used together in queries to improve performance and reduce redundancy.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure that indexes cover join conditions and filtering columns across multiple tables in complex queries. Prioritize composite indexes that include both join keys and frequently filtered columns to prevent regression.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are prioritized over single column indexes on frequently filtered columns. This helps in optimizing join operations which are common in complex queries.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes, especially when the existing indexes are composite and cover multiple columns used together in queries. Focus on creating indexes that optimize the most frequent and costly query patterns, and ensure that indexes are not overlapping unnecessarily, which can lead to regression in performance.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of multiple join conditions across different queries, such as 'customer_address.ca_address_sk' and 'date_dim.d_date_sk'. Additionally, consider the use of composite indexes when multiple columns are frequently queried together, such as 'date_dim(d_year, d_date)'.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes, especially if they are frequently used in joins or filters, as this can lead to redundancy and potential performance regressions. Focus on unique or composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on columns that are frequently filtered or joined, and have lower cardinality for better performance.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid adding indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions in the workload. Focus on indexing columns that are frequently filtered or joined on, and ensure that composite indexes are aligned with the query patterns to avoid unnecessary overhead.\"}"], ["train_workload_random_13_7q", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), item(i_category)]", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions across multiple queries. Focus on single-column indexes for frequently filtered or joined columns, especially when they are used in multiple queries, such as 'date_dim(d_year)' and 'item(i_item_sk)'.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions, as they may lead to regression by increasing index size and reducing selectivity. Instead, focus on single-column indexes for frequently filtered or joined columns.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Focus on indexing columns that are used in filtering conditions and are not already indexed in the improvement selection.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes that only cover filter conditions without considering join conditions, especially when the join conditions involve large tables. Prioritize composite indexes that include both join and filter columns to optimize query performance.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are maintained, especially when they are frequently used in the workload. Avoid replacing composite indexes that cover multiple columns with single-column indexes unless the single-column index is more frequently used or more beneficial for query performance.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid redundant indexes on columns that are already covered by composite indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially for join conditions and filters. Ensure indexes align with the most frequent query patterns and avoid indexing columns individually if they are part of a composite index that covers the same query needs.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure indexes cover join conditions and filtering columns across multiple tables in complex queries. Prioritize composite indexes that include both join keys and frequently filtered columns to prevent regression.\"}"], ["train_workload_random_13_7q", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), item(i_category)]", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Avoid adding indexes on columns that are already part of a foreign key relationship and are frequently joined, as this can lead to redundant indexing and potential performance regression. Instead, focus on indexing columns that are used in filtering conditions or aggregations without existing indexes.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating multiple indexes on the same table with overlapping columns unless necessary. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and ensure they are not redundant with existing indexes.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'cs_bill_hdemo_sk', unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on columns that are frequently filtered or joined, like 'd_year', 'i_category', and 'ca_address_sk', which are part of the improvement index.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually unless the composite index is frequently used in the workload. Ensure that indexes on columns used in WHERE clauses and JOIN conditions are prioritized over those used in GROUP BY or ORDER BY clauses.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year)].", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear benefit in query performance. Check for redundant or overlapping indexes that may increase maintenance overhead without significant performance gains.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not directly involved in filtering or joining conditions. Focus on single-column indexes for columns frequently used in WHERE clauses or JOIN conditions, especially for large tables.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing the overhead of maintaining the index. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, such as primary keys or unique identifiers.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across multiple queries. Prioritize indexes on columns with high cardinality and those frequently used in filtering conditions. Avoid redundant indexes that do not significantly improve query performance.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already covered by single-column indexes, especially when the single-column index is frequently used in the workload. Prioritize single-column indexes for columns that are used in join conditions or filters across multiple queries.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables with similar names or purposes, especially when they are used in join conditions across multiple tables. Prioritize indexing columns that are frequently used in WHERE clauses and GROUP BY operations, and ensure that indexes are not redundant across tables with similar data structures.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed in other tables, especially when they are used in join conditions across multiple tables. Instead, focus on indexing columns that are frequently used in WHERE clauses or as part of GROUP BY operations to improve query performance.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are consistently applied across all tables involved in the workload. Avoid removing indexes on columns that are frequently used in join conditions, especially when they are part of large tables or are used in multiple queries.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes, especially when the existing indexes are composite and cover multiple columns used together in queries. Prioritize indexes on columns that are frequently used in WHERE clauses and JOIN conditions, and ensure they are not redundant with existing indexes.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions in the workload.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid adding indexes on columns with high cardinality and low selectivity unless they are frequently used in WHERE clauses or JOIN conditions. Remove redundant indexes that do not significantly improve query performance.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include columns already covered by single-column indexes unless the composite index significantly improves query performance. Check for redundant indexes that may overlap with existing ones, especially when they include primary key or unique columns.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as these columns are likely already optimized by the database's internal mechanisms. Instead, focus on indexing columns that are used in WHERE clauses or as part of filtering conditions, especially if they are not part of primary or foreign key relationships.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are included in the regression index selection, especially when they are part of the improvement index. This includes maintaining indexes on columns like 'ss_item_sk', 'ss_sold_date_sk', and 'c_customer_sk' in the 'store_sales' and 'customer' tables, as they are frequently used in join conditions in the workload.\"}"], ["train_workload_random_13_7q", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), item(i_category)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, as it may lead to redundancy and potential performance regression.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes, especially when the existing indexes are composite and cover multiple columns used together in queries. Focus on creating indexes that optimize the most frequent and costly query patterns, and ensure that indexes are not duplicated across different tables unless necessary for specific query optimizations.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year)].", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition with a high cardinality table, especially when the workload involves aggregations or group by operations. Instead, focus on indexing columns that are frequently filtered or used in group by clauses to improve query performance.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year)].", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently filtered or joined in the workload. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in range queries, as they may lead to performance regressions. Instead, focus on indexing columns that are frequently used in equality conditions and have high cardinality, such as primary keys or foreign keys.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially if they are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on columns that are frequently filtered or joined, and have lower cardinality, as they are more likely to improve query performance.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Prioritize single-column indexes on columns that are consistently used in filtering conditions across the workload.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes with overlapping columns across multiple tables when the workload involves frequent joins on those columns. Instead, focus on creating composite indexes that cover the most frequently queried columns within individual tables to optimize query performance.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as they may lead to redundant indexing and increased maintenance overhead. Focus on indexing columns that are used in filtering conditions and aggregations, especially those with high cardinality.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure that indexes cover join conditions and filtering columns across multiple tables in complex queries. Prioritize composite indexes that include both join keys and frequently filtered columns to prevent regression.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year)].", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the individual index is frequently used in the workload. Prioritize single-column indexes for columns that are consistently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_13_7q", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), item(i_category)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in joins, as these are likely to be covered by existing indexes. Instead, focus on indexing columns that are used in WHERE clauses or as part of GROUP BY or ORDER BY operations, especially if they are not part of any existing index.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure indexes cover join conditions and filter predicates across multiple tables, especially for high cardinality columns and those frequently used in WHERE clauses. Prioritize composite indexes that align with query patterns involving joins and filters, such as date_dim(d_year, d_date_sk) and item(i_category, i_item_sk). Avoid single-column indexes that do not support the workload's join and filter requirements.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year)].", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently joined, as they may lead to redundant indexing and potential performance regressions. Focus on indexing columns that are used in WHERE clauses and are not part of existing indexes.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used in conjunction with other columns in the workload. Prioritize single-column indexes on foreign key columns and columns with high cardinality that are frequently filtered or joined in queries.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions in the workload. Instead, focus on columns that are frequently used in filtering conditions and have lower cardinality, as they are more likely to improve query performance.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year)].", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear performance benefit for specific query patterns. Ensure that indexes on frequently joined columns are consistent across tables to prevent regression.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes with overlapping columns that are already covered by other indexes. Prioritize indexes that cover the most frequently queried columns and ensure they are not redundant with existing indexes. Consider the workload and focus on columns that are used in WHERE clauses, JOIN conditions, and GROUP BY clauses.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year)].", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in joins, as these columns are likely to be already optimized by the database engine. Focus on indexing columns that are used in WHERE clauses or GROUP BY operations to improve query performance.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of multi-column indexes if they are used in conjunction with other columns in the workload.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Avoid creating indexes that do not include all columns involved in join conditions or filtering criteria. Ensure that indexes cover the columns used in WHERE clauses and JOIN conditions to prevent regressions. For example, if a query frequently joins on 'date_dim.d_date_sk' and filters on 'date_dim.d_year', ensure the index includes both 'd_date_sk' and 'd_year'.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently used in WHERE clauses or JOIN conditions. Focus on indexing columns that are frequently filtered or joined, and ensure that indexes are not duplicated across multiple tables unless necessary for specific query patterns.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables. Avoid creating indexes on columns with low cardinality or columns not involved in filtering or joining operations.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating multiple indexes on the same table with overlapping columns unless necessary. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and ensure they are not redundant with existing indexes.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions in the workload. Instead, focus on indexing columns that are frequently filtered or joined on, such as foreign keys or columns with lower cardinality that are used in WHERE clauses.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or columns that are frequently used in WHERE clauses individually, as they may lead to regression by increasing index maintenance overhead and reducing query performance.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid adding redundant columns to indexes that are already covered by other indexes or are not frequently used in WHERE clauses or JOIN conditions. Focus on columns that are used in filtering and joining operations, and ensure that indexes are not overly broad, which can lead to performance degradation.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating separate indexes on columns that are frequently used together in join conditions or filters. Instead, create composite indexes that cover multiple columns used together in queries to improve performance and reduce redundancy.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes if composite indexes can provide better coverage for query patterns.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure that the regression index selection includes composite indexes that cover both filtering and joining columns used together in queries, especially when multiple tables are involved in joins. Avoid creating separate indexes for individual columns that are frequently used together in WHERE and JOIN clauses.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables with similar names or purposes, especially when they are frequently used in joins across multiple tables. Prioritize indexing columns that are used in WHERE clauses and GROUP BY operations, and ensure that indexes are not redundant across tables.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure indexes cover join conditions and filtering columns across multiple tables in complex queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially when they are part of large tables. Avoid regression by maintaining indexes on columns that are used in multiple queries for filtering and joining, such as date_dim(d_date_sk) and store_sales(ss_item_sk).\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating separate indexes for columns that are frequently used together in join conditions, as this can lead to regression by increasing the number of index lookups. Instead, create composite indexes that include all relevant columns used in join and filter conditions.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating separate indexes on columns that are frequently used together in join conditions or filters. Instead, create composite indexes that cover multiple columns used together in queries to improve performance and reduce redundancy.\"}"], ["train_workload_random_13_7q", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), item(i_category)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially if they are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on columns that are frequently filtered or joined on, and have moderate to low cardinality, as these are more likely to benefit from indexing.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid adding indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions. Focus on indexing columns that are frequently filtered or joined on, and ensure that composite indexes are aligned with query patterns to prevent regression.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining operations, especially in high-frequency tables.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes with too many columns or on columns with high cardinality unless necessary. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with equality conditions. Remove redundant indexes that overlap significantly with others.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating separate indexes on columns that are frequently used together in join conditions or filters. Instead, create composite indexes that cover multiple columns used together in queries to improve performance and reduce redundancy.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure indexes cover both filtering and joining columns. Avoid indexes that only cover filtering columns without considering join columns, especially in queries with multiple joins.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are maintained, especially when they are frequently used in the workload. Avoid replacing composite indexes that cover multiple columns with single-column indexes unless the single-column index is more frequently used and critical for query performance.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables with similar join conditions, especially when the workload involves frequent joins between these tables. Prioritize indexing columns that are used in WHERE clauses and GROUP BY operations, and ensure that indexes are not redundant across tables.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Avoid creating indexes on columns that are already frequently used in join conditions across multiple queries, especially if they are part of large tables. Instead, focus on indexing columns that are used in filtering conditions or are part of smaller tables to improve query performance.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Ensure indexes on foreign key columns and columns frequently used in WHERE clauses, especially for large tables. Avoid indexing columns with low cardinality or columns that are not used in filtering conditions.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes, especially if they are frequently used in joins or filters, as this can lead to redundant indexing and potential performance regressions. Focus on unique or composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered or joined on, and have a higher impact on query performance.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially if they filter large datasets.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used across multiple queries, especially in large tables.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are frequently used in join conditions across multiple queries, as this can lead to redundant indexing and potential performance regressions. Focus on indexing columns that are used in WHERE clauses and are not already indexed, especially those that are frequently filtered or sorted on.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. If an index is removed or replaced, verify that the new index still supports the same query patterns, especially for high cardinality columns and frequently joined tables.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already covered by single-column indexes, especially when the single-column index is frequently used in the workload. Prioritize single-column indexes for columns that are used in join conditions or filters across multiple queries.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating multiple single-column indexes on columns that are frequently used together in join conditions or filters. Instead, create composite indexes that cover these columns to improve query performance and prevent regression.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are not removed, especially when they are frequently used in the workload queries. This includes maintaining indexes on columns like 'ss_item_sk' and 'ss_sold_date_sk' in 'store_sales' and 'd_date_sk' in 'date_dim' when they are used in joins with large tables.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Ensure indexes on foreign key columns and columns frequently used in WHERE clauses, especially for large tables. Avoid indexes on columns with low cardinality or columns not directly involved in filtering or joining operations.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year)].", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the individual index is sufficient for the query conditions. Prioritize single-column indexes for columns frequently used in WHERE clauses and JOIN conditions, and ensure they align with the workload's filtering and joining patterns.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially if they are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered or joined on, and have a moderate to low cardinality, as seen in the improvement index selection.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid adding indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions. Focus on indexing columns that are frequently filtered or joined on, and ensure that composite indexes are aligned with the query patterns to avoid unnecessary overhead.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year)].", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the individual index is sufficient for the query conditions. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that the index does not include unnecessary columns that increase maintenance overhead without significant performance benefits.\"}"], ["train_workload_random_13_7q", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), item(i_category)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Focus on single-column indexes for high cardinality columns that are consistently used in filtering or joining operations.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date columns or columns frequently used in range queries, as they may lead to performance regressions. Instead, focus on indexing columns that are frequently used in join conditions and have high selectivity, such as foreign keys or unique identifiers.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize composite indexes that include multiple columns used together in joins or filters, such as (ss_item_sk, ss_sold_date_sk) for store_sales, and ensure coverage for frequently queried columns like i_item_id and i_item_sk in item table.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year)].", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the individual index is frequently used in the workload. This can lead to redundancy and potential performance regression.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed in other tables or are part of foreign key relationships, as this can lead to regression by increasing maintenance overhead without significant query performance improvement.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Avoid creating indexes that only partially cover the query conditions, as this can lead to regressions. Specifically, ensure that indexes are created on columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, such as 'customer.c_customer_sk', 'customer_address.ca_address_sk', 'catalog_sales.cs_sold_date_sk', and 'item.i_item_id'.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year)].", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently joined, as they may lead to redundant indexing and potential performance regressions. Focus on indexing columns that are used in WHERE clauses and are not already indexed by foreign key constraints.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in filtering conditions and join operations, especially those with high cardinality and those that are part of foreign key relationships.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially if they are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on columns that are frequently filtered or joined on, and have lower cardinality or higher selectivity.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless there is a clear benefit in query performance. Ensure that indexes on foreign key columns are consistent across related tables to prevent regression.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining operations.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes with multiple columns that are not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used across multiple queries, especially in large tables.\"}"], ["train_workload_random_13_7q", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), item(i_category)]", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables when they are used in join conditions, especially if the columns are frequently used in WHERE clauses or GROUP BY operations. Prioritize indexing columns that are used in filtering conditions and have high cardinality, and ensure that indexes are not redundant across multiple tables.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are prioritized over single-column indexes on non-foreign key columns. Additionally, consider composite indexes that cover multiple columns involved in filtering and joining conditions to optimize query performance.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across multiple queries. Prioritize indexes on columns with high cardinality and those frequently used in filtering conditions. Avoid redundant indexes that do not significantly improve query performance.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed in other tables or are part of foreign key relationships, as this can lead to regression by increasing maintenance overhead without significant query performance improvement.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition with a high cardinality table, as it may lead to regression by increasing the cost of maintaining the index without significant query performance improvement.\"}"], ["train_workload_random_13_7q", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), item(i_category)]", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Avoid adding indexes on columns that are already part of a foreign key relationship and are frequently joined, as this can lead to redundant indexing and potential performance regression. Instead, focus on indexing columns that are used in filtering conditions or aggregations without existing indexes.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating separate indexes on columns that are frequently used together in join conditions or filters. Instead, create composite indexes that cover multiple columns used in the same query to improve performance and reduce redundancy.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially if they are not frequently used in WHERE clauses or JOIN conditions in the workload. Instead, focus on indexing columns that are frequently filtered or joined on, such as foreign keys or columns with lower cardinality that are used in WHERE clauses.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Focus on single-column indexes for columns that are consistently used in filtering conditions across the workload.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining operations.\"}"], ["train_workload_random_13_7q", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), item(i_category)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating composite indexes with too many columns unless necessary. Focus on single-column indexes for frequently filtered columns and ensure they align with the query predicates. Remove redundant or overly broad composite indexes that do not match the query patterns.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating indexes on columns that are already frequently used in join conditions across multiple queries, as they may lead to redundant indexing and increased maintenance overhead. Instead, focus on indexing columns that are used in filtering conditions and are not already indexed, especially those involved in WHERE clauses with high selectivity.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already covered by single-column indexes, especially when the workload involves frequent joins on these columns. Instead, prioritize single-column indexes for columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already covered by single-column indexes, especially when the single-column index is frequently used in the workload. Prioritize single-column indexes for columns that are used in join conditions or filters across multiple queries.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of existing indexes or primary keys, especially if they are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses and GROUP BY operations, and ensure that indexes are not redundant or overlapping with existing ones.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure indexes cover join conditions and filtering columns across multiple tables in complex queries. Prioritize indexes that include columns used in WHERE clauses and JOIN conditions, especially when they are frequently used together in the workload.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables. Avoid creating indexes on columns with low cardinality or columns not used in filtering or joining operations.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or GROUP BY operations to improve query performance.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on columns that are frequently filtered or joined, such as foreign keys or columns with lower cardinality that are used in WHERE clauses.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially if they are part of large tables.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year)].", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the individual index is sufficient for the query conditions. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that the index does not include unnecessary columns that increase maintenance overhead without significant performance benefits.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes with excessive columns that are not frequently used in WHERE clauses or JOIN conditions. Focus on columns that are consistently used across multiple queries for filtering or joining, and ensure indexes are not overly broad or redundant.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year)].", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently used in WHERE clauses or JOIN conditions. Focus on indexing columns that are used in filtering, joining, and grouping operations to optimize query performance.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes that do not align with the query's filtering and joining conditions. Instead, prioritize single-column indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Ensure indexes cover columns used in equality conditions before considering composite indexes for range conditions.\"}"], ["train_workload_random_13_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date, d_date_sk), Customer(c_customer_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for tables with high row counts. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", " [store_sales(ss_item_sk), item(i_item_sk), date_dim(d_date), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_manager_id), web_sales(ws_item_sk), web_sales(ws_bill_addr_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating multiple single-column indexes on columns that are frequently used together in join conditions or filters. Instead, create composite indexes that cover these columns to improve query performance and prevent regression.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[store_sales(ss_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. If an index is missing for a frequently joined or filtered column, such as 'customer.c_customer_sk' or 'customer_address.ca_address_sk', it should be added to prevent regression.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", " [customer(c_customer_sk), item(i_item_sk), date_dim(d_year), date_dim(d_date), store_sales(ss_item_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently filtered or joined in the workload. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date, d_year), item(i_category), date_dim(d_date_sk), item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_manager_id), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes, especially when the existing indexes are composite and cover multiple columns used in the workload. Prioritize composite indexes that align with the query's filtering and joining conditions to prevent redundancy and regression.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are used in conditions like IS NULL or in joins where the column is not frequently filtered or aggregated. Instead, focus on columns that are frequently used in WHERE clauses with equality conditions or are part of JOIN conditions with high selectivity.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_hdemo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_addr_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear performance benefit. Ensure that indexes are aligned with the most frequently used query patterns and avoid redundant indexes on columns that are not frequently filtered or joined on.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[date_dim(d_date_sk, d_year, d_date, d_month_seq), item(i_item_sk, i_item_id), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality and low selectivity, such as date columns, unless they are frequently used together in query filters. Instead, focus on indexing columns that are frequently used in joins and have high selectivity, such as foreign keys and unique identifiers.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_sk, i_item_id, i_category, i_color), store_sales(ss_item_sk), date_dim(d_date_sk, d_date, d_year, d_month_seq, d_dom), customer_address(ca_address_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_bill_addr_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_sales(cs_bill_hdemo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year), item(i_item_sk)]", "[date_dim(d_year), date_dim(d_date), item(i_item_sk), item(i_item_id), date_dim(d_date_sk), store_sales(ss_item_sk), customer(c_customer_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), date_dim(d_moy), date_dim(d_month_seq), web_sales(ws_item_sk), item(i_color), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), item(i_manager_id), web_sales(ws_bill_addr_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used in joins and filters, as this can lead to redundant indexes and increased maintenance overhead. Focus on indexing columns that are frequently used in WHERE clauses and are not already covered by existing indexes.\"}"], ["train_workload_random_13_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of multi-column indexes used in join conditions, as this can lead to performance regressions.\"}"], ["train_workload_random_13_7q", " [date_dim(d_year, d_date_sk, d_date), item(i_category, i_item_sk), customer_address(ca_address_sk)]", " [store_sales(ss_item_sk, ss_sold_date_sk), item(i_category), date_dim(d_year), customer(c_customer_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes that only partially cover the query's join and filter conditions, as this can lead to regressions. For example, if a query frequently joins on 'ss_item_sk' and filters on 'd_year', ensure that both columns are included in the index, rather than having separate indexes for each.\"}"]], "train_workload_random_16_5q": [["train_workload_random_16_5q", " [web_page(wp_web_page_sk), date_dim(d_date)]", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple tables, as these columns are likely to be optimized by the database engine's existing mechanisms. Instead, focus on indexing columns that are used in filtering conditions or aggregations, especially in smaller tables or those with unique constraints.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions across multiple queries. Focus on single-column indexes for frequently filtered or joined columns.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure indexes on columns used in WHERE clauses and JOIN conditions are single-column indexes unless multi-column indexes are necessary for composite queries. Avoid multi-column indexes that include columns not frequently queried together.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_id), date_dim(d_date)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Avoid relying solely on single-column indexes when composite indexes can better optimize query performance.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_16_5q", " [catalog_sales(cs_sold_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure indexes on date columns used in WHERE clauses for filtering large tables, especially when joining with smaller tables or dimensions. Prioritize indexes on columns frequently used in WHERE conditions and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining operations, as seen in the improvement index selection.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all columns used in WHERE clauses and JOIN conditions, especially for tables with high row counts. Avoid removing indexes on columns frequently used in filtering or joining, such as date keys and item keys.\"}"], ["train_workload_random_16_5q", " [date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", "[item(i_item_id), date_dim(d_date)]", "{rule: \"Ensure that indexes on date columns are on the primary key or foreign key columns used in joins, not just on the date column itself. Additionally, include composite indexes that cover both the primary key and any filtering conditions, such as item_id and item_sk, to optimize query performance.\"}"], ["train_workload_random_16_5q", " [Catalog_sales(cs_sold_date_sk), Web_sales(ws_sold_date_sk), Catalog_returns(cr_returned_date_sk), Web_returns(wr_returned_date_sk), Store_sales(ss_sold_date_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns that are used in subqueries or filters with IN clauses, as they may not significantly improve performance and can lead to regression. Focus on indexing columns that are directly involved in join conditions and date range filters.\"}"], ["train_workload_random_16_5q", " [web_page(wp_web_page_sk), date_dim(d_date)]", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple tables, as these may lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in filtering conditions and are not already indexed by primary or foreign keys.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for columns that are consistently used across multiple queries, such as date_dim.d_date_sk and item.i_item_sk, to improve query performance without unnecessary complexity.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all columns used in WHERE clauses and JOIN conditions, especially for columns with high cardinality or frequently used in multiple queries. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_16_5q", " [date_dim(d_year, d_moy), customer_address(ca_gmt_offset)].", "[item(i_item_id), date_dim(d_date)]", "{rule: \"Avoid creating indexes on columns that are not directly used in WHERE clauses or JOIN conditions in the workload queries. Prioritize indexing columns that are frequently used in filtering conditions, such as date ranges or specific attributes, to improve query performance.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in the workload, especially when multiple columns from the same table are involved in joins or filters. Avoid relying solely on single-column indexes when the workload involves complex queries with multiple joins and filters.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple tables, especially when dealing with large datasets. Prioritize composite indexes that cover multiple columns used together in queries, such as date and item identifiers, to optimize query performance and prevent regression.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating composite indexes that combine columns with high cardinality and columns with low cardinality, especially when the workload involves filtering or joining on the high cardinality columns separately. Instead, prioritize single-column indexes on high cardinality columns that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_16_5q", " [date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Avoid adding redundant columns to indexes that are already covered by other indexes. Ensure indexes cover the most frequently queried columns and join conditions, especially for large tables. Prioritize indexes that support filtering and grouping operations efficiently.\"}"], ["train_workload_random_16_5q", " [web_page(wp_web_page_sk), date_dim(d_date)]", "[item(i_item_id), date_dim(d_date)]", "{rule: \"Avoid creating indexes on columns that are used in subqueries with IN clauses, especially when the subquery is non-correlated and involves a large table. Instead, prioritize indexing columns that are directly involved in join conditions and filtering criteria in the main query.\"}"], ["train_workload_random_16_5q", " [date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in a more efficient way. Prioritize indexing columns that are used in WHERE clauses and GROUP BY operations, and ensure that indexes are not redundant or overlapping with existing indexes.\"}"], ["train_workload_random_16_5q", " [catalog_sales(cs_sold_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure that indexes on date columns used in WHERE clauses for filtering large tables are maintained, as they are critical for performance. Avoid replacing them with indexes on columns that are not used for filtering or joining in the workload.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions across multiple queries. Instead, focus on single-column indexes for frequently filtered or joined columns.\"}"], ["train_workload_random_16_5q", " [catalog_sales(cs_sold_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Avoid multi-column indexes on date_dim when single-column indexes on date_sk are sufficient for filtering. Prioritize indexes on foreign key columns used in joins and group by operations, especially for large tables.\"}"], ["train_workload_random_16_5q", " [catalog_sales(cs_sold_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", "[item(i_item_id), date_dim(d_date)]", "{rule: \"Ensure indexes are created on columns used in WHERE clauses and JOIN conditions, especially for large tables. Avoid removing indexes that optimize filtering and joining operations on frequently queried columns.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Avoid indexing columns with low cardinality or columns that are frequently used in range queries, such as date columns, unless they are part of a composite index that can significantly improve query performance. Prioritize indexing columns that are frequently used in join conditions and have high cardinality.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{\"rule\": \"Ensure that indexes cover both the join keys and the filter conditions in the workload queries. Specifically, include indexes on date columns used in range filters (e.g., date_dim.d_date_sk) and on columns frequently used in joins across multiple tables (e.g., item.i_item_sk, store_sales.ss_item_sk). Avoid omitting critical date and join indexes that are present in the improvement index but missing in the regression index.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining operations, as seen in the improvement index selection.\"}"], ["train_workload_random_16_5q", " [Customer_address(ca_gmt_offset), Date_dim(d_date_sk, d_date), Item(i_item_sk, i_item_id)]", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index unless they are frequently used independently in queries. Prioritize composite indexes that cover multiple columns used together in WHERE clauses and JOIN conditions to optimize query performance.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_id), date_dim(d_date)]", "{rule: \"Ensure indexes cover all columns used in WHERE clauses and JOIN conditions, especially for large tables. Avoid partial indexes that miss critical columns like date_dim.d_date_sk and item.i_item_sk, which are frequently used in filtering and joining operations.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or involved in range queries. Avoid indexing columns with low cardinality or those primarily used in SELECT statements without filtering or joining, as they may not significantly improve query performance.\"}"], ["train_workload_random_16_5q", " [web_page(wp_web_page_sk), date_dim(d_date)]", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple tables, as these may lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in filtering conditions and are not already indexed by primary or foreign keys.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for columns that are consistently used across multiple queries, such as date_dim.d_date_sk and item.i_item_id, to improve query performance without unnecessary complexity.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{\"rule\": \"Ensure that indexes on date columns include both the date key and the date itself if both are used in queries. Avoid removing composite indexes that cover multiple columns used together in WHERE clauses, especially when they are frequently joined or filtered together in the workload.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_id), date_dim(d_date)]", "{\"rule\": \"Ensure that indexes cover all join and filter conditions in the workload. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions, such as date_dim.d_date_sk and item.i_item_sk, to prevent regressions.\"}"], ["train_workload_random_16_5q", " [catalog_sales(cs_sold_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially when they are part of large tables. Instead, prioritize indexing columns that are used in WHERE clauses with specific filters or aggregations, as these are more likely to improve query performance without causing regression.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure that multi-column indexes are preserved when they are beneficial for join operations or filtering on multiple columns, especially when the workload involves complex queries with multiple joins and filters. Avoid replacing multi-column indexes with single-column indexes if the workload benefits from the former.\"}"], ["train_workload_random_16_5q", " [date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{rule: \"Avoid adding redundant columns to indexes when they are already filtered in the query predicates, as this can lead to regression by increasing index size and complexity without improving query performance.\"}"], ["train_workload_random_16_5q", " [date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Avoid adding redundant columns to indexes that are already covered by other indexes or are not frequently used in filtering or joining conditions. Focus on columns that are consistently used across multiple queries for filtering, joining, or aggregation, and ensure they are included in the indexes. Prioritize indexes on columns with high cardinality and those involved in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_id), date_dim(d_date)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries. Avoid partial indexes that do not cover all necessary columns, especially for large tables. Prioritize composite indexes that include both join keys and filter columns to prevent regressions.\"}"], ["train_workload_random_16_5q", " [catalog_sales(cs_sold_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating multiple indexes on the same table for different columns when a single index on a frequently used column can suffice. Prioritize indexing columns that are used in WHERE clauses and JOIN conditions across multiple queries, and avoid redundant indexes on columns that are already covered by existing indexes.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{\"rule\": \"Ensure that indexes on date columns used in WHERE clauses, such as date_dim.d_date_sk, are maintained or added in regression index selection to prevent performance degradation in queries with date range filters.\"}"], ["train_workload_random_16_5q", " [web_page(wp_web_page_sk), date_dim(d_date)]", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns frequently used in WHERE clauses or JOIN conditions, especially when they are used independently across multiple queries.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all columns used in WHERE clauses and JOIN conditions, especially for tables with high row counts. Prioritize single-column indexes for frequently queried columns and multi-column indexes for combined conditions.\"}"], ["train_workload_random_16_5q", " [catalog_sales(cs_sold_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), item(i_item_id), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", "[item(i_item_id), date_dim(d_date)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses, especially for large tables, and avoid removing indexes that support date range queries or join conditions.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in conjunction with other columns in join conditions. Instead, focus on composite indexes that cover multiple columns used together in queries, especially those involved in join conditions and filters.\"}"], ["train_workload_random_16_5q", " [date_dim(d_year, d_moy), customer_address(ca_gmt_offset)].", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving date ranges and customer location attributes. Avoid over-indexing on columns that are already covered by foreign key relationships or are less frequently filtered or joined.\"}"], ["train_workload_random_16_5q", " [date_dim(d_year, d_moy), customer_address(ca_gmt_offset)].", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes that include columns not used in WHERE clauses or JOIN conditions. Focus on columns that are frequently filtered or joined, and ensure indexes are not overly broad by including unnecessary columns.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure multi-column indexes are maintained when they cover multiple columns used together in WHERE clauses or JOIN conditions, especially for high cardinality columns and large tables. Avoid replacing multi-column indexes with single-column indexes if the workload involves complex queries with multiple conditions on the same table.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_id), date_dim(d_date)]", "{\"rule\": \"Ensure that indexes cover all join and filter conditions in the workload. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions, such as date_dim.d_date_sk and item.i_item_sk, to prevent regressions.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in conjunction with other columns in join conditions. Instead, prioritize composite indexes that cover multiple columns used together in queries, especially those involved in join conditions and filters.\"}"], ["train_workload_random_16_5q", " [date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure that date columns used in WHERE clauses are indexed, especially when they are used in range conditions or joins, as they are critical for filtering large datasets efficiently. Additionally, prioritize indexing columns that are frequently used in JOIN operations across multiple tables to optimize query performance.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Avoid creating composite indexes that do not align with the query patterns, especially when the workload involves multiple tables and complex joins. Prioritize single-column indexes on frequently joined and filtered columns, and ensure that composite indexes match the order and combination of columns used in the queries.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure that all necessary composite indexes are maintained, especially those involving multiple columns that are frequently used together in WHERE clauses or JOIN conditions. Avoid removing composite indexes that cover multiple columns used in conjunction, as this can lead to performance regressions.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_id), date_dim(d_date)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions, such as date_dim.d_date_sk and item.i_item_sk, to prevent regressions.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Ensure that indexes on date columns are on the primary key or surrogate key (e.g., d_date_sk) rather than on non-key date columns (e.g., d_date) to avoid regression. Prioritize indexing on columns that are frequently used in joins and filters, such as surrogate keys and foreign keys, over less frequently used or non-key columns.\"}"], ["train_workload_random_16_5q", " [Catalog_sales(cs_sold_date_sk), Web_sales(ws_sold_date_sk), Catalog_returns(cr_returned_date_sk), Web_returns(wr_returned_date_sk), Store_sales(ss_sold_date_sk)]", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily filtered or joined in the workload, as they may not provide additional performance benefits and can lead to regression. Instead, focus on indexing date columns used in range queries and joins, as seen in the improvement index selection.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Avoid creating composite indexes that do not align with the query patterns, such as including columns that are not used together in joins or filters. Prioritize single-column indexes on frequently joined or filtered columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{\"rule\": \"Ensure that indexes on date columns include both the date key and the date itself if both are used in queries. Avoid removing indexes on columns that are frequently used in WHERE clauses or JOIN conditions, especially if they are part of a composite key or are used in multiple queries across different tables.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_id), date_dim(d_date)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined or filtered together, especially when they involve large tables or are part of complex queries. Avoid replacing composite indexes with single-column indexes if the workload involves multi-column conditions.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in conjunction with other columns in join conditions. Instead, focus on composite indexes that cover multiple columns used together in queries, especially those involved in join conditions and filters.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure that indexes on date columns used in WHERE clauses for filtering by date range are maintained, as they are critical for performance in time-based queries. Additionally, maintain indexes on columns that are frequently used in JOIN conditions across large tables to prevent regression.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining operations.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure that indexes on date columns used in range queries (e.g., d_date_sk) are not removed or replaced with composite indexes that do not include the specific date column. Additionally, maintain indexes on columns frequently used in joins and filters, such as item_sk and item_id, to prevent performance regressions.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_id), date_dim(d_date)]", "{\"rule\": \"Ensure that indexes cover all join and filter conditions in the workload. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions, such as date_dim.d_date_sk and item.i_item_sk, to prevent regressions.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Focus on indexing columns that are used in WHERE clauses and GROUP BY operations, and ensure that indexes are not redundant or overlapping with existing indexes.\"}"], ["train_workload_random_16_5q", " [web_page(wp_web_page_sk), date_dim(d_date)]", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple queries, as these columns are likely to be optimized by the database engine's existing mechanisms. Instead, focus on indexing columns that are used in filtering conditions or aggregations, especially if they are part of smaller tables or are not involved in complex joins.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating composite indexes that combine columns with high cardinality and columns with low cardinality, especially when the workload involves filtering or joining on high cardinality columns separately. Instead, prioritize single-column indexes on high cardinality columns used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize composite indexes that include both primary key and frequently filtered columns, such as date and item identifiers, to prevent regressions.\"}"], ["train_workload_random_16_5q", " [date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", "[item(i_item_id), date_dim(d_date)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Avoid removing composite indexes that cover multiple columns used together in queries, especially when they are frequently used in joins or filters.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions, especially for columns with high cardinality or those involved in range queries. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_16_5q", " [date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure that indexes on date columns used in WHERE clauses with range conditions (e.g., date_dim(d_date_sk)) are included in the index selection to prevent regression in query performance.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Instead, prioritize single-column indexes for columns that are consistently used across multiple queries, especially in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_16_5q", " [Customer_address(ca_gmt_offset), Date_dim(d_date_sk, d_date), Item(i_item_sk, i_item_id)]", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Avoid creating separate indexes on columns that are already part of a composite index, especially when the composite index covers the query workload effectively. In this case, the regression index includes separate indexes on 'item(i_item_sk)' and 'item(i_item_id)', which are already covered by the composite index 'Item(i_item_sk, i_item_id)' in the improvement index. This redundancy can lead to regression.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_id), date_dim(d_date)]", "{rule: \"Ensure indexes cover all columns involved in join conditions and filters, especially for large tables. Avoid partial indexes that do not cover all necessary columns for query optimization.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Focus on indexing columns that are used in filtering conditions and aggregation functions to optimize query performance.\"}"], ["train_workload_random_16_5q", " [date_dim(d_year, d_moy), customer_address(ca_gmt_offset)].", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving date ranges and customer location attributes. Avoid over-indexing on columns that are already covered by foreign key relationships or are less frequently filtered or joined.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{\"rule\": \"Avoid creating composite indexes that include columns with low cardinality or that are frequently used in range queries, as they may lead to regressions by increasing index size and reducing selectivity. Instead, prefer single-column indexes on high-cardinality columns or those frequently used in equality conditions.\"}"], ["train_workload_random_16_5q", " [date_dim(d_year, d_moy), customer_address(ca_gmt_offset)].", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are not directly used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in filtering conditions and join operations, especially those with high cardinality or those involved in range queries. Consider the workload patterns and ensure indexes align with the most common query paths to prevent regression.\"}"], ["train_workload_random_16_5q", " [Catalog_sales(cs_sold_date_sk), Web_sales(ws_sold_date_sk), Catalog_returns(cr_returned_date_sk), Web_returns(wr_returned_date_sk), Store_sales(ss_sold_date_sk)]", "[item(i_item_id), date_dim(d_date)]", "{rule: \"Avoid creating indexes on columns that are already heavily filtered or grouped by in the workload queries, as they may not provide additional performance benefits and could lead to regression. Instead, focus on indexing columns that are frequently joined or used in WHERE clauses without existing indexes.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date columns with specific days or months, unless they are frequently used in range queries. Instead, focus on indexing columns that are frequently used in joins and have high selectivity, such as foreign keys and unique identifiers.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk)]", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), web_sales(ws_item_sk), store_sales(ss_item_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize composite indexes that include both foreign key and frequently filtered columns, such as date and item identifiers, to optimize query performance across multiple tables.\"}"], ["train_workload_random_16_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", " [date_dim(d_date_sk, d_year, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating composite indexes that combine columns with high cardinality and columns with low cardinality, especially when the workload involves filtering or joining on high cardinality columns separately. Instead, prioritize single-column indexes on high cardinality columns that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_16_5q", " [date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_address_sk, ca_gmt_offset), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", "[date_dim(d_date_sk, d_date), item(i_item_sk), web_sales(ws_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Avoid adding redundant columns to indexes that are already covered by other indexes. Ensure indexes cover the most frequently queried columns and join conditions without unnecessary overlap.\"}"], ["train_workload_random_16_5q", " [Customer_address(ca_gmt_offset), Date_dim(d_date_sk, d_date), Item(i_item_sk, i_item_id)]", "[item(i_item_id), date_dim(d_date)]", "{\"rule\": \"Ensure that indexes cover both the join and filter conditions. Avoid removing indexes that are used in join conditions, especially when they are frequently used in the workload. In this case, the regression index removed 'date_dim(d_date_sk)' which is crucial for joining with other tables, leading to potential performance degradation.\"}"], ["train_workload_random_16_5q", " [Catalog_sales(cs_sold_date_sk), Web_sales(ws_sold_date_sk), Catalog_returns(cr_returned_date_sk), Web_returns(wr_returned_date_sk), Store_sales(ss_sold_date_sk)]", "[item(i_item_id), item(i_item_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_color), date_dim(d_moy), catalog_sales(cs_item_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), catalog_sales(cs_bill_customer_sk), web_returns(wr_returned_date_sk), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'item(i_item_id)' and 'item(i_item_sk)', unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing on columns that are used in date range filters and have high selectivity, such as 'date_dim(d_date)' and 'catalog_sales(cs_sold_date_sk)'.\"}"]], "train_workload_random_18_5q": [["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple queries, especially when they involve large tables. Prioritize indexes that cover multiple columns used together in WHERE clauses or JOIN conditions, as seen in the improvement index selection, to avoid regressions.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple tables are involved in the query. Avoid relying solely on single-column indexes for high cardinality columns that are part of complex queries.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize composite indexes that include both join keys and filter columns, especially for high cardinality columns and large tables. Avoid regression by maintaining indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure composite indexes are used for join conditions involving multiple columns, especially when the workload involves complex queries with multiple joins and filters. Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions to optimize query performance.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables. Avoid regression by maintaining indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date keys and item identifiers.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure that composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid reducing composite indexes to single-column indexes if multiple columns are frequently used together in queries.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Prioritize indexes on columns with high cardinality and those appearing in WHERE clauses, JOIN conditions, and GROUP BY clauses. Avoid single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_18_5q", " [promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), date_dim(d_date), store_returns(sr_return_amt, sr_item_sk, sr_ticket_number), store_sales(ss_ticket_number, ss_sold_date_sk)]", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns involved in join conditions and those frequently used in WHERE clauses, especially for large tables. Avoid removing indexes that support multiple queries or complex joins.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid removing indexes that cover multiple columns involved in frequent joins or filters, as this can lead to performance regressions.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Prioritize indexes that cover both join and filter conditions to optimize query performance.\"}"], ["train_workload_random_18_5q", " [item(i_category, i_color), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk)].", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Avoid creating indexes solely on columns that are frequently used in joins with other large tables without considering the selectivity and filtering potential of the columns. Instead, prioritize composite indexes that include both join and filter columns to improve query performance.\"}"], ["train_workload_random_18_5q", " [item(i_category, i_color), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk)].", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple queries, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in filtering conditions or aggregations, especially if they are not part of existing indexes or constraints.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, especially those involved in JOIN operations across large tables.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, avoid regression by maintaining indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date columns and foreign keys, across all tables involved in the workload.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize composite indexes that include both join keys and frequently filtered columns, such as date and item identifiers, to prevent regression in query performance.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes on columns frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality, are maintained. Avoid replacing these with indexes on columns that are less frequently queried or have lower cardinality, as this can lead to regression in query performance.\"}"], ["train_workload_random_18_5q", " [item(i_category, i_color), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk)].", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in other tables involved in the join. Instead, focus on indexing columns that are used in filtering conditions or aggregations, and ensure that indexes are created on columns that are part of foreign key relationships to optimize join performance.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure that composite indexes are used for join and filter conditions involving multiple columns, especially when the workload involves complex queries with multiple joins and filters. Avoid replacing composite indexes with single-column indexes if the workload benefits from the former.\"}"], ["train_workload_random_18_5q", " [promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), date_dim(d_date), store_returns(sr_return_amt, sr_item_sk, sr_ticket_number), store_sales(ss_ticket_number, ss_sold_date_sk)]", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently joined with other tables, as this can lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in WHERE clauses, GROUP BY, or ORDER BY operations, especially those with high cardinality.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables. Avoid indexes that only partially cover the workload's join conditions, as seen in the regression index selection where only partial coverage of date_dim and store_sales was provided.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries. Prioritize composite indexes that combine columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes that do not add value beyond existing composite indexes.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure composite indexes are used for join conditions involving multiple columns, especially when the workload involves complex queries with multiple joins and filters. Prioritize composite indexes on columns frequently used together in join conditions and filters, such as (item_sk, order_number) or (ticket_number, item_sk), to optimize query performance and prevent regression.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables. Prioritize composite indexes that include multiple columns used together in WHERE clauses or JOIN conditions, such as date and item identifiers.\"}"], ["train_workload_random_18_5q", " [promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), date_dim(d_date), store_returns(sr_return_amt, sr_item_sk, sr_ticket_number), store_sales(ss_ticket_number, ss_sold_date_sk)]", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these are likely to be covered by existing indexes. Instead, focus on indexing columns that are used in WHERE clauses, GROUP BY, or ORDER BY operations, especially if they are not part of any existing index.\"}"], ["train_workload_random_18_5q", " [item(i_category, i_color), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk)].", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, as this can lead to excessive index maintenance and may not significantly improve query performance. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, such as item(i_category, i_color) and store(s_store_sk).\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in joins or filters, as this can lead to regressions.\"}"], ["train_workload_random_18_5q", "[store_sales(ss_ticket_number, ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk)]", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially when these columns are already part of existing indexes. Instead, focus on indexing columns that are used in filtering conditions and are not part of existing indexes.\"}"], ["train_workload_random_18_5q", " [promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), date_dim(d_date), store_returns(sr_return_amt, sr_item_sk, sr_ticket_number), store_sales(ss_ticket_number, ss_sold_date_sk)]", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions across multiple tables, as this can lead to redundant indexing and potential performance regressions. Focus on indexing columns that are used in filtering conditions and aggregations, especially in large tables.\"}"], ["train_workload_random_18_5q", " [item(i_category, i_color), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk)].", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Avoid creating indexes solely on columns that are frequently used in join conditions with other large tables, as this can lead to regression by increasing the cost of join operations. Instead, consider composite indexes that include both the join and filter columns to optimize query performance.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins and filters are maintained separately rather than combined, especially when they are frequently used in different query patterns. Avoid combining columns from different tables into a single index unless they are always queried together in the same order.\"}"], ["train_workload_random_18_5q", "[store_sales(ss_ticket_number, ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk)]", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Focus on indexing columns that are frequently used in join conditions and where clauses, especially those with high cardinality, to improve query performance and prevent regression.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters across multiple queries are maintained. Avoid removing indexes on columns that are frequently used in WHERE clauses or JOIN conditions, especially if they are part of a composite key or are used in multiple queries within the workload.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Prioritize indexes that cover multiple columns involved in frequent joins and filters, such as (order_number, item_sk) for sales and returns tables, and (sold_date_sk, item_sk) for sales tables.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes on columns frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality, are maintained. Avoid replacing these with indexes on columns that are less frequently used or have lower cardinality, as this can lead to performance regressions.\"}"], ["train_workload_random_18_5q", " [promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), date_dim(d_date), store_returns(sr_return_amt, sr_item_sk, sr_ticket_number), store_sales(ss_ticket_number, ss_sold_date_sk)]", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns used in join conditions across multiple tables and those frequently used in WHERE clauses. Avoid removing indexes that support complex queries with multiple joins and filters, as this can lead to performance regressions.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Avoid creating composite indexes that span multiple tables when single-column indexes on frequently joined columns across different tables are more effective. Focus on indexing columns that are used in WHERE clauses and JOIN conditions separately for each table.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes on columns used in WHERE clauses with high cardinality and frequent joins are maintained. Avoid replacing these with indexes on columns with lower cardinality or less frequent usage in joins and filters.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters across large tables are maintained, especially when they are frequently used in the workload. Avoid removing composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters. Avoid removing indexes that cover multiple columns involved in frequent joins or filters, especially when they span across different tables in the workload.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure composite indexes are used for join and filter conditions involving multiple columns, especially for large tables. Avoid replacing composite indexes with single-column indexes when queries involve multiple columns in join or filter conditions.\"}"], ["train_workload_random_18_5q", "[store_sales(ss_ticket_number, ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk)]", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in other tables involved in the join. Instead, focus on indexing columns that are used in filtering conditions or aggregations, as these can significantly improve query performance.\"}"], ["train_workload_random_18_5q", " [promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), date_dim(d_date), store_returns(sr_return_amt, sr_item_sk, sr_ticket_number), store_sales(ss_ticket_number, ss_sold_date_sk)]", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple queries, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in filtering conditions and aggregations, especially those with high cardinality.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes on columns frequently used in WHERE clauses and JOIN conditions are maintained, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple conditions.\"}"], ["train_workload_random_18_5q", " [promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), date_dim(d_date), store_returns(sr_return_amt, sr_item_sk, sr_ticket_number), store_sales(ss_ticket_number, ss_sold_date_sk)]", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Avoid removing indexes that are used in join conditions across multiple tables, especially when they involve large tables or are frequently queried together.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize composite indexes that include both join keys and filter columns, such as (i_item_id, i_item_sk) for item table, and (d_year, d_date_sk) for date_dim table, to optimize query performance and prevent regression.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure composite indexes are used for join and filter conditions involving multiple columns, especially when queries involve large tables and complex joins. Avoid using single-column indexes when multi-column indexes can better optimize the query performance.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure that indexes on date columns used in WHERE clauses are composite with other frequently filtered columns to prevent regression, especially when the workload involves multiple joins and filters on date ranges.\"}"], ["train_workload_random_18_5q", " [store_returns(sr_item_sk), catalog_returns(cr_item_sk)].", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple queries, as these may lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are directly involved in filtering or aggregation operations within the workload.\"}"], ["train_workload_random_18_5q", " [item(i_item_id, i_item_sk), date_dim(d_year, d_date), customer_address(ca_gmt_offset), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_item_sk, sr_ticket_number)]", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date), web_site(web_site_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or as part of subqueries, as these are critical for query performance.\"}"], ["train_workload_random_18_5q", " [customer_address(ca_gmt_offset), item(i_category, i_color, i_current_price), store_returns(sr_item_sk, sr_ticket_number, sr_return_amt), catalog_returns(cr_return_amount), web_returns(wr_return_amt), date_dim(d_date_sk)]", " [store_sales(ss_sold_date_sk), date_dim(d_date)]", "{rule: \"Ensure that indexes on columns used in WHERE clauses with high cardinality and frequent filtering conditions are maintained or added, especially when they are used in joins or subqueries. Avoid removing indexes on columns that are frequently used in filtering conditions across multiple queries, such as date columns in date_dim, which are critical for performance in time-based queries.\"}"], ["train_workload_random_18_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Item(i_item_id, i_item_sk), Date_dim(d_year, d_date), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are used in WHERE clauses with high cardinality filters, such as date or item identifiers, as these can significantly impact query performance.\"}"]], "train_workload_random_20_3q": [["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are prioritized over indexes on columns used for grouping or ordering. Avoid redundant indexes on columns that are already covered by composite indexes.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Avoid creating composite indexes on columns with high cardinality and low selectivity, especially when single-column indexes on foreign keys or frequently filtered columns are more beneficial for query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{rule: \"Avoid creating composite indexes on columns with high cardinality and low selectivity, especially when single-column indexes on foreign keys or frequently filtered columns are more beneficial for the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are maintained, especially for large tables. Avoid removing indexes on columns that are frequently used in WHERE clauses or JOIN conditions, as this can lead to performance regressions.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions are prioritized over those used in filtering conditions, especially when the join involves large tables. Avoid removing indexes on columns that are frequently used in join conditions across multiple queries.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid adding redundant or unnecessary indexes on columns that are already covered by existing indexes or are not frequently used in the workload. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and frequently filtered columns are maintained. Avoid redundant indexes on columns that are not used in filtering or joining, as they can lead to regression by increasing maintenance overhead without improving query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or low selectivity, such as 'cd_marital_status' and 'cd_education_status', unless they are frequently used together in WHERE clauses. Instead, prioritize single-column indexes on foreign keys and columns used in JOIN conditions, such as 'cd_demo_sk', 'd_year', and 'ws_order_number', to improve query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and have lower cardinality for better performance. Consider the workload and query patterns to ensure indexes align with frequently queried columns and conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOINs and have high selectivity, especially if they are part of foreign key relationships. Consider composite indexes for columns that are often queried together.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that all columns used in join conditions and filters are indexed. Avoid removing indexes on columns that are frequently used in join conditions or as filter predicates, especially if they are part of a composite index that optimizes multiple query patterns.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions are prioritized over those used in filtering conditions, especially when dealing with large tables. Avoid adding indexes that are not directly used in join conditions or filtering criteria unless they significantly improve query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering predicates are maintained, especially for large tables. Avoid removing indexes on columns that are frequently used in WHERE clauses or JOIN conditions, such as 'ws_order_number' in 'web_sales', which is used in both join and filtering operations.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are prioritized over indexes on columns used in grouping or ordering. Avoid redundant indexes on columns that are already covered by composite indexes.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or high redundancy, especially when single-column indexes on high cardinality columns are already effective. Prioritize indexing columns that are frequently used in join conditions and filters with high selectivity.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in conjunction with other columns in complex conditions. Instead, focus on indexing columns that are frequently used in join conditions and have high cardinality, as well as columns that are used in WHERE clauses with range conditions.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Prioritize indexes on columns involved in multiple queries and those with high cardinality. Avoid redundant indexes that do not contribute to query performance improvement.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are only used in isolated queries or have low cardinality unless they are critical for performance in specific cases.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid adding indexes on columns that are already part of a foreign key relationship or are frequently used in joins, as they may lead to redundant indexing and potential performance regressions. Prioritize indexing columns that are used in filtering conditions and aggregations, especially in large tables.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and where clauses are consistently applied across all queries in the workload. Avoid adding indexes on columns that are not used in join conditions or where clauses, as they may not contribute to query performance improvement and could lead to regression.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes on columns with high cardinality or columns that are frequently used in equality predicates. Instead, prioritize single-column indexes on foreign key columns and columns used in join conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as they may lead to redundant indexing and potential performance regressions. Prioritize indexing columns that are used in filtering conditions and have high cardinality.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'cd_marital_status', and instead focus on columns frequently used in joins or filters with high selectivity, like 'cd_demo_sk' and 'd_year'. Additionally, ensure that composite indexes are aligned with query patterns, such as 'd_year' and 'd_date_sk' together, to optimize multi-column filtering.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions are prioritized over those used in filtering conditions, especially when dealing with large tables. Avoid creating indexes on columns that are not directly involved in join conditions if they do not significantly improve query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over those used in group by or order by clauses. Additionally, avoid creating composite indexes on columns with high cardinality unless they are frequently queried together in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are maintained. Avoid removing indexes on columns that are frequently used in WHERE clauses or JOIN conditions, especially if they are part of a composite index that optimizes multiple queries.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Avoid creating multiple separate indexes on columns that are frequently used together in join or filter conditions; instead, consider composite indexes to optimize query performance and prevent regression.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Ensure that the order of columns in composite indexes matches the order of their usage in query predicates, especially for equality conditions. Avoid adding unnecessary columns to indexes that are not used in query predicates or join conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{\"rule\": \"Avoid creating composite indexes that include columns with low cardinality or columns that are already covered by existing single-column indexes. Instead, focus on creating single-column indexes on frequently filtered or joined columns, especially those with high cardinality, to prevent regression in query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{rule: \"Ensure indexes cover columns used in join conditions and filters across multiple tables, especially for large tables. Prioritize composite indexes that include columns frequently used together in queries.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{rule: \"Prioritize composite indexes that cover multiple columns involved in join conditions and filters, especially for large tables, over single-column indexes. Ensure indexes align with the workload's frequent join and filter patterns to avoid regression.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid adding indexes on columns that are already part of a foreign key relationship or are frequently joined, unless they are part of a composite index that directly supports the workload's filtering or sorting needs. Prioritize indexes that reduce the number of rows scanned in large tables and support the most frequent query patterns.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{\"rule\": \"Ensure that the regression index selection includes all critical columns from the improvement index selection, especially those involved in join conditions and filters, such as 'date_dim.d_year' and 'web_returns.wr_order_number'. Additionally, avoid unnecessary indexes on columns not directly involved in the workload, like 'reason(r_reason_desc)' and 'item(i_brand)', unless they are proven to improve query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or that are not used in join or filter conditions. Instead, focus on single-column indexes for frequently joined or filtered columns, especially those with high cardinality.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns that are already covered by composite indexes in the improvement selection, especially when they are frequently used in joins or filters. Prioritize composite indexes that cover multiple columns used together in queries to reduce redundancy and improve query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOIN conditions and have a direct impact on query performance, such as foreign keys or columns involved in frequent filtering operations. Consider composite indexes for columns that are often queried together, especially if they are part of complex conditions or subqueries.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over those used in group by or order by clauses. Additionally, avoid creating composite indexes on columns with high cardinality unless they are frequently queried together in the workload.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that composite indexes maintain the same column order as in the improvement index to avoid regression. Avoid adding unnecessary columns to indexes that are not used in join or filter conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in WHERE clauses across multiple queries. Instead, prioritize single-column indexes for such columns to prevent regression in query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not part of the filtering conditions in the workload queries. Focus on indexing columns that are frequently used in join conditions and have a high impact on query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Avoid creating composite indexes on columns with low cardinality or columns that are frequently used in equality conditions across multiple queries. Instead, prioritize single-column indexes on high cardinality columns or columns that are frequently used in join conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in conjunction with other columns in join conditions. Instead, focus on indexing columns that are used in WHERE clauses and have high cardinality, especially if they are used in multiple queries across the workload.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are consistently applied across all relevant tables in the workload. Avoid omitting indexes on columns that are frequently used in WHERE clauses or JOIN conditions, especially when they are part of composite keys or have high cardinality.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are only used in isolated queries or have low cardinality unless they are critical for performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are maintained. Avoid replacing indexes on join keys with indexes on non-join columns unless the workload specifically benefits from it. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and have high cardinality. Ensure indexes align with the workload's query patterns, focusing on columns that improve query performance by reducing scan times and enhancing join operations.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{\"rule\": \"Avoid creating composite indexes that include columns with high cardinality or low selectivity, such as 'cd_marital_status' and 'cd_education_status', when single-column indexes on foreign key columns or frequently filtered columns like 'ca_address_sk', 'cd_demo_sk', 'd_year', and 'wr_order_number' are more effective for the given workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as they may already be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions in the SELECT clause, especially if they are not part of a foreign key relationship.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance. Additionally, ensure that composite indexes are created only when multiple columns are used together in queries, and avoid indexing columns with low cardinality unless they are critical for query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns involved in join conditions and filters are maintained. Avoid replacing indexes on columns frequently used in WHERE clauses with indexes on columns used in GROUP BY or ORDER BY unless necessary. Prioritize indexing columns that are part of join conditions and filters over those used for aggregation or sorting.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions are prioritized over those used in filtering conditions, especially when dealing with large tables. Avoid removing indexes on primary key or foreign key columns that are frequently used in joins.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Ensure indexes cover columns used in join conditions and filters, especially for large tables. Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions to prevent regression.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid over-indexing columns with high cardinality or those used in less frequent conditions, as this can lead to regression in performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or that are not used in join conditions or where clauses, as they may lead to regression by increasing index size and maintenance overhead without significant query performance benefits.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently queried together in the workload. Instead, focus on single-column indexes for columns that are used in join conditions or where clauses, especially those with high cardinality or frequently used in filtering conditions.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are consistently applied across all queries in the workload. Avoid removing or altering indexes that are frequently used in multiple queries, especially those involving large tables or complex joins.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{rule: \"Avoid replacing composite indexes with single-column indexes when multiple tables are joined on the same column, especially if the column is frequently used in WHERE clauses across different queries.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid adding indexes on columns that are already part of a composite index, especially if the composite index is frequently used in the workload. This can lead to redundant indexes and potential performance regressions.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Additionally, ensure that indexes on columns with high cardinality are preferred to improve query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes on columns with high cardinality and low selectivity when single-column indexes on foreign keys or frequently filtered columns are more beneficial.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are part of composite indexes that efficiently cover the workload. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially if they are not already indexed. Consider the selectivity and cardinality of columns when choosing indexes to prevent unnecessary overhead.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are used in conjunction with other columns in complex queries. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions with high selectivity, as well as columns that are part of foreign key relationships.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over those used in group by or order by clauses. Additionally, avoid creating composite indexes on columns with high cardinality unless they are frequently queried together in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over those used in group by or order by clauses. Additionally, avoid creating composite indexes on columns with high cardinality unless they are frequently queried together in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are maintained, especially for large tables. Avoid removing indexes on columns that are frequently used in WHERE clauses or JOIN operations, such as 'ws_order_number' in 'web_sales' and 'd_date_sk' in 'date_dim'. Prioritize indexing on columns that are part of multiple query conditions across different queries in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are prioritized, especially for large tables. Avoid redundant indexes on columns that are already covered by composite indexes or are not frequently used in filtering or joining.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or high redundancy, such as 'cd_marital_status' and 'ca_state', unless they are proven to significantly improve query performance. Instead, focus on indexing columns that are frequently used in joins and filters with high cardinality, like 'cd_demo_sk', 'd_year', and 'ws_order_number'.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in conjunction with other columns in complex conditions. Instead, focus on indexing columns that are used in join conditions and have high cardinality, as well as columns that are frequently filtered in WHERE clauses.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters in the workload are maintained or improved, especially for large tables. Avoid removing or downgrading indexes on columns that are frequently used in WHERE clauses or JOIN conditions, as this can lead to performance regressions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained or added, especially when they are frequently used in the workload queries. Avoid removing or replacing these indexes with those on columns that are not directly involved in join conditions or filtering operations in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are part of complex join conditions or subqueries. Instead, prioritize indexing columns that are frequently used in WHERE clauses with equality conditions and have a high impact on query performance, such as foreign keys or columns involved in filtering large datasets.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in filtering conditions and have high cardinality to improve query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes on columns with high cardinality or columns that are frequently used in equality predicates. Instead, prioritize single-column indexes on foreign keys and columns involved in join conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions or filters. Prioritize indexing columns that are used in equality conditions and have a significant impact on query performance, such as foreign keys or columns involved in frequent joins.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating composite indexes that include columns not directly involved in filtering or joining conditions. Prioritize single-column indexes on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over those used in group by or order by clauses. Additionally, avoid creating composite indexes on columns with high cardinality unless they are frequently queried together in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns involved in join conditions and filters are maintained. Avoid replacing indexes on columns used in join conditions with indexes on columns used in group by or order by clauses unless necessary for performance improvement.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as they may lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in filtering conditions and are not part of existing indexes.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOINs and WHERE clauses with equality conditions, especially if they are foreign keys or primary keys. Consider the workload and query patterns to ensure indexes improve query performance without causing unnecessary overhead.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or are frequently used in equality conditions, as they may not provide significant performance benefits and can lead to regression. Instead, focus on indexing columns with high cardinality or those involved in range queries and joins.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'customer_demographics(cd_marital_status)' and 'customer_demographics(cd_education_status)', as they may lead to regression by increasing index maintenance overhead without significant query performance improvement. Instead, focus on indexing columns that are frequently used in join conditions and have high selectivity, such as 'customer_demographics(cd_demo_sk)' and 'date_dim(d_year)'.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, as this can lead to performance regressions. Specifically, maintain indexes on columns frequently used in joins and filters, such as 'date_dim.d_date_sk', 'customer_address.ca_address_sk', and 'store_sales.ss_item_sk', to prevent regressions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload queries. Avoid replacing them with indexes on columns that are not directly involved in join conditions or filtering, as this can lead to regression in query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOINs and have high selectivity, especially if they are part of foreign key relationships. Consider composite indexes for columns that are often queried together, and ensure indexes align with the workload's filtering and sorting requirements.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and filtering predicates are maintained or added, especially for large tables. Avoid removing indexes on columns that are frequently used in WHERE clauses or JOIN conditions, as this can lead to performance regressions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes on columns with high cardinality or columns that are frequently used in equality conditions across multiple queries. Instead, prioritize single-column indexes on foreign keys and columns used in WHERE clauses with equality conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not part of the WHERE clause or JOIN conditions in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and have high selectivity.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and filters are maintained. Avoid replacing single-column indexes with multi-column indexes if the additional columns are not frequently used in join or filter conditions. Specifically, maintain indexes on columns like 'customer_demographics.cd_demo_sk' and 'web_returns.wr_order_number' that are used in join conditions, and avoid replacing them with less relevant indexes like 'customer_demographics.cd_marital_status'.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over those used in group by or order by clauses. Additionally, avoid creating composite indexes on columns with high cardinality unless they are frequently queried together in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over those used in group by or order by clauses. Additionally, avoid creating composite indexes on columns with high cardinality unless they are frequently queried together in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in WHERE clauses across multiple queries. Instead, prioritize single-column indexes for such columns to prevent regression in query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions across large tables. Instead, prioritize indexing columns that are used in filtering conditions with high selectivity or are part of foreign key relationships.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or that are not used in join conditions or where clauses, as they may lead to regression by increasing index size and maintenance overhead without significant query performance benefits.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in conjunction with other columns in join conditions. Instead, focus on indexing columns that are used in WHERE clauses and have high cardinality, or create composite indexes that match the query patterns.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{rule: \"Avoid regression by ensuring indexes cover join conditions and filter predicates in queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Consider composite indexes for multi-column conditions.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions across multiple queries, especially when they involve large tables. Avoid redundant indexes on columns that are already covered by existing indexes in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are maintained. Avoid replacing indexes on columns used in join conditions with indexes on columns used in group by or order by clauses unless they are also frequently used in join conditions or filters.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and filtering predicates are prioritized, especially for large tables. Avoid unnecessary indexes on low cardinality columns or columns not used in join or filter conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes on columns with high cardinality or columns that are frequently used in equality conditions across multiple queries. Instead, prioritize single-column indexes on foreign keys and columns involved in join conditions to improve query performance without causing regression.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not part of the filtering conditions in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions with high selectivity.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are maintained, especially for high cardinality columns. Avoid replacing composite indexes with single-column indexes if the composite index covers multiple query conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are maintained. Avoid replacing indexes on columns frequently used in WHERE clauses with indexes on columns used in GROUP BY or ORDER BY unless they are also used in join conditions or filters.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions are prioritized over those used in filtering conditions, especially when dealing with large tables. Additionally, avoid creating indexes on columns with high cardinality unless they are frequently used in filtering conditions.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in filtering or joining conditions in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance. Additionally, ensure that indexes are created on columns with high cardinality to maximize their effectiveness.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid over-indexing columns that are used primarily for grouping or ordering unless they are also heavily involved in joins or filters.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or columns that are frequently used in equality predicates, as they may lead to regression by increasing index size and reducing selectivity. Instead, focus on single-column indexes for high cardinality columns or columns frequently used in join conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in conjunction with other columns in join conditions. Instead, focus on indexing columns that are used in WHERE clauses and have high cardinality, or create composite indexes that match the query patterns.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{rule: \"Ensure indexes cover columns used in join conditions and filters across multiple queries, especially for large tables. Prioritize composite indexes that include both join and filter columns to optimize query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and filters are maintained. Avoid replacing indexes on frequently joined columns with indexes on less frequently filtered columns, especially when the join columns are part of large tables or are used in multiple queries.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are maintained, especially for high cardinality columns. Avoid redundant indexes on columns that are not frequently used in filtering or join conditions, and ensure that indexes cover the most selective columns in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{\"rule\": \"Avoid creating composite indexes that include columns with high cardinality or low selectivity, such as 'ws_order_number' and 'ws_item_sk', unless they are frequently used together in query filters or joins. Instead, prioritize single-column indexes on foreign keys and columns used in WHERE clauses, such as 'cd_demo_sk', 'd_year', and 'ws_bill_customer_sk', to improve query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in filtering conditions and have a significant impact on query performance. Remove redundant indexes that do not contribute to query optimization.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'cd_marital_status', and prefer composite indexes that match the query's join and filter conditions, like 'date_dim(d_year, d_date_sk)'.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over those used in group by or order by clauses. Additionally, avoid creating composite indexes on columns with high cardinality unless they are frequently queried together in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are maintained. Avoid replacing indexes on columns frequently used in WHERE clauses with indexes on columns used in GROUP BY or ORDER BY unless they are also part of join conditions or filters.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Ensure that composite indexes in the regression selection do not overlap with single-column indexes in the improvement selection, especially when the single-column index is frequently used in join conditions or filters. Prioritize single-column indexes for high cardinality columns used in joins or filters over composite indexes that may not fully utilize the index for all queries.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Prioritize indexing columns involved in join conditions and filters with high cardinality or frequent usage across multiple queries. Avoid redundant indexes on columns with low cardinality or those already covered by existing indexes.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or that are not used in join or filter conditions. Instead, focus on indexing columns that are frequently used in joins or where clauses, especially those with high cardinality.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{\"rule\": \"Avoid creating composite indexes that include columns with low cardinality or columns that are already covered by existing single-column indexes. Instead, focus on single-column indexes for high cardinality columns that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{rule: \"Ensure indexes cover columns used in join conditions and filters across multiple queries, especially for large tables. Prioritize composite indexes that include both join and filter columns to optimize query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of large tables and are used in join conditions, as this can lead to performance regressions.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOIN conditions and have a direct impact on query performance, such as foreign keys or columns involved in frequent filtering operations. Consider composite indexes for columns that are often queried together, especially if they are part of complex queries with multiple conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{rule: \"Avoid creating indexes on columns with low cardinality or character types unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing integer columns that are used in JOINs or WHERE clauses, especially those with high cardinality or those involved in range queries.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes on columns with high cardinality or columns that are frequently used in join conditions across multiple queries. Instead, prioritize single-column indexes on foreign key columns and columns used in WHERE clauses with equality conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not part of the filtering conditions in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions with high selectivity.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'cd_marital_status', and instead focus on columns frequently used in join conditions or filters, like 'cd_demo_sk', 'd_year', and 'ws_order_number'.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are maintained. Avoid replacing composite indexes with single-column indexes if the composite index covers multiple filtering conditions or join conditions in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over those used in group by or order by clauses. Additionally, avoid creating composite indexes on columns with high cardinality unless they are frequently queried together in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Ensure indexes on columns involved in join conditions and filters across multiple tables, especially for large tables. Prioritize composite indexes for columns frequently used together in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in filtering conditions and have a significant impact on query performance. Consider the workload and query patterns to ensure indexes align with the most common and performance-critical operations.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or high redundancy, especially when single-column indexes on high cardinality columns are already effective. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions with high selectivity.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{\"rule\": \"Avoid creating composite indexes that include columns with low cardinality or that are already covered by existing single-column indexes. Instead, focus on single-column indexes for high cardinality columns that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters in the workload are maintained or improved. Avoid removing or downgrading indexes on columns that are frequently used in join conditions or as foreign keys, such as 'd_date_sk', 'ca_address_sk', and 'ss_item_sk', as these are critical for query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid replacing composite indexes that cover multiple query conditions with single-column indexes unless the single-column index is more frequently used across different queries.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and filters are maintained. Avoid replacing single-column indexes with multi-column indexes if the single-column index is frequently used in join conditions across multiple queries. Additionally, prioritize indexing columns that are used in WHERE clauses and JOIN conditions over those used in GROUP BY or ORDER BY clauses.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{rule: \"Avoid creating indexes on columns with low cardinality or character types unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing integer columns that are used in JOINs or WHERE clauses, especially those with high cardinality.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes on columns with high cardinality or columns that are frequently used in equality predicates. Instead, prioritize single-column indexes on foreign key columns and columns used in join conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when they are already indexed in other tables. Prioritize indexing columns that are used in WHERE clauses with specific filtering conditions and those involved in ORDER BY clauses to optimize query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over indexes on columns used in group by or order by clauses. Additionally, avoid creating composite indexes that include columns not frequently used together in join or filter conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and filters are maintained. Avoid replacing single-column indexes with multi-column indexes if the single-column index is frequently used in join conditions or filters across multiple queries.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over those used in group by or order by clauses. Additionally, avoid creating composite indexes on columns with high cardinality unless they are frequently queried together in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Ensure that composite indexes in regression do not replace single-column indexes that are frequently used in join conditions or where clauses, especially when the single-column index is on a high cardinality column.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Prioritize indexes on columns involved in join conditions and filters with high cardinality or frequent usage across multiple queries. Avoid redundant indexes on columns with low cardinality or those already covered by existing indexes.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Avoid creating composite indexes on columns with low cardinality or that are frequently used in equality conditions, as they may not provide significant performance benefits and can lead to regression when simpler indexes are more effective.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in conjunction with other columns in join conditions. Instead, focus on indexing columns that are used in WHERE clauses with high cardinality and columns that are part of join conditions with high cardinality.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{rule: \"Avoid regression by ensuring indexes cover columns involved in join conditions and filters across large tables, especially when they are frequently used in the workload. Prioritize indexes on columns with high cardinality and those that are part of complex queries involving multiple tables.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions are prioritized over those used in filtering conditions, especially when the join involves large tables. Avoid removing indexes on columns that are frequently used in join conditions across multiple queries.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in joins are maintained, especially when they are frequently used in the workload. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple join conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions in the workload are maintained or improved. Avoid removing or downgrading indexes on columns that are frequently used in WHERE clauses, JOIN conditions, or GROUP BY clauses, especially those with high cardinality or those involved in complex queries.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes on columns with low cardinality or columns that are frequently used in equality conditions across multiple queries. Instead, prioritize single-column indexes on foreign key columns and columns involved in join conditions to improve query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not part of the filtering conditions in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses and join conditions with high selectivity.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{\"rule\": \"Avoid adding indexes on columns that are not directly involved in filtering or joining conditions in the workload queries, especially if they are not part of the improvement index selection. Focus on columns that are frequently used in WHERE clauses or JOIN conditions to optimize query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over indexes on columns used in group by or order by clauses. Additionally, avoid creating composite indexes on columns with high cardinality unless they are frequently queried together in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over those used in group by or order by clauses. Additionally, avoid creating composite indexes on columns with high cardinality unless they are frequently queried together in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Ensure that composite indexes in the regression selection do not replace single-column indexes that are frequently used in join conditions or where clauses, as this can lead to performance regressions. Maintain single-column indexes for columns that are used independently in multiple queries.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not part of the filtering conditions in the workload queries. Focus on indexing columns that are frequently used in join conditions and have a significant impact on query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for columns that are frequently filtered or joined on, especially if they have high cardinality.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or that are frequently used in WHERE clauses with multiple conditions, as they may not significantly improve query performance and can lead to regression by increasing maintenance overhead.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{\"rule\": \"Ensure that indexes cover the join keys and filter conditions used in the workload queries. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially those involving large tables or high cardinality columns.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are maintained, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filters across multiple tables.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns and frequently joined columns are maintained. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filters on multiple columns.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{rule: \"Ensure that indexes on columns used in WHERE clauses and JOIN conditions are consistently applied across all relevant tables, especially for high cardinality columns and those involved in frequent joins or filters. Avoid unnecessary indexes on low cardinality columns or those not directly involved in query predicates.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes on columns with high cardinality and low selectivity when single-column indexes on foreign keys or frequently filtered columns are more beneficial.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when they are already indexed in other tables. Prioritize indexing columns that are used in WHERE clauses with specific filtering conditions and those involved in ORDER BY clauses to optimize query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'cd_marital_status', and prefer composite indexes that match the query's join and filter conditions, like 'date_dim(d_year, d_date_sk)'.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that the regression index selection includes all columns from the improvement index selection, especially those used in join conditions and filters, to prevent performance degradation. Additionally, avoid replacing single-column indexes with multi-column indexes unless necessary, as it may lead to regression in query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over those used in group by or order by clauses. Specifically, prioritize single-column indexes on foreign key relationships and frequently filtered columns, and avoid multi-column indexes unless they directly support a specific query pattern.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Ensure indexes cover join conditions and filter conditions in queries. Prioritize composite indexes on columns frequently used together in WHERE clauses, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions or filters with large tables, as this can lead to performance regressions. Instead, focus on indexing columns that are frequently used in equality conditions and have a moderate to low cardinality, which can significantly improve query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or that are not used in join or filter conditions. Instead, focus on single-column indexes for frequently joined or filtered columns, especially those with high cardinality.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in conjunction with other columns in complex conditions. Instead, focus on indexing columns that are used in join conditions and have high cardinality, as well as columns that are frequently filtered or sorted in queries.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid redundant indexes on columns already covered by composite indexes. Prioritize indexes on columns with high cardinality and frequent use in WHERE clauses.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily used in join conditions across multiple queries, especially if they are primary keys or foreign keys, as this can lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are frequently filtered or aggregated in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses. Ensure that multi-column indexes are created only when multiple columns are used together in queries, and avoid indexing columns with low cardinality unless they are part of a composite index that improves query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{\"rule\": \"Ensure that the regression index selection includes indexes on columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or are part of large tables. Avoid unnecessary indexes on columns that are not used in filtering or joining, such as 'reason(r_reason_desc)' in this case, and ensure that critical columns like 'date_dim(d_year)' are indexed as in the improvement selection.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes on columns with high cardinality or columns that are frequently used in equality conditions across multiple queries. Instead, prioritize single-column indexes on foreign keys and columns involved in join conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions or filters with large tables. Instead, focus on indexing columns that are used in equality conditions and have a significant impact on query performance, such as foreign keys or columns with high selectivity.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in WHERE clauses across multiple queries. Instead, prioritize single-column indexes for such columns to prevent regression in query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure indexes on columns used in join conditions and filters are maintained. Avoid replacing single-column indexes with multi-column indexes unless the multi-column index is used in the workload. Prioritize indexing columns involved in frequent joins and filters over those used in group by or order by clauses.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over those used in group by or order by clauses. Additionally, avoid creating composite indexes on columns with high cardinality unless they are frequently queried together in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be already optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions in the SELECT or ORDER BY clauses.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions or filters. Instead, prioritize indexing columns that are used in equality joins or filters with high selectivity, and consider composite indexes for multi-column conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are prioritized over indexes on columns used for grouping or ordering. Specifically, maintain indexes on primary key and foreign key columns involved in joins, and columns frequently used in WHERE clauses for filtering, as seen in the improvement index selection.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially if they are used in multiple queries across the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters in the workload are maintained or improved. Avoid removing or downgrading indexes on columns that are frequently used in join conditions or as foreign keys, such as 'd_date_sk', 'ca_address_sk', and 'ss_item_sk', as these are critical for query performance.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions across multiple queries, especially when they involve large tables. Avoid indexing columns that are only used in filtering conditions for smaller tables unless they are part of a join condition.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in WHERE clauses or JOIN conditions, as this can lead to regression by reducing the efficiency of individual column lookups. Instead, prioritize single-column indexes for such columns unless the composite index significantly improves query performance.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{\"rule\": \"Ensure that multi-column indexes are preserved when they are used in join or filter conditions across multiple queries, especially when they involve high cardinality columns or are frequently used together in the workload. Avoid replacing them with single-column indexes unless there is a clear performance benefit for the majority of queries.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid indexing columns that are only used in specific query conditions or are part of smaller tables unless they are critical for performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not part of the filtering conditions in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions with high selectivity.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and filters are maintained. Avoid replacing single-column indexes with multi-column indexes if the single-column index is frequently used in join conditions across multiple queries. Additionally, prioritize indexing columns that are used in WHERE clauses and JOIN conditions over those used in GROUP BY or ORDER BY clauses.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over those used in group by or order by clauses. Additionally, avoid multi-column indexes on columns with high cardinality unless they are frequently queried together.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns involved in join conditions and filters are maintained. Avoid replacing indexes on columns frequently used in join conditions with indexes on columns used in group by or order by clauses unless necessary. Prioritize indexing columns that are part of join conditions and filters over those used in aggregation or sorting.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions, especially for large tables. Prioritize composite indexes for columns frequently used together in queries.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions across large tables. Instead, prioritize indexing columns that are used in WHERE clauses with equality conditions and have moderate cardinality, as well as columns involved in frequent join operations with smaller tables.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Avoid creating composite indexes on columns with high cardinality and low selectivity, especially when single-column indexes on foreign keys or frequently filtered columns are more effective. Prioritize indexes on columns involved in joins and filters that significantly reduce the result set size.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or that are frequently used in equality conditions, as they may lead to regression by increasing index size and reducing selectivity. Instead, focus on single-column indexes for high cardinality columns or those frequently used in join conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries. Avoid redundant indexes that do not align with workload patterns.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are maintained, especially for large tables. Avoid removing indexes on columns that are frequently used in WHERE clauses or JOIN conditions, as this can lead to performance regressions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are part of complex join conditions or subqueries. Instead, prioritize indexing columns that are frequently used in WHERE clauses and have a direct impact on query filtering, such as foreign keys or columns with moderate cardinality that are used in equality conditions.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{rule: \"Avoid creating indexes on columns that are not used in join conditions or filtering predicates in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing the complexity and overhead of maintaining the index. Instead, prioritize indexing columns that are used in filtering conditions and have high cardinality, as seen in the improvement index selection.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent joins across multiple tables unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and have lower cardinality to improve query performance. Consider the workload and query patterns to identify columns that are frequently filtered or joined.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses. Ensure that composite indexes are created only when multiple columns are used together in queries, and avoid indexing columns with low cardinality unless they are part of a composite index that improves query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over those used in group by or order by clauses. Additionally, avoid multi-column indexes on columns with high cardinality unless they are frequently queried together in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are maintained. Avoid replacing indexes on columns frequently used in join conditions with indexes on columns used in group by or order by clauses unless they are also part of the join or filter conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are not removed, especially when they are frequently used in the workload queries. Additionally, maintain indexes on columns that are used in WHERE clauses with range conditions or are part of ORDER BY clauses to prevent regression in query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [store_sales(ss_item_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), item(i_item_sk), store(s_store_sk), item(i_brand), item(i_class), catalog_sales(cs_sold_date_sk)].", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are prioritized, especially for large tables. Avoid redundant indexes on columns that are already covered by composite indexes or are not frequently used in filtering or joining operations.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status, cd_demo_sk, cd_education_status), store(s_store_sk), customer_address(ca_address_sk, ca_state), date_dim(d_month_seq, d_date_sk), item(i_brand, i_class)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or high redundancy, especially when single-column indexes on high cardinality columns are already effective. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions with high selectivity.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_demo_sk, cd_marital_status), customer_address(ca_address_sk), customer_demographics(cd_education_status), store(s_store_sk), item(i_brand), customer_address(ca_state), date_dim(d_date_sk)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and filtering conditions are prioritized over indexes on individual columns that are not frequently used in joins or filters. Specifically, prioritize indexes on columns that are used in multiple queries across the workload, such as 'date_dim.d_year', 'web_sales.ws_order_number', and 'customer_demographics.cd_demo_sk', to avoid regression.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Store_sales(ss_item_sk)]", "{rule: \"Avoid regression by ensuring indexes cover columns involved in join conditions and filters, especially for large tables. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN operations, and consider the cardinality and data type of the columns to optimize query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), store_sales(ss_item_sk), item(i_item_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid adding indexes on columns that are already part of a composite index unless the additional index significantly improves query performance. Prioritize composite indexes that cover multiple columns used together in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_address(ca_address_sk), customer_demographics(cd_demo_sk), reason(r_reason_desc), store(s_store_sk), date_dim(d_date_sk), date_dim(d_month_seq), item(i_brand)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOINs and WHERE clauses with high cardinality, especially those involved in filtering large datasets.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status, cd_education_status), store(s_store_sk), date_dim(d_date_sk, d_month_seq), web_sales(ws_order_number, ws_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_item_sk, i_brand, i_class), store_sales(ss_item_sk), customer_address(ca_state)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or low selectivity, such as 'cd_marital_status' and 'cd_education_status', unless they are frequently used together in WHERE clauses. Instead, prioritize single-column indexes on foreign keys and columns used in JOIN conditions, such as 'cd_demo_sk', 'd_year', and 'ws_order_number', to improve query performance.\"}"], ["train_workload_random_20_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_month_seq), item(i_item_sk), store_sales(ss_item_sk), item(i_brand), customer_demographics(cd_education_status), item(i_class), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not part of the filtering conditions in the workload. Focus on indexing columns that are frequently used in WHERE clauses and join conditions with high selectivity.\"}"], ["train_workload_random_20_3q", " [customer_address(ca_address_sk), date_dim(d_year, d_date_sk), customer_demographics(cd_demo_sk, cd_marital_status)]", " [customer_address(ca_address_sk), customer_demographics(cd_marital_status), date_dim(d_year, d_date_sk), item(i_item_sk), store(s_store_sk)]", "{rule: \"Avoid adding indexes on columns that are not directly involved in filtering or joining conditions in the workload queries, especially if they are not part of the improvement index set. Focus on columns that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters are prioritized over those used in group by or order by clauses. Additionally, avoid multi-column indexes on columns with high cardinality unless they are frequently queried together in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [customer_address(ca_address_sk), date_dim(d_year), customer_demographics(cd_marital_status, cd_education_status), web_sales(ws_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are maintained. Avoid replacing composite indexes with single-column indexes if the composite index covers multiple filtering conditions or join conditions in the workload.\"}"], ["train_workload_random_20_3q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_year), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_order_number)]", " [store(s_store_sk), date_dim(d_date_sk, d_month_seq), customer_address(ca_address_sk), web_returns(wr_order_number), web_sales(ws_order_number)]", "{rule: \"Ensure indexes cover columns used in join conditions and filters, especially for large tables. Prioritize indexes on columns with high cardinality and those frequently used in WHERE clauses or JOIN operations. Avoid redundant indexes on columns already covered by composite indexes.\"}"]], "train_workload_random_27_9q": [["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Prioritize composite indexes over single-column indexes when the workload shows repeated patterns of multi-column usage.\"}"], ["train_workload_random_27_9q", " [Date_dim(d_date_sk, d_date), Customer_address(ca_gmt_offset), Item(i_category), Household_demographics(hd_buy_potential)]", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'd_year' in 'date_dim' and 'c_customer_sk' in 'customer', as they may lead to performance regressions. Instead, focus on indexing columns that are frequently used in join conditions and have higher selectivity, such as 'd_date_sk' in 'date_dim' and 'i_item_sk' in 'item'.\"}"], ["train_workload_random_27_9q", "[date_dim(d_date_sk, d_week_seq, d_date, d_year, d_dom), item(i_item_id), customer(c_customer_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), warehouse(w_warehouse_sk), store_sales(ss_ticket_number, ss_customer_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for high cardinality columns and those frequently used in WHERE clauses. Prioritize indexes that support the most complex queries involving multiple joins and aggregations, such as those involving date ranges and item categories. Avoid redundant indexes on columns already covered by composite indexes that include other frequently queried columns.\"}"], ["train_workload_random_27_9q", " [store(s_store_sk), customer_address(ca_address_sk), item(i_item_id, i_color)]", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently joined across multiple tables, as these columns are likely to be involved in complex join operations and may not benefit from additional indexing. Instead, focus on indexing columns that are used in filtering conditions or aggregations, especially those with high cardinality.\"}"], ["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Prioritize composite indexes over single-column indexes when the workload shows frequent multi-column access patterns.\"}"], ["train_workload_random_27_9q", "[date_dim(d_date_sk, d_week_seq, d_date, d_year, d_dom), item(i_item_id), customer(c_customer_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), warehouse(w_warehouse_sk), store_sales(ss_ticket_number, ss_customer_sk)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{rule: \"Ensure that indexes on date columns are composite and include related columns used in joins or filters, such as date_dim(d_date_sk, d_week_seq, d_date, d_year) instead of separate indexes on individual date columns like date_dim(d_date) and date_dim(d_week_seq). This helps optimize queries that filter or join on multiple date-related columns.\"}"], ["train_workload_random_27_9q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used in join conditions across multiple queries, especially when these columns are part of large tables. Instead, focus on single-column indexes for date and foreign key columns that are consistently used in filtering and joining operations.\"}"], ["train_workload_random_27_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Avoid using indexes on columns with low cardinality or columns that are frequently used in range queries or joins with other tables, as they may lead to performance regressions. Instead, prioritize indexing columns that are frequently used in equality conditions and have high cardinality, such as primary keys or unique identifiers.\"}"], ["train_workload_random_27_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used across multiple queries, especially those involved in filtering or joining operations.\"}"], ["train_workload_random_27_9q", " [store(s_store_sk), customer_address(ca_address_sk), item(i_item_id, i_color)]", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or primary keys unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, especially if they are involved in multiple queries across different tables.\"}"], ["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in the workload, especially when multiple columns from the same table are involved in joins or filters. Avoid relying solely on single-column indexes when the workload involves complex queries with multiple conditions on the same table.\"}"], ["train_workload_random_27_9q", " [store(s_store_sk), customer_address(ca_address_sk), item(i_item_id, i_color)]", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables unless they are part of a composite index that optimizes the specific join pattern. Prioritize indexing columns that are used in filtering conditions and have high cardinality, especially if they are used in WHERE clauses or subqueries.\"}"], ["train_workload_random_27_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in range queries or join conditions. Instead, prioritize indexing columns that are used in equality conditions and have high cardinality, especially if they are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_27_9q", "[date_dim(d_date_sk, d_week_seq, d_date, d_year, d_dom), item(i_item_id), customer(c_customer_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), warehouse(w_warehouse_sk), store_sales(ss_ticket_number, ss_customer_sk)]", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially those involving large tables. Avoid removing indexes that support multiple queries or complex joins.\"}"], ["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple queries, especially when they involve date dimensions and item identifiers. Prioritize composite indexes over single-column indexes when multiple columns are consistently queried together.\"}"], ["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in the workload, especially when multiple columns from the same table are involved in joins or filters. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple joins and filters on the same set of columns.\"}"], ["train_workload_random_27_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes that include columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid indexes that only cover single columns unless they are heavily filtered or joined independently.\"}"], ["train_workload_random_27_9q", "[date_dim(d_date_sk, d_week_seq, d_date, d_year, d_dom), item(i_item_id), customer(c_customer_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), warehouse(w_warehouse_sk), store_sales(ss_ticket_number, ss_customer_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Ensure that indexes cover the join and filter conditions used in the workload queries. Avoid creating indexes on columns that are not used in join or filter conditions, as seen in the regression index where 'Customer_address(ca_gmt_offset)' and 'Item(i_category, i_color)' are indexed but not used in joins or filters.\"}"], ["train_workload_random_27_9q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating multi-column indexes on columns that are frequently used individually in join conditions across multiple queries. Instead, focus on single-column indexes for columns that are consistently used in join conditions, especially for large tables.\"}"], ["train_workload_random_27_9q", " [date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), item(i_item_id, i_item_sk), catalog_sales(cs_sold_date_sk)]", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, as they may lead to regression by increasing the complexity and overhead of maintaining the indexes. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, such as date columns and foreign keys that are directly involved in filtering operations.\"}"], ["train_workload_random_27_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{rule: \"Ensure indexes on foreign key columns and columns frequently used in WHERE clauses, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_27_9q", " [date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), item(i_item_id, i_item_sk), catalog_sales(cs_sold_date_sk)]", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{rule: \"Avoid using indexes on columns with high cardinality and frequent range queries, such as date_dim(d_week_seq) and date_dim(d_year). Instead, prioritize indexes on columns that are frequently used in join conditions and have lower cardinality, such as item(i_item_id, i_item_sk) and catalog_sales(cs_sold_date_sk).\"}"], ["train_workload_random_27_9q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating indexes on columns with low cardinality or high selectivity, such as 'cd_marital_status', 'ca_gmt_offset', and 'hd_buy_potential', as they may not significantly improve query performance and can lead to regression. Instead, focus on indexing columns that are frequently used in joins and have higher cardinality, like 'cs_sold_date_sk' and 'ws_sold_date_sk'.\"}"], ["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple tables, especially when dealing with large datasets. Prioritize composite indexes that cover multiple columns used together in queries, such as date and item identifiers, to optimize query performance and prevent regressions.\"}"], ["train_workload_random_27_9q", " [Date_dim(d_date_sk, d_date), Customer_address(ca_gmt_offset), Item(i_category), Household_demographics(hd_buy_potential)]", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the columns are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, as well as columns that are used in aggregation functions.\"}"], ["train_workload_random_27_9q", " [store(s_store_sk), customer_address(ca_address_sk), item(i_item_id, i_color)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join involves large tables. Instead, focus on indexing columns that are used in WHERE clauses or as foreign keys to improve query performance.\"}"], ["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple tables are involved in the queries. Prioritize indexes on columns that are part of WHERE clauses with specific conditions, such as date ranges or specific values, and consider the use of composite indexes for columns that are often queried together.\"}"], ["train_workload_random_27_9q", " [date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), item(i_item_id, i_item_sk), catalog_sales(cs_sold_date_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating indexes on columns with low cardinality or that are not used in join or filter conditions frequently, as seen with 'Customer_demographics(cd_marital_status)' and 'Household_demographics(hd_buy_potential)'. Focus on indexing columns that are frequently used in joins and filters, such as 'date_dim(d_date_sk)', 'customer_address(ca_gmt_offset)', and 'item(i_item_sk)'.\"}"], ["train_workload_random_27_9q", " [Date_dim(d_date_sk, d_date), Customer_address(ca_gmt_offset), Item(i_category), Household_demographics(hd_buy_potential)]", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{\"rule\": \"Avoid creating indexes that include multiple columns with high cardinality or that are not frequently used together in query filters. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high selectivity. Additionally, ensure that indexes are aligned with the most common query patterns and avoid redundant indexes that do not provide additional performance benefits.\"}"], ["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple tables, especially when they are part of complex queries with subqueries and aggregations. Prioritize composite indexes over single-column indexes when the workload involves multiple conditions on the same set of columns.\"}"], ["train_workload_random_27_9q", "[date_dim(d_date_sk, d_week_seq, d_date, d_year, d_dom), item(i_item_id), customer(c_customer_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), warehouse(w_warehouse_sk), store_sales(ss_ticket_number, ss_customer_sk)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{rule: \"Avoid creating separate indexes on individual columns that are frequently used together in join conditions or filters. Instead, create composite indexes that cover these columns together to improve query performance and prevent regression.\"}"], ["train_workload_random_27_9q", " [date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), item(i_item_id, i_item_sk), catalog_sales(cs_sold_date_sk)]", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date_dim(d_year) and date_dim(d_week_seq), unless they are frequently used in WHERE clauses with equality conditions. Instead, focus on indexing columns that are frequently joined or filtered with high selectivity, such as item(i_item_id, i_item_sk) and catalog_sales(cs_sold_date_sk).\"}"], ["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are involved in JOIN operations and have high cardinality, such as primary keys or foreign keys, and columns that are frequently filtered in WHERE clauses.\"}"], ["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when multiple tables are involved in the query. Prioritize composite indexes over single-column indexes when the workload involves complex joins and filters on multiple columns.\"}"], ["train_workload_random_27_9q", " [Date_dim(d_date_sk, d_date), Customer_address(ca_gmt_offset), Item(i_category), Household_demographics(hd_buy_potential)]", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, as these can significantly improve query performance.\"}"], ["train_workload_random_27_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained. Avoid removing indexes on columns that are used in WHERE clauses with high cardinality or are frequently used in JOIN operations across large tables.\"}"], ["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid using single-column indexes on columns that are often used together in queries, as this can lead to regressions in query performance.\"}"], ["train_workload_random_27_9q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are involved in filtering large datasets, such as date columns in sales tables, to improve query performance.\"}"], ["train_workload_random_27_9q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently joined across multiple tables, as they may lead to unnecessary overhead and regression in query performance. Instead, focus on indexing columns that are directly filtered or aggregated in the workload queries.\"}"], ["train_workload_random_27_9q", " [Date_dim(d_date_sk, d_date), Customer_address(ca_gmt_offset), Item(i_category), Household_demographics(hd_buy_potential)]", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, such as date columns or columns with specific categories or attributes.\"}"], ["train_workload_random_27_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{rule: \"Avoid using indexes on columns with high cardinality and frequent updates, such as date columns, unless they are part of a composite index that significantly improves query performance. Prioritize indexing foreign key columns and columns frequently used in joins or filters.\"}"], ["train_workload_random_27_9q", "[date_dim(d_date_sk, d_week_seq, d_date, d_year, d_dom), item(i_item_id), customer(c_customer_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), warehouse(w_warehouse_sk), store_sales(ss_ticket_number, ss_customer_sk)]", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure indexes cover all columns involved in join conditions and filters, especially for tables with high row counts. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_27_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Ensure indexes are created on columns frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid creating indexes on columns with low cardinality or those used in less frequent conditions.\"}"], ["train_workload_random_27_9q", " [store(s_store_sk), customer_address(ca_address_sk), item(i_item_id, i_color)]", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently joined with other tables, as this can lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are frequently filtered or aggregated in queries, and ensure that the indexes align with the query patterns in the workload.\"}"], ["train_workload_random_27_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date_dim(d_date) and item(i_color), as they may lead to performance regressions. Instead, focus on indexing columns that are frequently used in join conditions and have high selectivity, such as foreign keys and primary keys.\"}"], ["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in the workload, especially when multiple columns from the same table are involved in joins or filters. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple joins and filters on the same set of columns.\"}"], ["train_workload_random_27_9q", "[date_dim(d_date_sk, d_week_seq, d_date, d_year, d_dom), item(i_item_id), customer(c_customer_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), warehouse(w_warehouse_sk), store_sales(ss_ticket_number, ss_customer_sk)]", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure that indexes cover all join and filter columns used in the workload queries. Avoid removing indexes on columns that are frequently used in joins or filters, such as 'i_item_sk' in 'item' and 'ss_ticket_number' in 'store_sales', as this can lead to performance regressions.\"}"], ["train_workload_random_27_9q", "[date_dim(d_date_sk, d_week_seq, d_date, d_year, d_dom), item(i_item_id), customer(c_customer_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), warehouse(w_warehouse_sk), store_sales(ss_ticket_number, ss_customer_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across large tables. Instead, focus on indexing columns that are used in WHERE clauses with high cardinality and columns that are frequently used in join conditions with smaller tables.\"}"], ["train_workload_random_27_9q", " [store(s_store_sk), customer_address(ca_address_sk), item(i_item_id, i_color)]", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables unless they are part of a composite index that optimizes the specific query patterns. Instead, focus on indexing columns that are used in filtering conditions or are part of smaller tables to improve query performance.\"}"], ["train_workload_random_27_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing the overhead of maintaining the index. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, which can significantly improve query performance.\"}"], ["train_workload_random_27_9q", " [Date_dim(d_date_sk, d_date), Customer_address(ca_gmt_offset), Item(i_category), Household_demographics(hd_buy_potential)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, such as date columns and categorical attributes.\"}"], ["train_workload_random_27_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent joins across multiple tables, especially when the workload involves complex subqueries and aggregations. Instead, focus on indexing columns that are frequently used in WHERE clauses and have lower cardinality, as well as columns involved in direct joins between two tables.\"}"], ["train_workload_random_27_9q", " [date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), item(i_item_id, i_item_sk), catalog_sales(cs_sold_date_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, such as date keys and item identifiers, to improve query performance.\"}"], ["train_workload_random_27_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or that are frequently used in range queries, as they can lead to performance regressions. Instead, prefer single-column indexes on such columns or ensure that composite indexes are aligned with the query patterns that benefit from them.\"}"], ["train_workload_random_27_9q", " [store(s_store_sk), customer_address(ca_address_sk), item(i_item_id, i_color)]", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple queries, as they may lead to redundant indexing and increased maintenance overhead without significant performance benefits.\"}"], ["train_workload_random_27_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing indexes on primary key columns or columns frequently used in WHERE clauses, as this can lead to performance regressions.\"}"], ["train_workload_random_27_9q", " [Date_dim(d_date_sk, d_date), Customer_address(ca_gmt_offset), Item(i_category), Household_demographics(hd_buy_potential)]", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the columns are part of a composite key or are used in range queries. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, such as unique identifiers or columns with a wide range of values.\"}"], ["train_workload_random_27_9q", "[date_dim(d_date_sk, d_week_seq, d_date, d_year, d_dom), item(i_item_id), customer(c_customer_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), warehouse(w_warehouse_sk), store_sales(ss_ticket_number, ss_customer_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and consider composite indexes for columns often queried together. Avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_27_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns already covered by single-column indexes unless there is a specific query pattern that benefits from the composite index. Prioritize single-column indexes on frequently filtered or joined columns to prevent regression.\"}"], ["train_workload_random_27_9q", "[date_dim(d_date_sk, d_week_seq, d_date, d_year, d_dom), item(i_item_id), customer(c_customer_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), warehouse(w_warehouse_sk), store_sales(ss_ticket_number, ss_customer_sk)]", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are frequently used in join conditions across multiple queries, as this can lead to redundant indexing and potential performance regressions. Focus on indexing columns that are used in filtering conditions and are not already indexed.\"}"], ["train_workload_random_27_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables, to prevent regression. Prioritize indexing on columns frequently used in WHERE clauses and join conditions across multiple queries.\"}"], ["train_workload_random_27_9q", " [date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), item(i_item_id, i_item_sk), catalog_sales(cs_sold_date_sk)]", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'd_week_seq' and 'd_year' in 'date_dim', unless they are frequently used in WHERE clauses with equality conditions. Instead, focus on indexing columns that are frequently joined or filtered with high selectivity, such as 'd_date_sk' and 'i_item_sk'.\"}"], ["train_workload_random_27_9q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating indexes on columns with low cardinality or high selectivity, such as 'cd_marital_status', 'ca_gmt_offset', and 'hd_buy_potential', as they may not significantly improve query performance and can lead to regression. Instead, focus on indexing columns that are frequently used in join conditions and have higher cardinality, like 'cs_sold_date_sk' and 'ws_sold_date_sk'.\"}"], ["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in the workload, especially when multiple columns are involved in the WHERE clause or JOIN conditions. Avoid using single-column indexes when the workload involves complex queries with multiple conditions on the same table.\"}"], ["train_workload_random_27_9q", "[date_dim(d_date_sk, d_week_seq, d_date, d_year, d_dom), item(i_item_id), customer(c_customer_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), warehouse(w_warehouse_sk), store_sales(ss_ticket_number, ss_customer_sk)]", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used together in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses, GROUP BY, and ORDER BY operations, especially if they are not part of existing composite indexes.\"}"], ["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in combination, especially when dealing with large tables. Prioritize composite indexes over single-column indexes when queries involve multiple conditions on the same table, such as date and item identifiers.\"}"], ["train_workload_random_27_9q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used in join conditions across multiple queries, especially when the columns are part of large tables. Instead, focus on single-column indexes for columns that are used in WHERE clauses or as foreign keys in join conditions to improve query performance.\"}"], ["train_workload_random_27_9q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, especially in large tables.\"}"], ["train_workload_random_27_9q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating multi-column indexes on columns that are already indexed individually and frequently used in join conditions, as this can lead to regression by increasing index maintenance overhead and not providing additional query performance benefits.\"}"], ["train_workload_random_27_9q", " [Date_dim(d_date_sk, d_date), Customer_address(ca_gmt_offset), Item(i_category), Household_demographics(hd_buy_potential)]", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, as they may lead to regression by increasing the complexity and overhead of maintaining the indexes. Instead, focus on indexing columns that are used in filtering conditions and have high selectivity, such as date ranges or specific categories.\"}"], ["train_workload_random_27_9q", " [store(s_store_sk), customer_address(ca_address_sk), item(i_item_id, i_color)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{\"rule\": \"Avoid creating indexes on columns that are already part of a join condition or are frequently used in join operations across multiple queries, as this can lead to regression by increasing the overhead of maintaining the index without significant performance gain. Instead, focus on indexing columns that are used in WHERE clauses or as foreign keys, especially if they are frequently filtered or sorted on, such as 'store(s_store_sk)', 'customer_address(ca_address_sk)', and 'item(i_item_id, i_color)'.\"}"], ["train_workload_random_27_9q", " [Date_dim(d_date_sk, d_date), Customer_address(ca_gmt_offset), Item(i_category), Household_demographics(hd_buy_potential)]", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent joins across multiple tables, especially when the workload involves complex subqueries and aggregations. Instead, focus on indexing columns that are frequently filtered or grouped by, and have lower cardinality, to improve query performance.\"}"], ["train_workload_random_27_9q", "[date_dim(d_date_sk, d_week_seq, d_date, d_year, d_dom), item(i_item_id), customer(c_customer_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), warehouse(w_warehouse_sk), store_sales(ss_ticket_number, ss_customer_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and ensure they align with the workload's most common query patterns. Avoid redundant indexes that do not significantly improve query performance.\"}"], ["train_workload_random_27_9q", " [date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), item(i_item_id, i_item_sk), catalog_sales(cs_sold_date_sk)]", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid adding indexes that include columns not used in WHERE, JOIN, or GROUP BY clauses of the workload queries, as they may lead to regression by increasing index maintenance overhead without improving query performance.\"}"], ["train_workload_random_27_9q", " [Date_dim(d_date_sk, d_date), Customer_address(ca_gmt_offset), Item(i_category), Household_demographics(hd_buy_potential)]", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently used in WHERE clauses or JOIN conditions. Focus on indexing columns that are used in filtering, joining, or sorting operations, especially those with high cardinality or those that are part of foreign key relationships.\"}"], ["train_workload_random_27_9q", "[date_dim(d_date_sk, d_week_seq, d_date, d_year, d_dom), item(i_item_id), customer(c_customer_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), warehouse(w_warehouse_sk), store_sales(ss_ticket_number, ss_customer_sk)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{rule: \"Ensure indexes cover both filtering and joining conditions. Avoid redundant indexes on columns already covered by composite indexes. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_27_9q", "[date_dim(d_date_sk, d_week_seq, d_date, d_year, d_dom), item(i_item_id), customer(c_customer_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), warehouse(w_warehouse_sk), store_sales(ss_ticket_number, ss_customer_sk)]", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{\"rule\": \"Ensure that indexes cover all join and filter columns used in the workload queries. Avoid removing indexes on columns that are frequently used in joins or filters, such as 'i_item_sk' and 'ss_ticket_number', which are critical for query performance. Additionally, consider the inclusion of columns that are used in WHERE clauses or as part of complex expressions, like 'd_date_sk' and 'd_year', to prevent regressions.\"}"], ["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for columns frequently used in WHERE clauses and JOIN operations. Prioritize composite indexes on columns involved in multi-table joins and filters, such as date keys and item identifiers, to optimize query performance.\"}"], ["train_workload_random_27_9q", " [Date_dim(d_date_sk, d_date), Customer_address(ca_gmt_offset), Item(i_category), Household_demographics(hd_buy_potential)]", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes that include multiple columns from the same table unless they are frequently queried together in the workload. Focus on indexing columns that are used in join conditions and where clauses across different tables.\"}"], ["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in the workload, especially when multiple columns from the same table are involved in joins or filters. Avoid using single-column indexes when composite indexes can better optimize query performance.\"}"], ["train_workload_random_27_9q", " [date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), item(i_item_id, i_item_sk), catalog_sales(cs_sold_date_sk)]", " [item(i_item_id), date_dim(d_date), date_dim(d_week_seq), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join involves large tables. Instead, focus on indexing columns that are used in filtering conditions and have high selectivity.\"}"], ["train_workload_random_27_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_item_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk, d_week_seq), item(i_item_sk), customer(c_customer_sk), date_dim(d_year), store(s_store_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in WHERE clauses, especially when they involve joins across multiple tables. Prioritize indexes on columns with high cardinality and those involved in range queries or aggregations. Avoid relying solely on single-column indexes when queries involve multiple conditions or joins.\"}"], ["train_workload_random_27_9q", " [Date_dim(d_date_sk, d_date), Customer_address(ca_gmt_offset), Item(i_category), Household_demographics(hd_buy_potential)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset), Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Item(i_category, i_color), Household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple tables, as they may lead to regression in query performance. Instead, focus on indexing columns that are used in filtering conditions with high cardinality and are critical for query optimization.\"}"], ["train_workload_random_27_9q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually and are frequently used in join conditions across multiple queries. Instead, focus on indexing columns that are used in filtering conditions and are not already indexed, especially in large tables.\"}"], ["train_workload_random_27_9q", " [catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", "[item(i_item_sk), item(i_item_id), date_dim(d_date), customer_address(ca_address_sk), date_dim(d_week_seq), date_dim(d_moy), date_dim(d_date_sk), item(i_color), date_dim(d_dom), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), store_sales(ss_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Focus on indexing columns that are used in filtering conditions and have high cardinality to improve query performance without redundancy.\"}"]], "train_workload_random_36_7q": [["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid composite indexes that include columns not frequently used together in the workload. Prioritize single-column indexes on columns that appear frequently in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize composite indexes that include multiple columns used together in joins and filters, such as date_dim(d_date_sk, d_date) and store_sales(ss_customer_sk, ss_item_sk). Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables. Avoid redundant indexes that do not contribute to query performance improvement.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid indexing columns that are primarily used in aggregation or are part of smaller tables unless they are critical for query performance.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid composite indexes on columns with high cardinality and frequent use in WHERE clauses, especially when they are used in conjunction with other columns in JOIN operations. Prioritize single-column indexes on foreign keys and columns frequently used in WHERE clauses for filtering.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "```json\n{\n  \"rule\": \"Avoid creating composite indexes with columns that are already indexed individually unless there is a specific query pattern that benefits from the composite index. Ensure that indexes on frequently joined columns and columns used in WHERE clauses are maintained. Remove redundant composite indexes that do not align with the workload's query patterns.\"\n}\n```"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Ensure that all necessary single-column indexes from the improvement set are included in the regression set, especially for columns frequently used in WHERE clauses and JOIN conditions, such as 'ws_item_sk', 'cs_sold_date_sk', 'ws_order_number', and 'ss_sold_date_sk'. Avoid multi-column indexes that do not match the query patterns.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "```json\n{\n    \"rule\": \"Avoid creating composite indexes with columns that are already indexed individually unless there is a clear benefit in query performance. Ensure that indexes on frequently joined columns and columns used in WHERE clauses are maintained. Remove redundant composite indexes that include columns already covered by other indexes.\"\n}\n```"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and avoid removing indexes that are used in multiple queries across the workload.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in queries, especially for large tables. Avoid removing indexes that are used in multiple queries or are part of composite keys that improve query performance.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid over-indexing columns that are primarily used in simple filters or are part of smaller tables, as this can lead to unnecessary overhead.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{\"rule\": \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Ensure that indexes are aligned with the query patterns, focusing on single-column indexes for frequently filtered columns and avoiding unnecessary composite indexes that may lead to regression.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Ensure that all foreign key columns used in join conditions are indexed, especially in large tables, to prevent regressions. Additionally, maintain indexes on columns frequently used in WHERE clauses and subqueries to optimize filtering and existence checks.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid composite indexes that include columns not frequently used together in the workload. Prioritize single-column indexes on columns that appear frequently in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained, especially for large tables and those involved in complex queries. Avoid removing indexes on columns that are used in WHERE clauses with range conditions or in subqueries, as these are critical for query performance.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns in subqueries are maintained. Avoid removing indexes on columns that are part of complex queries with multiple joins and subqueries, especially when they are used in WHERE clauses or as part of EXISTS/NOT EXISTS conditions.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid over-indexing columns that are primarily used in filters with low cardinality or are part of small tables, as this can lead to regression in performance.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns already covered by single-column indexes unless there is a clear benefit in query performance. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or used in range queries.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless they are frequently queried together in the workload. Prioritize indexing columns that are used in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries, especially for large tables. Avoid removing indexes that are used in multiple queries or are part of composite keys that optimize join operations.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless they are frequently queried together in the workload. Prioritize indexing columns that are used in WHERE clauses and JOIN conditions over those used in SELECT or ORDER BY clauses.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are part of smaller tables or have low cardinality, as this can lead to unnecessary overhead and regression in performance. Instead, prioritize indexing columns that are used in filtering conditions and have high cardinality, particularly in larger tables.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for columns involved in date range filters and high cardinality joins. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables. Prioritize indexing columns involved in date range filters and joins across multiple tables, as these are frequently used in the workload. Avoid removing indexes that are used in multiple queries or are part of complex subqueries and joins.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid composite indexes that combine columns with high cardinality and columns with low cardinality, especially when the low cardinality column is not frequently used in filtering conditions. Prioritize single-column indexes on columns that are frequently used in WHERE clauses and have high cardinality.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially if they are used in multiple queries across the workload.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Avoid multi-column indexes on columns with different data types or usage patterns, especially when one column is frequently used in joins or filters independently. Prioritize single-column indexes for columns that are consistently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Prioritize indexing columns that are frequently used in JOIN conditions and WHERE clauses, especially those involving large tables or high cardinality columns. Avoid indexing columns with low cardinality or those primarily used in ORDER BY clauses unless they are also heavily involved in filtering or joining operations.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure indexes cover both join and filter conditions. Avoid indexes that only cover one aspect, as seen in regression indexes where some only cover date or item keys without considering other frequently joined or filtered columns.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for large tables. Prioritize composite indexes that include columns frequently used together in WHERE clauses and JOIN conditions. Avoid redundant single-column indexes when composite indexes can serve the same purpose more efficiently.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions over columns used in ORDER BY or SELECT clauses.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or columns that are frequently used in range queries, such as date columns. Instead, focus on single-column indexes for foreign key relationships and columns with high cardinality that are frequently used in join conditions.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses, especially for large tables, and avoid removing indexes on columns frequently used in JOIN conditions or subqueries.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure that all necessary join columns and frequently filtered columns are indexed, especially those involved in subqueries and complex conditions. Avoid removing indexes on columns that are used in multiple queries across different tables, such as date columns and foreign keys, to prevent regression.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in JOIN conditions and WHERE clauses, especially those involving large tables. Avoid over-indexing columns that are primarily used for filtering on small tables or columns that are not directly involved in JOIN operations.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or columns that are frequently used in range queries, as they may lead to regression in query performance. Instead, focus on single-column indexes for foreign key columns and columns frequently used in join conditions.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless they are frequently queried together in the workload. Prioritize indexing columns that are used in WHERE clauses and JOIN conditions over those used in SELECT or ORDER BY clauses.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes that cover multiple columns used together in joins or filters, such as (ws_item_sk, ws_order_number, ws_ship_date_sk) for web_sales, to prevent regressions.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless they are frequently queried together in the workload. Prioritize indexing columns that are used in join conditions and filters, especially those with high cardinality or those involved in frequent queries.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions and frequently filtered columns in WHERE clauses are maintained. Avoid removing indexes on columns that are part of multi-column indexes used in the workload, especially when they are used in conjunction with other indexed columns.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in both join and filter conditions, especially for large tables. Prioritize indexes on columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for large tables. Prioritize composite indexes that include columns frequently used together in WHERE clauses and JOIN conditions. Avoid redundant single-column indexes when composite indexes can serve the same purpose more efficiently.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid composite indexes that combine columns with high cardinality and columns with low cardinality, especially when the low cardinality column is not frequently used in filtering conditions. Prioritize single-column indexes on columns that are frequently used in WHERE clauses and have high cardinality.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear query pattern that benefits from the composite index. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or columns that are frequently used in range queries, as they may lead to regressions in query performance. Instead, focus on single-column indexes for columns that are frequently used in WHERE clauses and have high cardinality.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid removing indexes that are part of composite indexes covering multiple conditions.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in both join and filter conditions across multiple queries, especially on large tables.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Avoid redundant indexes on columns already covered by composite indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially for large tables.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid composite indexes that combine columns with high cardinality and columns with low cardinality, especially when the low cardinality column is not frequently used in filtering conditions. Prioritize single-column indexes on frequently filtered columns with high cardinality.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless there is a clear benefit in query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those involving large tables. Ensure that indexes on date columns are optimized for range queries.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Avoid creating composite indexes on columns with low cardinality or columns that are frequently used in range queries, such as date columns. Instead, prioritize single-column indexes on foreign key columns and columns involved in join conditions.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or that are frequently used in range queries, as they can lead to performance regressions. Instead, focus on single-column indexes for such columns, especially when they are used in join conditions or as foreign keys.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially for high cardinality columns and large tables. Avoid removing indexes on columns frequently used in these operations, such as date_dim(d_date_sk) and store(s_store_sk), which are critical for filtering and joining in the workload.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across multiple queries, especially when they involve large tables or are frequently used in the workload.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid over-indexing columns that are primarily used in aggregation or sorting unless they are also heavily involved in joins or filters.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "```json\n{\n    \"rule\": \"Avoid creating composite indexes that include columns already covered by existing single-column indexes unless there is a clear benefit in query performance. Ensure that indexes on frequently filtered or joined columns are maintained, and avoid redundant indexes that do not contribute to query optimization.\"\n}\n```"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless there is a clear benefit in query performance. Ensure that indexes on frequently joined columns and those used in WHERE clauses are maintained, and avoid redundant indexes that do not align with the workload's query patterns.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize composite indexes that include both join keys and frequently filtered columns, especially for large tables. Avoid indexes that only partially cover query conditions, as they may lead to regressions.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "```json\n{\n    \"rule\": \"Avoid creating composite indexes with columns that are already indexed individually unless there is a clear benefit in query performance. Ensure that indexes on frequently joined columns and columns used in WHERE clauses are maintained. Remove redundant composite indexes that do not align with the workload's query patterns.\"\n}\n```"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained, especially for large tables and those involved in complex queries. Avoid removing indexes on columns that are used in WHERE clauses with range conditions or in subqueries, as these can significantly impact query performance.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure that indexes cover both join and filter conditions in queries. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together. Prioritize maintaining indexes on columns that are used in both join and filter conditions, as seen with the 'web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk)' index in the improvement selection, which covers both join and filter conditions effectively.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as date_dim(d_date_sk) and web_sales(ws_item_sk). Avoid removing indexes that are used in multiple queries or are part of complex subqueries and EXISTS clauses.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions, as seen in the regression index on web_sales(ws_item_sk, ws_order_number, ws_ext_discount_amt). Instead, focus on single-column indexes or composite indexes that match the query patterns, such as those in the improvement index.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include both a primary key and a non-key attribute when the primary key is already indexed separately. Instead, focus on indexing foreign keys and frequently filtered columns individually to prevent regression.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{\"rule\": \"Avoid creating composite indexes with columns that are already indexed individually, especially if the individual indexes are frequently used in the workload. This can lead to redundancy and potential regression in query performance.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes for columns frequently used together in joins and filters, such as (ws_item_sk, ws_order_number, ws_ship_date_sk) for web_sales, and (d_date, d_year) for date_dim, to prevent regression.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure that indexes cover both join and filter conditions in queries. Prioritize composite indexes that include both join keys and frequently filtered columns, especially for large tables. Avoid redundant indexes that do not align with the workload's join and filter patterns.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant single-column indexes when composite indexes can serve the same purpose.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "```json\n{\n    \"rule\": \"Avoid creating composite indexes that include columns already covered by existing single-column indexes unless there is a clear benefit in query performance. Ensure that indexes on frequently filtered or joined columns are maintained, and avoid redundant indexes that do not contribute to query optimization.\"\n}\n```"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in WHERE clauses or JOIN conditions. Instead, prioritize single-column indexes for such columns to optimize query performance.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid composite indexes that include columns not frequently used together in the workload. Prioritize single-column indexes on columns that are frequently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are part of a dimension table with a high cardinality, as this can lead to performance regressions. Instead, prioritize indexing columns that are used in filtering conditions or have high selectivity.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across multiple queries, especially when they involve large tables or are frequently used in the workload.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid redundant single-column indexes when composite indexes can serve the same purpose.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or that are frequently used in range queries, as they can lead to performance regressions. Instead, focus on single-column indexes for such columns and ensure that indexes align with the most selective predicates in the workload.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Avoid creating composite indexes on columns with high cardinality and low selectivity, especially when single-column indexes on foreign key or frequently joined columns are more beneficial for query performance.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or that are frequently used in range queries, as they may lead to regression in query performance. Instead, focus on single-column indexes for such columns and ensure that indexes align with the most selective predicates in the workload.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained, especially for large tables and those involved in complex queries with multiple joins and subqueries. Avoid removing indexes on columns that are used in WHERE clauses with range conditions or are part of EXISTS/NOT EXISTS subqueries.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize indexes on columns involved in date range filters and joins across large tables, such as 'date_dim(d_date_sk)' and 'web_sales(ws_sold_date_sk)'. Additionally, maintain indexes on columns frequently used in subqueries and EXISTS clauses, like 'web_sales(ws_order_number)' and 'web_returns(wr_order_number)'.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as date columns and foreign keys.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid composite indexes on columns with high cardinality and frequent use in WHERE clauses, especially when single-column indexes suffice for query optimization. Prioritize single-column indexes on foreign keys and columns frequently used in JOIN operations.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries, especially for large tables. Avoid removing indexes that are used in multiple queries or are part of composite keys that optimize join operations.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns involved in WHERE clauses and JOIN conditions over columns used in SELECT or ORDER BY clauses.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries, especially for large tables. Avoid removing indexes that are used in multiple queries or are part of composite keys that optimize join operations.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together. Prioritize maintaining indexes on columns that are used in both join and filter conditions in the workload.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid over-indexing columns that are only used in specific queries or are part of smaller tables, as this can lead to unnecessary overhead and regression in performance.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless they are frequently queried together in the workload. Prioritize indexing columns that are used in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering conditions across multiple queries.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries, especially for large tables. Avoid removing indexes that are used in multiple queries or are part of composite keys that optimize join operations.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or that are frequently used in range queries, as they can lead to performance regressions. Instead, focus on single-column indexes for such columns and ensure that indexes align with the most selective predicates in the workload.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes for columns frequently used together in joins and filters, such as (ws_item_sk, ws_order_number, ws_ship_date_sk) for web_sales, and (d_date, d_year) for date_dim, to prevent regression.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize multi-column indexes for frequently joined and filtered columns, especially in large tables.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on frequently filtered or joined columns, especially those with high cardinality.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or columns that are frequently used in range queries, as they may lead to performance regressions. Instead, focus on single-column indexes for such columns and ensure that composite indexes are only created for columns that are frequently queried together with equality conditions.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Ensure that all necessary columns used in WHERE clauses and JOIN conditions are indexed, especially those frequently used in subqueries and EXISTS clauses. Avoid removing indexes on columns that are part of composite keys or are heavily used in filtering and joining operations, such as date_dim(d_date_sk) and web_sales(ws_item_sk).\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "```json\n{\n    \"rule\": \"Avoid creating composite indexes with columns that are already indexed individually unless there is a clear benefit in query performance. Ensure that indexes on frequently joined columns are maintained, and avoid redundant indexes on columns that are not used in filtering or joining conditions.\"\n}\n```"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Avoid replacing indexes on high cardinality columns with indexes on low cardinality columns, especially when the high cardinality columns are frequently used in join conditions or range queries.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating composite indexes that include date columns when single-column indexes on foreign key columns are sufficient for query optimization.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Ensure that indexes on frequently joined columns and columns used in WHERE clauses with range conditions are maintained. Avoid removing indexes on columns that are used in subqueries or correlated subqueries, especially when they are part of EXISTS or NOT EXISTS conditions.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or that are frequently used in range queries, as they may lead to regression in query performance. Instead, focus on single-column indexes for such columns and ensure that indexes align with the most selective predicates in the workload.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or columns that are frequently used in equality conditions separately, as they may lead to regression in query performance. Instead, focus on single-column indexes for such columns, especially when they are used in join conditions or filters.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "```json\n{\n  \"rule\": \"Avoid creating composite indexes that include columns already covered by existing single-column indexes unless there is a clear benefit in query performance. Ensure that indexes on frequently filtered or joined columns are maintained, and avoid redundant indexes that do not contribute to query optimization.\"\n}\n```"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained, especially for large tables and those involved in complex queries. Avoid removing indexes on columns that are used in WHERE clauses with range conditions or in subqueries, as these are critical for query performance.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", " [catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure indexes cover both join and filter conditions. Avoid indexes that only cover one aspect, as seen in regression indexes where some only cover date or item keys without considering other join/filter conditions.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid over-indexing columns that are only used in specific queries or have low cardinality, as this can lead to regression in performance.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk, ws_order_number, ws_ship_date_sk), date_dim(d_date, d_year), item(i_manufact_id, i_item_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_state), store_sales(ss_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless they are frequently queried together in the workload. Prioritize indexing columns that are used in WHERE clauses and JOIN conditions over those used in ORDER BY or SELECT clauses.\"}"], ["train_workload_random_36_7q", " [web_sales(ws_item_sk), item(i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), catalog_sales(cs_item_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_bill_customer_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or frequently updated columns, as they can lead to performance regressions. Instead, focus on single-column indexes for foreign keys and columns frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_36_7q", "[web_sales(ws_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id), web_sales(ws_order_number), date_dim(d_moy), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk), catalog_sales(cs_bill_customer_sk), store_sales(ss_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)]", " [date_dim(d_date_sk, d_date), web_page(wp_web_page_sk), item(i_manufact_id), customer_address(ca_state, ca_address_sk)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or columns that are frequently used in equality conditions separately, as they may lead to regression in query performance. Instead, focus on single-column indexes for such columns, especially when they are used in join conditions or filters.\"}"]], "train_workload_random_38_9q": [["train_workload_random_38_9q", " [Store(s_store_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_buy_potential), Web_site(web_site_sk), Customer(c_customer_sk), Customer_address(ca_gmt_offset), Item(i_current_price)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid redundant indexes on columns that are already covered by other indexes or are part of smaller tables with fewer rows.\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently used in query filters or joins. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality and those that are part of large tables.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Specifically, prioritize composite indexes that include columns frequently used together in joins and filters, such as (i_item_sk, d_date_sk) for item and date_dim joins, and (cr_order_number, cs_sold_date_sk) for catalog_returns and catalog_sales joins. Avoid single-column indexes that do not fully support the query patterns.\"}"], ["train_workload_random_38_9q", " [Store(s_store_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_buy_potential), Web_site(web_site_sk), Customer(c_customer_sk), Customer_address(ca_gmt_offset), Item(i_current_price)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used individually in WHERE clauses or JOIN conditions, as they may not be as effective as single-column indexes for those specific queries.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns are maintained, while avoiding redundant indexes on columns that are already covered by existing indexes. Specifically, avoid adding indexes on columns that are already part of a composite index unless necessary for specific query patterns.\"}"], ["train_workload_random_38_9q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), store_sales(ss_item_sk)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{rule: \"Ensure that indexes on date columns are consistently applied to the primary key or surrogate key columns (e.g., d_date_sk) rather than non-key columns (e.g., d_date) to prevent regression in query performance.\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, as this can lead to redundancy and potential performance regression.\"}"], ["train_workload_random_38_9q", " [Store(s_store_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_buy_potential), Web_site(web_site_sk), Customer(c_customer_sk), Customer_address(ca_gmt_offset), Item(i_current_price)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already heavily used in join conditions across multiple queries, as they may lead to regression by increasing the overhead of maintaining the index. Instead, focus on indexing columns that are frequently filtered or aggregated, especially those with high cardinality or those involved in WHERE clauses with specific conditions.\"}"], ["train_workload_random_38_9q", " [Store(s_store_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_buy_potential), Web_site(web_site_sk), Customer(c_customer_sk), Customer_address(ca_gmt_offset), Item(i_current_price)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these are likely to be covered by existing indexes. Instead, focus on indexing columns that are used in WHERE clauses, GROUP BY, or ORDER BY operations, especially if they are not part of existing indexes.\"}"], ["train_workload_random_38_9q", " [Store(s_store_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_buy_potential), Web_site(web_site_sk), Customer(c_customer_sk), Customer_address(ca_gmt_offset), Item(i_current_price)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables or are part of foreign key relationships, as this can lead to redundant indexes and potential performance regressions. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially those with high cardinality and those involved in filtering large datasets.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{rule: \"Avoid creating redundant indexes on columns that are already part of existing indexes, especially when they are frequently used in join conditions across multiple queries. Focus on composite indexes that cover multiple columns used together in WHERE clauses or JOIN conditions to improve query performance.\"}"], ["train_workload_random_38_9q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), store_sales(ss_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, especially when the workload involves frequent joins and filters on those columns. Instead, prioritize single-column indexes that align with the join and filter conditions in the workload.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Ensure that indexes cover all join conditions and filter predicates in the workload queries. Specifically, prioritize composite indexes that include columns frequently used together in joins and filters, such as (i_item_sk, i_item_id) for the 'item' table, and ensure indexes are created for columns involved in multiple queries, like (ws_sold_date_sk) in 'web_sales' and (cr_order_number) in 'catalog_returns'.\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{\"rule\": \"Avoid creating composite indexes (I(C ...)) on columns that are already individually indexed in the improvement index selection, as this can lead to redundancy and potential performance regression.\"}"], ["train_workload_random_38_9q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), store_sales(ss_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves frequent joins on these columns. Instead, prioritize single-column indexes that align with the join conditions and filter criteria in the workload.\"}"], ["train_workload_random_38_9q", " [Store(s_store_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_buy_potential), Web_site(web_site_sk), Customer(c_customer_sk), Customer_address(ca_gmt_offset), Item(i_current_price)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid redundant indexes on columns that are already covered by other indexes or are part of smaller tables with fewer rows.\"}"], ["train_workload_random_38_9q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), store_sales(ss_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, especially when the workload involves frequent joins on these columns. Prioritize single-column indexes that align with the join conditions and filter criteria in the workload.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Ensure that all necessary indexes from the improvement set are included in the regression set, especially those on columns frequently used in joins and filters across multiple queries, such as customer.c_customer_sk, customer_address.ca_address_sk, and store_returns.sr_ticket_number.\"}"], ["train_workload_random_38_9q", " [Store(s_store_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_buy_potential), Web_site(web_site_sk), Customer(c_customer_sk), Customer_address(ca_gmt_offset), Item(i_current_price)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries. Instead, prioritize single-column indexes on foreign key columns and columns used in WHERE clauses to improve query performance.\"}"], ["train_workload_random_38_9q", " [Store(s_store_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_buy_potential), Web_site(web_site_sk), Customer(c_customer_sk), Customer_address(ca_gmt_offset), Item(i_current_price)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used individually in WHERE clauses or JOIN conditions, as they may not be as effective as single-column indexes for those specific queries.\"}"], ["train_workload_random_38_9q", " [Store(s_store_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_buy_potential), Web_site(web_site_sk), Customer(c_customer_sk), Customer_address(ca_gmt_offset), Item(i_current_price)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{rule: \"Avoid creating indexes on columns that are already heavily filtered or joined in the workload, as this can lead to redundant indexing and potential performance regression. Focus on indexing columns that are frequently used in WHERE clauses or JOIN conditions but are not already covered by existing indexes.\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed in other tables or are frequently used in joins across multiple tables. Focus on indexing columns that are used in WHERE clauses and GROUP BY operations, especially those with high cardinality and those involved in frequent joins. Prioritize indexes on columns that are used in filtering conditions and aggregations, and ensure that indexes are not duplicated across tables unless necessary for specific query optimizations.\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Ensure that all foreign key columns used in joins and filters across large tables are indexed, especially those frequently used in the workload, such as date_dim(d_date_sk), store_sales(ss_sold_date_sk), and catalog_sales(cs_sold_date_sk). Avoid removing indexes on columns that are part of frequent join conditions or filters, like date_dim(d_date_sk) and promotion(p_promo_sk).\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are not removed, especially when they are frequently used in the workload. Additionally, avoid adding redundant indexes on columns that already have a composite index covering the same query patterns.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant composite indexes when single-column indexes already exist for the same columns, especially if the workload heavily utilizes joins and filters on those columns. Prioritize composite indexes that align with the query patterns and join conditions in the workload.\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{rule: \"Ensure indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables. Prioritize indexes on date columns and foreign key columns that are repeatedly used in filtering and joining operations.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing composite indexes, especially when the composite index is more aligned with the query patterns in the workload. Focus on composite indexes that match the join and filter conditions in the queries.\"}"], ["train_workload_random_38_9q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), store_sales(ss_item_sk)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Ensure that all foreign key columns used in join conditions across the workload are indexed to prevent regressions. Specifically, check for missing indexes on date_dim(d_date_sk), promotion(p_promo_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk), and store_sales(ss_item_sk) when they are used in join conditions.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are consistently applied across all sales and returns tables to prevent regression. Specifically, maintain indexes on cs_sold_date_sk, ss_item_sk, ws_item_sk, and ws_sold_date_sk, while avoiding unnecessary indexes on columns like i_manufact_id that are not frequently used in join conditions.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes, especially when the existing indexes are composite and align with the query patterns. Prioritize composite indexes that match the join and filter conditions in the workload.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, and avoid redundant indexes on columns that are already covered by existing indexes. Prioritize indexing on columns frequently used in WHERE clauses and join conditions, especially those with high cardinality.\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially if they are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses and join conditions, and ensure that indexes are aligned with the query patterns in the workload to prevent regression.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, prioritize composite indexes that include columns frequently used together in joins and filters, such as date keys and item keys, to prevent regression in query performance.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing composite indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially for large tables with frequent joins and filters. Ensure indexes align with the workload's query patterns, focusing on columns involved in WHERE clauses, JOIN conditions, and GROUP BY operations.\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection, especially if they are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses and are not already covered by existing indexes.\"}"], ["train_workload_random_38_9q", " [Store(s_store_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_buy_potential), Web_site(web_site_sk), Customer(c_customer_sk), Customer_address(ca_gmt_offset), Item(i_current_price)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, as this can lead to regression by increasing the complexity and overhead of maintaining these indexes. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, such as primary keys or unique identifiers.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes, especially when the workload does not show significant query patterns that would benefit from the additional indexes. Focus on maintaining indexes that directly correlate with frequent join conditions and filtering criteria in the workload.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes if they don't align with query patterns.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are frequently used in join conditions across multiple queries. Prioritize indexes on columns involved in filtering and aggregation operations, especially for large tables, to optimize query performance.\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables or are part of foreign key relationships, as this can lead to redundant indexes and potential performance regressions. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially those with high cardinality and those involved in filtering large datasets.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{rule: \"Ensure indexes on columns involved in join conditions and filtering criteria, especially for large tables. Prioritize composite indexes for columns frequently used together in queries, and avoid redundant indexes on columns already covered by existing composite indexes.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes, especially when the existing indexes are composite and cover multiple columns used together in queries. Focus on composite indexes that match the query patterns and join conditions in the workload.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes that include columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes if they don't align with the workload's join patterns.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes, especially when the workload does not show significant query patterns that would benefit from the additional indexes. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, and ensure that indexes are not overlapping unnecessarily.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes, especially when the workload does not show significant query patterns that would benefit from the additional indexes. Focus on columns frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially for large tables. Remove indexes that are not used in the workload or are covered by composite indexes.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in joins are consistently applied across all sales and returns tables to prevent regression. Specifically, maintain indexes on cs_sold_date_sk, ss_item_sk, ws_item_sk, and ws_sold_date_sk, while avoiding unnecessary indexes on columns like i_manufact_id that are not frequently used in join conditions.\"}"], ["train_workload_random_38_9q", " [Store(s_store_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_buy_potential), Web_site(web_site_sk), Customer(c_customer_sk), Customer_address(ca_gmt_offset), Item(i_current_price)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Ensure indexes are selected on columns frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations across multiple queries. Prioritize indexing columns that are part of foreign key relationships and those involved in filtering large datasets. Avoid redundant indexes on columns already covered by composite indexes or those with low cardinality unless they are critical for specific query performance.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes, especially when the workload does not show significant query patterns that would benefit from additional indexes. Focus on columns frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations.\"}"], ["train_workload_random_38_9q", " [Store(s_store_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_buy_potential), Web_site(web_site_sk), Customer(c_customer_sk), Customer_address(ca_gmt_offset), Item(i_current_price)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used individually in WHERE clauses or JOIN conditions, as they may not be as effective as single-column indexes for those specific queries.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or as join keys, as this can lead to performance regressions.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently used in query filters or joins. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_38_9q", " [Store(s_store_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_buy_potential), Web_site(web_site_sk), Customer(c_customer_sk), Customer_address(ca_gmt_offset), Item(i_current_price)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already heavily used in joins across multiple tables, especially if they are primary keys or foreign keys, as this can lead to redundant indexing and potential performance degradation. Instead, focus on indexing columns that are frequently used in WHERE clauses or as part of filtering conditions, particularly those with high cardinality or those involved in range queries.\"}"], ["train_workload_random_38_9q", " [Store(s_store_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_buy_potential), Web_site(web_site_sk), Customer(c_customer_sk), Customer_address(ca_gmt_offset), Item(i_current_price)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in joins across multiple tables, as these are likely to be covered by existing indexes or constraints. Instead, focus on indexing columns that are used in WHERE clauses with specific conditions or aggregations, especially those involving large tables or columns with high cardinality.\"}"], ["train_workload_random_38_9q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), store_sales(ss_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, especially when the workload involves frequent joins and filters on those columns. Instead, prioritize single-column indexes that align with the join and filter conditions in the workload.\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{rule: \"Ensure that indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries are maintained. Avoid removing indexes on columns that are part of foreign key relationships or are frequently used in filtering conditions, such as date columns and primary keys of dimension tables.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently used in query filters or joins. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations to optimize query performance.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Ensure that all foreign key columns used in joins across multiple tables in the workload are indexed. Specifically, maintain indexes on columns that are frequently used in join conditions and have high cardinality, such as customer.c_customer_sk, customer_address.ca_address_sk, and store_returns.sr_ticket_number, to prevent regression in query performance.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing composite indexes, especially when the composite index is more selective and frequently used in the workload.\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, as this can lead to redundancy and potential performance regression.\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{rule: \"Ensure that indexes on date columns used in WHERE clauses for filtering large datasets are maintained, as they are critical for query performance. Avoid removing indexes on columns frequently used in JOIN conditions across large tables, especially when they are part of the primary key or foreign key relationships.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes, especially when they are part of composite indexes that align with the workload's join and filter conditions. Prioritize composite indexes that match the query patterns and avoid single-column indexes that do not contribute to query performance improvements.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are maintained, especially for large tables. Avoid replacing composite indexes that cover multiple columns used in join conditions with single-column indexes unless the workload specifically benefits from it.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes, especially when the existing indexes are composite and cover multiple columns used together in queries. Prioritize composite indexes that match the query patterns over single-column indexes to prevent regression.\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables or are part of foreign key relationships, as this can lead to redundant indexes and potential performance regressions. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially those with high cardinality and those involved in filtering large datasets.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid redundant indexes on columns already covered by existing indexes, and ensure indexes are created on columns with high cardinality to improve query performance.\"}"], ["train_workload_random_38_9q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), store_sales(ss_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality and those involved in filtering large datasets.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Ensure that all foreign key columns used in joins across multiple queries are indexed, especially when they are part of large tables or frequently used in the workload. Additionally, maintain indexes on primary key columns that are used in WHERE clauses or as join keys to prevent regression in query performance.\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection, especially if they are frequently used in join conditions or filters across multiple queries. Prioritize indexing columns that are used in WHERE clauses and join conditions, and ensure that indexes are not redundant or overlapping with existing indexes.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently used in query filters or joins. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently joined with other tables, as these columns are likely to be involved in multiple queries and already have implicit indexing benefits. Instead, focus on indexing columns that are used in WHERE clauses, GROUP BY, or ORDER BY operations, especially if they are not part of foreign key relationships.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes, especially when they are frequently used in join conditions across multiple queries. Focus on indexing columns that are used in filtering conditions and are not already indexed.\"}"], ["train_workload_random_38_9q", " [Store(s_store_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_buy_potential), Web_site(web_site_sk), Customer(c_customer_sk), Customer_address(ca_gmt_offset), Item(i_current_price)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Ensure indexes are selected on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables. Prioritize indexes on columns with high cardinality and those involved in filtering operations, such as date columns and foreign keys. Avoid redundant indexes on columns already covered by existing indexes in the improvement set.\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{\"rule\": \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality. Remove indexes that are not contributing to query performance improvements.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently used in WHERE clauses or JOIN conditions. Focus on indexing columns that are frequently filtered or joined, and ensure that indexes are not overlapping unnecessarily, which can lead to performance degradation.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes, especially when the existing indexes are composite and cover multiple columns used together in queries. Focus on composite indexes that match the join and filter conditions in the workload to prevent regression.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are not removed, especially when they are frequently used in the workload. Additionally, avoid adding redundant indexes on columns that already have a composite index covering the same query patterns.\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Ensure that indexes cover the most frequently joined and filtered columns across the workload, especially those involved in large tables and complex joins. Avoid removing indexes on primary keys or foreign keys that are frequently used in joins or filters, such as date_dim(d_date_sk), promotion(p_promo_sk), and item(i_item_sk).\"}"], ["train_workload_random_38_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), date_dim(d_year), item(i_manufact_id), item(i_item_id), web_site(web_site_sk), date_dim(d_date), inventory(inv_item_sk), inventory(inv_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently used in query filters or joins. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality and frequent access patterns.\"}"], ["train_workload_random_38_9q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), store_sales(ss_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality and those involved in equality conditions.\"}"], ["train_workload_random_38_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), store(s_store_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are foreign keys or commonly used in joins. Instead, focus on indexing columns that are frequently used in WHERE clauses or aggregations, and ensure that indexes are not redundant across similar queries.\"}"], ["train_workload_random_38_9q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk), store_sales(ss_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes on foreign key columns (e.g., date_sk, item_sk, promo_sk) are sufficient for query optimization. Focus on indexing columns that are frequently used in joins and filters across multiple queries.\"}"], ["train_workload_random_38_9q", " [Store(s_store_sk), Promotion(p_promo_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_buy_potential), Web_site(web_site_sk), Customer(c_customer_sk), Customer_address(ca_gmt_offset), Item(i_current_price)]", "[item(i_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already heavily used in join conditions across multiple queries, as they may not provide additional performance benefits and could lead to regression. Instead, focus on indexing columns that are frequently used in filtering conditions or aggregations, especially if they are not part of join conditions.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing composite indexes, especially when the composite indexes are frequently used in join conditions across multiple queries. Prioritize composite indexes that align with the workload's join patterns and filter conditions.\"}"], ["train_workload_random_38_9q", " [store_sales(ss_sold_date_sk, ss_item_sk), web_sales(ws_item_sk, ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C store_sales.ss_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing composite indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially for large tables with frequent joins and filters. Ensure indexes align with the workload's query patterns, focusing on columns involved in WHERE clauses, JOIN conditions, and GROUP BY operations.\"}"]], "train_workload_random_42_7q": [["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple tables, especially when they are already indexed in other tables. Prioritize indexing columns that are used in filtering conditions and have high cardinality, such as date columns and foreign keys, to improve query performance and reduce potential regressions.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Prioritize composite indexes that include both the primary key and frequently queried columns, such as date columns in time-based queries, to prevent regression in query performance.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in join conditions or filtering criteria across multiple queries. Prioritize indexing columns that are consistently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those involved in high cardinality operations. Additionally, ensure that indexes are not redundant and do not overlap excessively with existing indexes, focusing on optimizing for query patterns that are common across the workload.\"}"], ["train_workload_random_42_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_id), customer_address(ca_address_sk), web_site(web_site_sk), date_dim(d_week_seq), household_demographics(hd_demo_sk), store_sales(ss_item_sk), customer(c_customer_sk), item(i_manager_id), web_sales(ws_sold_date_sk), date_dim(d_year), catalog_sales(cs_item_sk)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure indexes on columns used in join conditions across multiple tables, especially for large tables, to prevent regression. Prioritize indexes on date columns used in filtering and grouping, and on columns frequently used in WHERE clauses for filtering, such as item identifiers and customer identifiers.\"}"], ["train_workload_random_42_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_id), customer_address(ca_address_sk), web_site(web_site_sk), date_dim(d_week_seq), household_demographics(hd_demo_sk), store_sales(ss_item_sk), customer(c_customer_sk), item(i_manager_id), web_sales(ws_sold_date_sk), date_dim(d_year), catalog_sales(cs_item_sk)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize indexing columns involved in frequent joins and filters across multiple queries, such as date keys, item keys, and customer keys. Avoid omitting indexes on columns that are repeatedly used in join conditions or filters, as seen with the missing indexes on 'item(i_item_sk)', 'catalog_sales(cs_sold_date_sk)', and 'store_sales(ss_item_sk)' in the regression index selection.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in combination, especially when they appear in WHERE clauses or JOIN conditions. Avoid using single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_42_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_id), customer_address(ca_address_sk), web_site(web_site_sk), date_dim(d_week_seq), household_demographics(hd_demo_sk), store_sales(ss_item_sk), customer(c_customer_sk), item(i_manager_id), web_sales(ws_sold_date_sk), date_dim(d_year), catalog_sales(cs_item_sk)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure that all date-related columns used in WHERE clauses, such as 'date_dim(d_date_sk)' and 'date_dim(d_year)', are indexed to prevent regression. Additionally, maintain indexes on columns frequently used in JOIN conditions, such as 'store(s_store_sk)' and 'item(i_item_sk)', to optimize query performance.\"}"], ["train_workload_random_42_7q", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), web_site(web_site_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk, ss_ticket_number), catalog_returns(cr_returning_customer_sk)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes that are frequently used in join operations across multiple queries, such as those on 'store_sales(ss_customer_sk, ss_ticket_number)' and 'store_returns(sr_item_sk, sr_ticket_number)'.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together in queries, especially when multiple tables are involved. Prioritize composite indexes over single-column indexes when the workload involves complex joins and filters on multiple columns from the same table.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple queries, as these columns are likely to be already optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses, GROUP BY, and ORDER BY operations, especially if they are not part of existing indexes or foreign key constraints.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions across multiple queries, especially those with high cardinality and frequent use in WHERE clauses. Prioritize indexes on columns that are consistently used in join conditions and filtering across different queries, such as date_dim(d_date_sk) and item(i_item_sk). Avoid unnecessary indexes on columns with low cardinality or infrequent use in the workload, such as household_demographics(hd_demo_sk).\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_manager_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple queries, especially when they involve date or item identifiers. Prioritize indexes that cover multiple columns used together in WHERE clauses or JOIN conditions to optimize query performance.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_manager_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{\"rule\": \"Ensure composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve query performance by reducing the need for multiple single-column indexes.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and frequently filtered columns in large tables. Avoid unnecessary indexes on columns with low cardinality or infrequent use in the workload.\"}"], ["train_workload_random_42_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_id), customer_address(ca_address_sk), web_site(web_site_sk), date_dim(d_week_seq), household_demographics(hd_demo_sk), store_sales(ss_item_sk), customer(c_customer_sk), item(i_manager_id), web_sales(ws_sold_date_sk), date_dim(d_year), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{\"rule\": \"Ensure that indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries are maintained. Avoid removing indexes on columns that are part of foreign key relationships or are used in high cardinality filtering conditions, such as date_dim(d_date_sk), item(i_item_sk), and customer(c_customer_sk). Additionally, consider the impact of removing indexes on columns that are used in GROUP BY or ORDER BY clauses, as these can significantly affect query performance.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple tables, especially when they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and aggregations, as well as those that are part of smaller tables or have unique constraints.\"}"], ["train_workload_random_42_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_id), customer_address(ca_address_sk), web_site(web_site_sk), date_dim(d_week_seq), household_demographics(hd_demo_sk), store_sales(ss_item_sk), customer(c_customer_sk), item(i_manager_id), web_sales(ws_sold_date_sk), date_dim(d_year), catalog_sales(cs_item_sk)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that all frequently joined columns and filtering columns in the workload are indexed. Specifically, maintain indexes on columns that are used in WHERE clauses and JOIN conditions across multiple queries, such as item(i_item_sk), store_sales(ss_item_sk), catalog_sales(cs_item_sk), web_sales(ws_sold_date_sk), and customer(c_customer_sk). Avoid removing indexes on columns that are critical for query performance, especially those involved in large table joins and date-based filtering.\"}"], ["train_workload_random_42_7q", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), web_site(web_site_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk, ss_ticket_number), catalog_returns(cr_returning_customer_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index in the improvement selection, especially if they are frequently used in join conditions or filters across multiple queries. Prioritize composite indexes that cover multiple columns used together in queries to optimize performance.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid using indexes on columns with high cardinality and frequent updates, such as date columns, unless they are consistently used in WHERE clauses. Prioritize indexing columns that are frequently joined or filtered, especially those with lower cardinality and less frequent updates.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on columns frequently used in join conditions and filters, especially those with high cardinality or used in large tables, are not removed or replaced with less relevant indexes. Prioritize maintaining indexes on primary keys and foreign keys that are critical for query performance.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance. Additionally, ensure that indexes are created on columns with high cardinality to maximize their effectiveness.\"}"], ["train_workload_random_42_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_id), customer_address(ca_address_sk), web_site(web_site_sk), date_dim(d_week_seq), household_demographics(hd_demo_sk), store_sales(ss_item_sk), customer(c_customer_sk), item(i_manager_id), web_sales(ws_sold_date_sk), date_dim(d_year), catalog_sales(cs_item_sk)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure indexes on columns used in join conditions across multiple tables, especially when they involve large tables. Prioritize indexing columns that are frequently used in WHERE clauses and GROUP BY operations, and ensure coverage for all major sales channels (store_sales, catalog_sales, web_sales) and their corresponding date dimensions.\"}"], ["train_workload_random_42_7q", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), web_site(web_site_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk, ss_ticket_number), catalog_returns(cr_returning_customer_sk)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes that are frequently used in join operations across multiple queries, such as those on 'store_sales', 'catalog_sales', and 'web_sales' tables. Prioritize indexes on columns that are part of WHERE clauses and GROUP BY operations in the workload.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_manager_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in the workload, especially when multiple columns from the same table are involved in joins or filters. Avoid using single-column indexes when composite indexes can better optimize query performance.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are frequently filtered or joined independently.\"}"], ["train_workload_random_42_7q", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), web_site(web_site_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk, ss_ticket_number), catalog_returns(cr_returning_customer_sk)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or GROUP BY operations, as seen with the missing indexes on 'store_sales(ss_customer_sk, ss_ticket_number)' and 'store_returns(sr_item_sk, sr_ticket_number)' in the regression selection.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance. Additionally, ensure that indexes are not redundant across tables and prioritize columns with high cardinality for indexing.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are frequently filtered or joined independently.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_manager_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid regression by maintaining indexes on columns involved in multiple queries, such as date_dim.d_date_sk, item.i_item_sk, and customer_address.ca_address_sk.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload. Prioritize indexing columns that are consistently used for filtering or joining, especially those involved in high cardinality operations. Additionally, ensure that indexes do not overlap excessively with existing indexes to prevent redundancy and maintain performance efficiency.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple tables, especially when they are already indexed in other tables. Prioritize indexing columns that are used in filtering conditions and have high cardinality, such as date columns and unique identifiers.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filtering criteria across all queries. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or involved in multiple queries. Avoid omitting indexes on columns that are critical for query performance, such as those used in subqueries or complex joins.\"}"], ["train_workload_random_42_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_id), customer_address(ca_address_sk), web_site(web_site_sk), date_dim(d_week_seq), household_demographics(hd_demo_sk), store_sales(ss_item_sk), customer(c_customer_sk), item(i_manager_id), web_sales(ws_sold_date_sk), date_dim(d_year), catalog_sales(cs_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or as join keys, such as item(i_item_sk) and promotion(p_promo_sk), which are critical for query performance.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_manager_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure composite indexes are created for columns frequently used together in WHERE clauses, especially for large tables. Prioritize indexes on columns involved in JOIN operations and GROUP BY clauses. Avoid single-column indexes when multi-column indexes can optimize query performance.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters, especially for tables with large row counts. Prioritize composite indexes for columns frequently used together in queries, such as date_dim(d_date_sk, d_date, d_year) and item(i_item_sk, i_item_id). Avoid single-column indexes on columns with low cardinality or those not directly involved in query predicates.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join condition involves columns with high cardinality or when the column is already indexed in another table. Instead, focus on indexing columns that are used in filtering conditions and have a high selectivity, as well as columns that are used in group by or order by clauses.\"}"], ["train_workload_random_42_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_id), customer_address(ca_address_sk), web_site(web_site_sk), date_dim(d_week_seq), household_demographics(hd_demo_sk), store_sales(ss_item_sk), customer(c_customer_sk), item(i_manager_id), web_sales(ws_sold_date_sk), date_dim(d_year), catalog_sales(cs_item_sk)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that all frequently joined columns and filtering columns in the workload are indexed. Specifically, maintain indexes on columns that are used in WHERE clauses and JOIN conditions across multiple queries, such as item(i_item_sk), date_dim(d_date_sk), and catalog_sales(cs_sold_date_sk). Avoid removing indexes on columns that are critical for query performance, especially those involved in large table joins or subqueries.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_manager_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in the workload, especially when multiple columns are involved in the WHERE clause or JOIN conditions. Avoid using single-column indexes when composite indexes can better optimize query performance.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes on columns that are not directly involved in filtering or joining operations in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses. Additionally, consider composite indexes for columns that are often queried together, especially if they are used in range queries or sorting operations.\"}"], ["train_workload_random_42_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), item(i_item_id), customer_address(ca_address_sk), web_site(web_site_sk), date_dim(d_week_seq), household_demographics(hd_demo_sk), store_sales(ss_item_sk), customer(c_customer_sk), item(i_manager_id), web_sales(ws_sold_date_sk), date_dim(d_year), catalog_sales(cs_item_sk)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on columns frequently used in join conditions and filters across multiple queries are maintained. Specifically, prioritize indexes on columns that are part of join conditions involving large tables and those used in WHERE clauses with high selectivity. Avoid removing indexes that are used in multiple queries, especially if they are part of the improvement index set.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are consistently applied across all related tables in the workload. Avoid redundant indexes on columns that are not frequently filtered or joined, and prioritize indexing on columns that are used in WHERE clauses and join conditions to improve query performance.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_manager_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Prioritize composite indexes over single-column indexes when the workload shows frequent multi-column access patterns.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters across multiple queries, especially for tables with high row counts. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date_dim(d_date_sk), item(i_item_sk), and customer_address(ca_address_sk). Avoid redundant indexes on columns with low cardinality or infrequent usage in the workload.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_manager_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when multiple columns are involved in the same query. Avoid relying solely on single-column indexes when queries involve complex joins or multiple conditions on the same table.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are frequently filtered or joined independently.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing composite indexes that cover multiple columns used in WHERE clauses and GROUP BY clauses, as they can significantly improve query performance by reducing the need for full table scans.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in join conditions or filtering criteria across multiple queries in the workload. Prioritize indexing columns that are consistently used in join conditions, filtering, and aggregation operations, especially those involved in complex queries with multiple joins and subqueries.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [promotion(p_promo_sk), date_dim(d_date), item(i_manager_id), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)].", "{rule: \"Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are frequently filtered or joined independently.\"}"], ["train_workload_random_42_7q", " [date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_sk, i_manager_id)]", "[store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), date_dim(d_date_sk), web_site(web_site_sk), household_demographics(hd_demo_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns in the workload are prioritized. Avoid adding indexes on columns that are not part of join conditions or frequently filtered, as they may not contribute to query performance and can lead to regression.\"}"], ["train_workload_random_42_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_manager_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_ticket_number), customer(c_customer_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in combination, especially when they appear in WHERE clauses or JOIN conditions. Avoid using single-column indexes when multi-column indexes can better optimize query performance by covering more query patterns.\"}"]], "train_workload_random_46_5q": [["train_workload_random_46_5q", "[date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), store_sales(ss_item_sk, ss_customer_sk), customer_demographics(cd_demo_sk)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Avoid adding redundant indexes on columns that are already indexed in other tables or are not frequently filtered or joined on in the workload. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality.\"\n}\n```"], ["train_workload_random_46_5q", "[date_dim(d_date_sk, d_year, d_week_seq), item(i_item_sk, i_item_id), store(s_store_sk), customer_demographics(cd_demo_sk)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Ensure indexes cover all join and filter conditions in the workload queries, especially for columns involved in multiple queries or subqueries. Prioritize composite indexes that include both join keys and frequently filtered columns to optimize query performance and prevent regression.\"\n}\n```"], ["train_workload_random_46_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk), I(C store_sales.ss_ticket_number), I(C web_sales.ws_item_sk)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Ensure that indexes on columns used in join conditions and where clauses are maintained, especially for high cardinality columns and those frequently used in filtering and joining operations. Avoid removing indexes on primary keys or foreign keys that are heavily used in the workload.\"\n}\n```"], ["train_workload_random_46_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk), I(C store_sales.ss_ticket_number), I(C web_sales.ws_item_sk)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Ensure indexes cover all join and filter conditions in the workload. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"\n}\n```"], ["train_workload_random_46_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk), I(C store_sales.ss_ticket_number), I(C web_sales.ws_item_sk)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Ensure indexes cover all join and filter conditions in the workload. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"\n}\n```"], ["train_workload_random_46_5q", "[date_dim(d_date_sk, d_year, d_week_seq), item(i_item_sk, i_item_id), store(s_store_sk), customer_demographics(cd_demo_sk)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Avoid creating indexes on columns that are already indexed in other tables for similar purposes, especially when they are used in join conditions across multiple tables. Instead, focus on indexing columns that are frequently filtered or aggregated in the workload, ensuring that indexes are not redundant and are optimized for the most common query patterns.\"\n}\n```"], ["train_workload_random_46_5q", "[date_dim(d_date_sk, d_year, d_week_seq), item(i_item_sk, i_item_id), store(s_store_sk), customer_demographics(cd_demo_sk)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Ensure indexes cover all join and filter conditions in the workload queries, especially for columns involved in multiple queries or large tables. Prioritize composite indexes that combine frequently joined and filtered columns to optimize query performance.\"\n}\n```"], ["train_workload_random_46_5q", "[date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), store_sales(ss_item_sk, ss_customer_sk), customer_demographics(cd_demo_sk)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Avoid adding redundant indexes on columns that are already covered by existing indexes, especially when the workload does not show significant query patterns that would benefit from such indexes. Focus on maintaining indexes that align with the most frequently queried columns and join conditions.\"\n}\n```"], ["train_workload_random_46_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk), I(C store_sales.ss_ticket_number), I(C web_sales.ws_item_sk)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid missing indexes on columns involved in multiple queries or subqueries.\"\n}\n```"], ["train_workload_random_46_5q", "[date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), store_sales(ss_item_sk, ss_customer_sk), customer_demographics(cd_demo_sk)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Avoid creating indexes on columns that are already indexed in other tables for similar join conditions, especially when the workload involves multiple tables with similar join keys. Prioritize indexes on columns that are frequently used in WHERE clauses and GROUP BY operations across different queries.\"\n}\n```"], ["train_workload_random_46_5q", "[date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), store_sales(ss_item_sk, ss_customer_sk), customer_demographics(cd_demo_sk)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Avoid creating indexes on columns that are already indexed in other tables for similar join conditions, especially when the workload involves multiple tables with similar join keys. Prioritize indexes on columns that are frequently used in WHERE clauses and GROUP BY operations across different queries.\"\n}\n```"], ["train_workload_random_46_5q", " [Item(i_item_id, i_item_sk), Date_dim(d_date_sk), Household_demographics(hd_buy_potential)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Avoid creating multiple indexes on the same table with overlapping columns unless necessary. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries. Ensure that indexes are not redundant and cover the most critical query paths to prevent regression.\"\n}\n```"], ["train_workload_random_46_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk), I(C store_sales.ss_ticket_number), I(C web_sales.ws_item_sk)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Ensure indexes cover all join and filter conditions in the workload queries, especially for columns involved in multiple queries or subqueries. Prioritize indexes on columns with high cardinality and those used in WHERE clauses, JOIN conditions, and GROUP BY operations. Avoid redundant indexes on columns already covered by composite indexes.\"\n}\n```"], ["train_workload_random_46_5q", "[customer(c_customer_sk), customer_address(ca_address_sk), date_dim(d_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Ensure that indexes on foreign key columns used in join conditions are included in the index selection, especially for large tables. Avoid redundant indexes on columns that are already covered by composite indexes.\"\n}\n```"], ["train_workload_random_46_5q", " [Item(i_item_id, i_item_sk), Date_dim(d_date_sk), Household_demographics(hd_buy_potential)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Avoid redundant indexes on columns that are already covered by existing indexes or are part of foreign key relationships. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Ensure indexes are not overly broad, covering only necessary columns to optimize query performance without excessive overhead.\"\n}\n```"], ["train_workload_random_46_5q", "[date_dim(d_date_sk, d_year, d_week_seq), item(i_item_sk, i_item_id), store(s_store_sk), customer_demographics(cd_demo_sk)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Ensure that indexes cover both the join keys and the filtering conditions. Avoid redundant indexes on the same table that do not contribute to query performance. For example, if an index on 'item(i_item_sk)' is already present, adding 'item(i_manager_id)' separately may not be beneficial unless 'i_manager_id' is frequently used in filtering or sorting. Similarly, ensure that indexes on 'catalog_sales(cs_item_sk)' and 'catalog_sales(cs_sold_date_sk)' are necessary together, as they might overlap with existing indexes on 'date_dim(d_date_sk)' and 'item(i_item_sk)'.\"\n}\n```"], ["train_workload_random_46_5q", " [Item(i_item_id, i_item_sk), Date_dim(d_date_sk), Household_demographics(hd_buy_potential)]", " [item(i_item_sk), item(i_manager_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_sales(ss_item_sk), store_sales(ss_customer_sk), customer_demographics(cd_demo_sk)]\n```", "```json\n{\n    \"rule\": \"Avoid creating indexes on columns that are already indexed in other tables when they are used in join conditions across multiple tables. Instead, focus on indexing columns that are frequently filtered or aggregated in the workload queries.\"\n}\n```"]], "train_workload_random_48_10q": [["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves multiple tables with join conditions on these columns. Instead, focus on indexing columns that are frequently used in WHERE clauses and join conditions across different queries, ensuring that each table's primary join and filter columns are efficiently indexed.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are less frequently used or only appear in specific queries unless they are part of a critical path for query performance.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes on columns used in WHERE clauses and JOIN conditions across multiple queries, especially for high cardinality columns and those involved in frequent joins. Prioritize composite indexes for columns that are often queried together, and avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple tables, as they may lead to regression in query performance. Focus on indexing columns that are used in WHERE clauses and have high cardinality, especially those involved in filtering large datasets.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually, especially if the individual indexes are frequently used in the workload. Prioritize indexing on columns that are used in join conditions and where clauses, and ensure that indexes are not redundant with existing ones.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are less frequently used or only appear in specific queries unless they are part of a critical JOIN or WHERE condition. Consider the size and cardinality of the tables when selecting indexes to ensure efficient query execution.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions in the workload, as they may not provide significant performance benefits and could lead to regression. Focus on indexing columns that are consistently used in filtering and joining operations across multiple queries.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or involved in multiple queries. Avoid redundant indexes on columns already covered by existing indexes, and ensure indexes align with the workload's most common query patterns.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already covered by single-column indexes in the improvement set, especially when the workload involves frequent joins and filters on those columns. Prioritize single-column indexes for columns involved in joins and filters to prevent redundancy and potential performance regression.\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Prioritize indexing columns that are used in multiple queries across the workload, such as date keys and foreign keys linking tables. Avoid removing indexes on columns that are critical for query performance, such as those involved in filtering and joining operations.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid indexing columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries. Prioritize indexing columns that appear in WHERE clauses or JOIN conditions in the majority of queries, especially those with high cardinality or those involved in filtering large datasets.\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent updates, such as date columns, unless they are used in range queries. Prioritize indexing columns that are frequently used in joins and filters, especially those with lower cardinality and stable values.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid adding indexes on columns that are already heavily filtered or joined in the workload, as they may not provide additional performance benefits and could lead to regression. Focus on indexing columns that are frequently used in WHERE clauses or JOIN conditions but lack existing indexes.\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are only used in SELECT or ORDER BY clauses unless they are part of a composite index that supports filtering or joining.\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses with high cardinality, such as date columns, to prevent regression in query performance.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or involved in multiple queries. Avoid redundant indexes on columns already covered by existing indexes, and ensure indexes align with the workload's most common query patterns.\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or involved in range queries.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid redundant indexes on columns already covered by existing indexes in the improvement set.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in WHERE clauses or JOIN conditions with high selectivity and low cardinality, especially if they are part of large tables or frequently queried tables.\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'date_dim(d_date_sk)', 'customer_address(ca_zip)', and 'customer_address(ca_city)', unless they are frequently used in WHERE clauses with equality conditions. Prioritize indexing on foreign key columns and columns used in JOIN conditions, such as 'store_sales(ss_sold_date_sk)', 'store(s_store_sk)', and 'item(i_item_sk)'.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently used in filtering or joining conditions. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially those involved in high cardinality operations.\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid indexing columns that are only used in specific queries or smaller tables unless they are critical for performance.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included in the regression index selection, especially when they are present in the improvement index selection. This includes indexes on columns like 'customer_demographics.cd_demo_sk', 'store_returns.sr_cdemo_sk', and 'catalog_returns.cr_order_number' which are used in join conditions and are present in the improvement index but missing in the regression index.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating multiple indexes on the same table with overlapping columns unless necessary. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality. Remove redundant indexes that do not significantly contribute to query performance improvement.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid adding redundant indexes on foreign key columns that are already covered by existing indexes, especially when the workload does not show significant performance improvement with the additional indexes.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized, especially when they are frequently used in the workload queries. Avoid redundant indexes on columns that are already covered by other indexes or are not frequently used in the workload.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized over indexes on columns used in filtering conditions, especially when the join involves large tables. Additionally, avoid redundant indexes on columns that are already covered by composite indexes.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially if they are already indexed in other tables. Prioritize indexing columns that are used in filtering conditions and have high cardinality, and ensure that indexes are not redundant across similar queries.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently used in join or filter conditions. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those involved in multiple queries across the workload.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses and GROUP BY operations, as these are critical for query performance. Prioritize indexes on columns with high cardinality and those involved in frequent filtering or sorting operations.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes on columns already covered by other indexes.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in filtering conditions and have a significant impact on query performance. Remove redundant indexes that do not contribute to query optimization.\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or those involved in filtering large datasets.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are less frequently used or only appear in specific queries unless they are part of a critical join or filter condition.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries. Prioritize indexing columns that are consistently used in filtering or joining operations, especially those involved in high-frequency queries or those with large row counts.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date_dim(d_date), date_dim(d_year), and customer_address(ca_zip), unless they are frequently used in WHERE clauses with equality conditions. Prioritize indexing columns that are frequently joined or filtered with high selectivity, such as item(i_item_id), item(i_item_sk), and customer_demographics(cd_demo_sk).\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or those involved in filtering large datasets.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or as join keys, such as 'd_date_sk', 'ca_address_sk', and 's_store_sk', as these are critical for query performance.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions in the workload. Prioritize indexing columns that are used in filtering conditions and have high selectivity, such as date columns in date_dim and foreign key columns in large tables like store_sales and web_sales.\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent updates, such as date columns, unless they are used in range queries. Prioritize indexing columns that are frequently used in join conditions and have lower cardinality, such as foreign keys or columns used in WHERE clauses for equality checks.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently used in join or filter conditions. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially in large tables.\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables and frequently joined tables. Avoid removing indexes on columns that are frequently used in WHERE clauses with high cardinality, such as date columns in date_dim and sales date columns in sales tables.\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and GROUP BY operations. Avoid removing indexes on columns that are part of composite keys or are heavily used in filtering and aggregation, such as date columns in time-series data.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date_dim(d_date), date_dim(d_year), and customer_address(ca_city). Instead, focus on columns that are frequently used in join conditions and have a higher impact on query performance, such as item(i_item_sk), customer_demographics(cd_demo_sk), and store_returns(sr_cdemo_sk).\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently used in WHERE clauses or JOIN conditions. Focus on indexing columns that are frequently filtered or joined on, especially those with high cardinality, to improve query performance.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or as join keys, such as 'd_date_sk', 'ca_address_sk', and 'cd_demo_sk', as these are critical for query performance.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries. Prioritize indexing columns that are consistently used in filtering or joining operations, especially those involved in high cardinality operations or large tables.\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date_dim(d_date_sk), item(i_item_id), and customer_address(ca_zip). Instead, focus on columns that are frequently used in joins and filters with moderate cardinality, like store_sales(ss_sold_date_sk), store(s_store_sk), and item(i_item_sk).\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently used in join or filter conditions. Prioritize indexing columns that are used in join conditions and filter predicates across multiple queries in the workload.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid indexing columns that are less frequently used or only appear in specific queries unless they are critical for performance.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions in the workload, as they may not provide significant performance benefits and could lead to regression. Focus on indexing columns that are consistently used in filtering and joining operations across multiple queries.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Ensure that indexes on columns used in join conditions and where clauses are included in the regression index selection, especially for high cardinality columns and those frequently used in the workload. Avoid redundant indexes on columns with low selectivity or those not used in filtering or joining operations.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually, especially if they are frequently used in join conditions or filters. Instead, focus on indexing columns that are used in group by or order by clauses, and ensure that indexes are aligned with the most common query patterns to prevent regression.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Ensure that indexes on columns frequently used in WHERE clauses and JOIN conditions are prioritized, especially for large tables. Avoid adding unnecessary indexes on columns that are not frequently filtered or joined, as this can lead to regression by increasing maintenance overhead and not improving query performance.\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions and frequently filtered columns are maintained. Avoid removing indexes on columns that are used in WHERE clauses with high cardinality, such as date columns and primary keys, as they are critical for query performance.\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date_dim(d_date_sk), item(i_item_id), and customer_address(ca_zip). Instead, focus on columns that are frequently used in joins and filters with high selectivity, such as store_sales(ss_sold_date_sk), store(s_store_sk), and item(i_item_sk).\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid adding indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as they may lead to redundant indexing and potential performance regressions.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or as join keys, such as 'd_date_sk', 'ca_address_sk', and 'cd_demo_sk', as these are critical for query performance.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid indexing columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries. Prioritize indexing columns that appear in WHERE clauses or JOIN conditions in multiple queries, especially those with high cardinality or those involved in filtering large datasets.\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date_dim(d_date_sk), item(i_item_id), and customer_address(ca_zip). Instead, focus on columns that are frequently used in WHERE clauses and JOIN conditions with moderate cardinality, such as store_sales(ss_sold_date_sk), store(s_store_sk), and catalog_sales(cs_sold_date_sk).\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or those involved in filtering large datasets.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized, especially for large tables, to prevent regression in query performance. Avoid redundant indexes on columns that are already covered by existing indexes.\"}"], ["train_workload_random_48_10q", " [store_sales(ss_sold_date_sk), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses with high cardinality, such as date columns, to prevent regression in query performance.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions across large tables. Prioritize indexing columns that are used in WHERE clauses with equality conditions and have moderate to low cardinality, as well as columns that are frequently used in GROUP BY or ORDER BY clauses.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_sales.ss_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually, especially if they are frequently used in join conditions or filters. Instead, focus on indexing columns that are used together in queries to improve performance. Additionally, ensure that indexes are aligned with the most common query patterns and avoid redundant indexes that do not contribute to query optimization.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), web_page(wp_web_page_sk), warehouse(w_warehouse_sk), household_demographics(hd_demo_sk), customer_demographics(cd_demo_sk), customer(c_current_addr_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are less frequently used or only appear in specific queries unless they are critical for performance.\"}"], ["train_workload_random_48_10q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_qoy, d_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), store_returns(sr_returned_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries. Prioritize indexing columns that appear in WHERE clauses or JOIN conditions in the majority of queries, especially those with high cardinality or those involved in filtering large datasets.\"}"], ["train_workload_random_48_10q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk)]", "[date_dim(d_date_sk), date_dim(d_week_seq), item(i_item_sk), web_page(wp_web_page_sk), household_demographics(hd_demo_sk), date_dim(d_year), date_dim(d_date), customer_demographics(cd_demo_sk), item(i_item_id), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk), item(i_color), store_sales(ss_item_sk), customer(c_current_addr_sk), customer_address(ca_city), store_returns(sr_cdemo_sk), customer_address(ca_zip), customer_demographics(cd_marital_status)]", "{rule: \"Ensure that indexes on columns used in WHERE clauses with high cardinality and frequent joins are maintained, and avoid redundant indexes on columns with low selectivity or those already covered by existing indexes. Prioritize indexes on columns that are frequently used in join conditions and filtering, such as foreign keys and primary keys, to prevent regression.\"}"]], "train_workload_random_52_8q": [["train_workload_random_52_8q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), item(i_category, i_item_id, i_color), promotion(p_promo_sk), store(s_gmt_offset)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are used in join conditions. Instead, focus on indexing columns that are frequently filtered or aggregated in the workload, and ensure that indexes are not redundant with existing ones.\"}"], ["train_workload_random_52_8q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), item(i_category, i_item_id, i_color), promotion(p_promo_sk), store(s_gmt_offset)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across multiple queries. Prioritize columns with high cardinality and those frequently used in filtering conditions. Avoid removing indexes on columns that are consistently used in multiple queries, especially if they are part of complex joins or subqueries.\"}"], ["train_workload_random_52_8q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), item(i_category, i_item_id, i_color), promotion(p_promo_sk), store(s_gmt_offset)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{rule: \"Ensure that indexes cover all frequently joined columns and filtering conditions. Avoid removing indexes on columns that are used in multiple queries for joins or filters, such as 'customer_address(ca_gmt_offset)' and 'item(i_category)'. Prioritize indexes on columns with high cardinality and those involved in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_52_8q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), item(i_category, i_item_id, i_color), promotion(p_promo_sk), store(s_gmt_offset)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables for similar purposes, especially when they are used in join conditions across multiple tables. Prioritize indexing columns that are frequently used in WHERE clauses with specific values or ranges, and ensure that indexes are not redundant across different tables for similar query patterns.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes cover multiple columns involved in join conditions and filters, especially for large tables. Avoid single-column indexes when queries involve multiple conditions on the same table.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{rule: \"Ensure that multi-column indexes are preserved when they are used in join conditions across multiple tables, especially for large tables with high cardinality columns. Avoid replacing multi-column indexes with single-column indexes if the workload involves complex joins and filters on multiple columns.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns are consistently applied across all relevant tables in the workload. Prioritize indexing on columns that are used in multiple queries, especially those with high cardinality and those involved in join operations.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes cover multiple columns involved in joins and filters, especially for large tables. Prioritize indexes that include columns frequently used together in WHERE clauses and JOIN conditions to optimize query performance.\"}"], ["train_workload_random_52_8q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), item(i_category, i_item_id, i_color), promotion(p_promo_sk), store(s_gmt_offset)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates. Avoid missing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables. Prioritize indexes on columns with high cardinality and those involved in multiple queries.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized, especially for large tables, and avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that all foreign key columns used in join conditions across multiple queries are indexed. Avoid removing indexes on columns that are frequently used in join conditions, especially if they are part of the primary key or are heavily queried, as this can lead to performance regressions.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes are used for queries involving multiple columns in join conditions, especially when they involve large tables. Avoid replacing composite indexes with single-column indexes unless the workload specifically benefits from such a change.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables when they are used in join conditions across multiple tables. Prioritize indexing columns that are frequently used in WHERE clauses and are not already indexed in other tables.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes cover multiple columns used in join conditions and filters, especially for large tables. Prioritize indexes that include columns frequently used together in queries, such as date and store keys in sales-related tables.\"}"], ["train_workload_random_52_8q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), item(i_category, i_item_id, i_color), promotion(p_promo_sk), store(s_gmt_offset)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across all tables involved in the workload queries. Prioritize indexing columns that are frequently used together in multiple queries, especially those with high cardinality or involved in range queries.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions across multiple queries, especially those involving large tables. Avoid redundant indexes on columns already covered by existing indexes unless they significantly improve query performance.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes cover multiple columns involved in joins and filters, especially for large tables. Avoid single-column indexes when queries involve multiple conditions on the same table.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Prioritize composite indexes that include multiple columns used together in queries, especially for large tables. Avoid regression by maintaining indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables when they are used in join conditions across multiple tables. Prioritize indexing columns that are frequently used in WHERE clauses and are not already indexed in other tables.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes cover multiple columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when queries involve multiple conditions on the same table.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{rule: \"Ensure that all necessary indexes cover the join and filter conditions in the workload queries. Specifically, include indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as 'date_dim.d_year', 'item.i_item_sk', and 'web_sales.ws_item_sk', which are missing in the regression index selection.\"}"], ["train_workload_random_52_8q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), item(i_category, i_item_id, i_color), promotion(p_promo_sk), store(s_gmt_offset)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are used in join conditions. Instead, focus on indexing columns that are frequently filtered or aggregated in the workload, and ensure that indexes are not redundant across similar queries.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes cover multiple columns involved in join conditions and filters, especially for large tables. Avoid single-column indexes when queries involve multiple conditions on the same table.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{\"rule\": \"Ensure that composite indexes are maintained for queries involving multiple columns in join conditions, especially when the workload involves complex joins across multiple tables. Avoid replacing composite indexes with single-column indexes if the workload heavily relies on multi-column joins.\"}"], ["train_workload_random_52_8q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), item(i_category, i_item_id, i_color), promotion(p_promo_sk), store(s_gmt_offset)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables for similar purposes, especially when they are used in join conditions across multiple tables. Prioritize indexing columns that are frequently used in WHERE clauses with specific values or ranges, and ensure that indexes are not redundant across different tables for similar query patterns.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes cover multiple columns involved in join conditions and filters, especially for large tables. Avoid single-column indexes when queries involve multiple conditions on the same table.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize composite indexes that include columns frequently used together in joins and filters, especially for large tables. Avoid regression by maintaining indexes on columns that are part of multiple query conditions, such as date_dim.d_date_sk and item.i_item_sk, which are used in both joins and filters across different queries.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently appearing together in WHERE clauses, especially for large tables. Avoid single-column indexes when multiple columns are consistently queried together.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes cover multiple columns involved in joins and filters, especially for large tables. Avoid single-column indexes when queries involve multiple conditions on the same table.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes are used for queries involving multiple columns in join conditions, especially when the workload involves complex joins across large tables. Avoid regressing to single-column indexes when composite indexes have been shown to improve performance.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included in the regression index selection, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and GROUP BY clauses to prevent performance regressions.\"}"], ["train_workload_random_52_8q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), item(i_category, i_item_id, i_color), promotion(p_promo_sk), store(s_gmt_offset)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes cover both filtering and join conditions. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially if they are used in multiple queries. Consider the workload's most common query patterns and ensure indexes support them effectively.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in multi-column joins or filters, especially when they appear together in multiple queries. Avoid replacing composite indexes with single-column indexes unless the workload predominantly benefits from single-column access patterns.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for frequently joined columns across multiple tables, especially when they appear together in WHERE clauses, to prevent regression from single-column indexes.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Prioritize indexing columns involved in multiple queries and those with high cardinality, especially when they are used in WHERE clauses or JOIN conditions. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Prioritize composite indexes that include multiple columns used together in queries, especially for large tables. Avoid missing indexes on columns frequently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns are consistently applied across all relevant tables in the workload. Prioritize indexing on columns that are used in multiple queries, especially those with high cardinality and those involved in join operations, such as date keys and foreign keys. Avoid redundant indexes on columns that are already covered by other indexes or are not frequently queried.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that composite indexes are used for frequently joined columns across multiple tables, especially when they are part of the WHERE clause in multiple queries. Avoid using single-column indexes when multi-column indexes can better optimize the query performance by covering more of the query's filtering and joining conditions.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{rule: \"Ensure that composite indexes are used for frequently joined columns across multiple tables, especially when they are part of the WHERE clause in multiple queries. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filters on multiple columns.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid redundant indexes on columns that are already covered by existing indexes, especially when they are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses and join conditions, and ensure that indexes are not duplicated across tables unless necessary for specific query optimizations.\"}"], ["train_workload_random_52_8q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), item(i_category, i_item_id, i_color), promotion(p_promo_sk), store(s_gmt_offset)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses with multiple conditions, especially those involving joins across tables. Prioritize indexing columns that are frequently used in filtering conditions and have high cardinality, such as customer_address(ca_gmt_offset) and item(i_category). Avoid regression by maintaining indexes on columns that are used in multiple queries and have significant impact on query performance.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Prioritize composite indexes that include columns frequently used together in joins and filters, especially for large tables. Avoid missing indexes on columns that are part of multiple queries' join conditions.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for frequently joined columns and filter conditions, especially when multiple columns are involved in the WHERE clause. Avoid using single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_52_8q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), item(i_category, i_item_id, i_color), promotion(p_promo_sk), store(s_gmt_offset)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses with multiple conditions, especially those involving joins across tables. Prioritize columns that are frequently used together in queries, such as those appearing in both WHERE and JOIN conditions, to prevent regression.\"}"], ["train_workload_random_52_8q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), item(i_category, i_item_id, i_color), promotion(p_promo_sk), store(s_gmt_offset)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates. Avoid missing indexes on frequently joined columns and columns used in WHERE clauses. Prioritize indexes on columns with high cardinality and those involved in multiple queries.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid redundant indexes on columns that are already covered by existing indexes, especially when they are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses and GROUP BY operations to optimize query performance.\"}"], ["train_workload_random_52_8q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), item(i_category, i_item_id, i_color), promotion(p_promo_sk), store(s_gmt_offset)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across multiple queries, especially for high cardinality columns and those frequently filtered or joined. Avoid omitting indexes on columns that are consistently used in filtering conditions, such as 'customer_address(ca_gmt_offset)' and 'item(i_category)' in the improvement index, which are missing in the regression index.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes are used for queries involving multiple columns in join conditions, especially when they involve large tables. Avoid replacing composite indexes with single-column indexes unless the workload specifically benefits from such a change.\"}"], ["train_workload_random_52_8q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), item(i_category, i_item_id, i_color), promotion(p_promo_sk), store(s_gmt_offset)]", " [store_sales(ss_sold_date_sk), item(i_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_gmt_offset), customer(c_customer_sk), catalog_sales(cs_item_sk), store_sales(ss_item_sk), date_dim(d_dow), web_sales(ws_item_sk), store_sales(ss_customer_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are frequently used in join conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, while ensuring that indexes are not redundant or overlapping excessively with existing indexes.\"}"], ["train_workload_random_52_8q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_customer_sk)]", "[date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk), item(i_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that composite indexes are used for frequently joined columns across multiple tables, especially when the workload involves complex queries with multiple joins and filters. Avoid using single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_52_8q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), item(i_category, i_item_id, i_color), promotion(p_promo_sk), store(s_gmt_offset)]", "[date_dim(d_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), item(i_item_id)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in join conditions, such as 'customer_address(ca_gmt_offset)' and 'item(i_category)', which are present in the improvement index but missing in the regression index.\"}"]], "train_workload_random_59_9q": [["train_workload_random_59_9q", "[date_dim(d_date_sk), item(i_item_sk), web_returns(wr_item_sk), customer_demographics(cd_marital_status), customer_address(ca_state), customer_demographics(cd_demo_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id), date_dim(d_year), date_dim(d_week_seq)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{rule: \"Prioritize indexing columns involved in join conditions and filters across multiple queries, especially those with high cardinality or frequently used in WHERE clauses. Avoid redundant indexes on columns already covered by composite indexes or those with low cardinality unless they are critical for specific query optimizations.\"}"], ["train_workload_random_59_9q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), item(i_item_id, i_item_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), store(s_store_sk)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{\"rule\": \"Ensure that indexes are created on columns frequently used in join conditions and where clauses, especially for large tables. Avoid creating indexes on columns with low cardinality or those not involved in filtering or joining operations.\"}"], ["train_workload_random_59_9q", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), store_sales(ss_customer_sk, ss_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across large tables, especially when they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and are part of smaller tables to enhance query performance.\"}"], ["train_workload_random_59_9q", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), store_sales(ss_customer_sk, ss_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and aggregation, as seen in the improvement index selection.\"}"], ["train_workload_random_59_9q", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), store_sales(ss_customer_sk, ss_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in WHERE clauses with high selectivity and are not already covered by existing indexes.\"}"], ["train_workload_random_59_9q", "[date_dim(d_date_sk), item(i_item_sk), web_returns(wr_item_sk), customer_demographics(cd_marital_status), customer_address(ca_state), customer_demographics(cd_demo_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id), date_dim(d_year), date_dim(d_week_seq)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{\"rule\": \"Ensure that indexes on date columns used in WHERE clauses for filtering large tables are maintained, as they are critical for query performance. Additionally, prioritize indexes on join keys and frequently filtered columns in large tables to prevent regression.\"}"], ["train_workload_random_59_9q", "[date_dim(d_date_sk), item(i_item_sk), web_returns(wr_item_sk), customer_demographics(cd_marital_status), customer_address(ca_state), customer_demographics(cd_demo_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id), date_dim(d_year), date_dim(d_week_seq)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure indexes cover join and filter columns used in multiple queries, especially those involving large tables or frequent joins, such as date_dim(d_date_sk), item(i_item_sk), and sales/returns tables' item_sk and order_number columns. Avoid redundant indexes on columns that are already covered by other indexes or are less frequently used in joins or filters.\"}"], ["train_workload_random_59_9q", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), store_sales(ss_customer_sk, ss_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially when they are already indexed in the improvement set. Prioritize indexing columns that are used in filtering conditions and aggregation functions, as seen in the improvement index selection.\"}"], ["train_workload_random_59_9q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), item(i_item_id, i_item_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), store(s_store_sk)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid indexing columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in join conditions, filtering, and aggregation operations, especially those with high cardinality or involved in multiple queries.\"}"], ["train_workload_random_59_9q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), item(i_item_id, i_item_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), store(s_store_sk)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{\"rule\": \"Ensure that indexes are created on columns frequently used in join conditions and where clauses, especially for large tables. Avoid creating indexes on columns with low cardinality or those not involved in filtering or joining operations.\"}"], ["train_workload_random_59_9q", " [date_dim(d_date_sk), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number), item(i_current_price)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{rule: \"Prioritize indexing columns involved in join conditions and filters with high cardinality or frequent use across multiple queries, especially those that are part of large tables or have numeric types. Avoid over-indexing columns with low cardinality or those primarily used in group by or order by clauses unless they are frequently queried with filters.\"}"], ["train_workload_random_59_9q", "[date_dim(d_date_sk), item(i_item_sk), web_returns(wr_item_sk), customer_demographics(cd_marital_status), customer_address(ca_state), customer_demographics(cd_demo_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id), date_dim(d_year), date_dim(d_week_seq)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for columns frequently used in WHERE clauses and JOIN conditions. Prioritize indexing on date columns used in range queries and item keys used in joins.\"}"], ["train_workload_random_59_9q", "[date_dim(d_date_sk), item(i_item_sk), web_returns(wr_item_sk), customer_demographics(cd_marital_status), customer_address(ca_state), customer_demographics(cd_demo_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id), date_dim(d_year), date_dim(d_week_seq)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure that indexes on date columns used in WHERE clauses and JOIN conditions are maintained, especially for high cardinality columns like date_dim(d_date_sk) and item(i_item_sk). Avoid removing indexes on columns frequently used in JOINs and WHERE clauses across multiple queries, such as date_dim(d_date_sk) and item(i_item_sk), as this can lead to performance regressions.\"}"], ["train_workload_random_59_9q", "[date_dim(d_date_sk), item(i_item_sk), web_returns(wr_item_sk), customer_demographics(cd_marital_status), customer_address(ca_state), customer_demographics(cd_demo_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id), date_dim(d_year), date_dim(d_week_seq)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{rule: \"Prioritize indexing columns involved in join conditions and filters across multiple queries, especially those with high cardinality and frequent usage in WHERE clauses. Avoid redundant indexing on columns that are already covered by existing indexes in similar contexts.\"}"], ["train_workload_random_59_9q", " [date_dim(d_date_sk), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number), item(i_current_price)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple tables, especially when they are already indexed in other tables. Prioritize indexing columns that are used in filtering conditions and have high cardinality, such as date columns and price columns, to improve query performance.\"}"], ["train_workload_random_59_9q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), item(i_item_id, i_item_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), store(s_store_sk)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in WHERE clauses and are not already indexed, as they can significantly improve query performance by reducing the search space.\"}"], ["train_workload_random_59_9q", " [date_dim(d_date_sk), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number), item(i_current_price)]", " [customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), date_dim(d_date), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date columns with many unique values or columns frequently used in joins with large tables, unless they are frequently filtered or sorted on. Instead, focus on indexing columns that are frequently used in WHERE clauses with high selectivity, such as foreign keys or columns with a limited range of values.\"}"]], "train_workload_random_61_9q": [["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes, especially when they are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses and are not already indexed, focusing on those that filter large datasets or are involved in frequent joins.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{\"rule\": \"Avoid creating composite indexes that include columns already indexed individually, as this can lead to redundancy and potential performance regression. Instead, focus on maintaining individual indexes on frequently queried columns, especially those involved in joins and filters, such as foreign keys and date columns.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions that are not optimized by default.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are included in the regression index selection, especially when they are present in the improvement index selection. This includes columns like 'customer_address.ca_address_sk', 'item.i_item_id', and 'item.i_item_sk' which are used in multiple queries for joining and filtering.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{\"rule\": \"Ensure that the index selection includes composite indexes on frequently joined columns across tables, especially for large tables, and prioritize indexes on columns used in WHERE clauses with high selectivity. Avoid redundant indexes on columns that are already covered by composite indexes.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in the workload. Instead, focus on single-column indexes for columns that are consistently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be involved in multiple queries and can benefit from existing indexes. Instead, focus on indexing columns that are used in filtering conditions or aggregations, especially if they are not part of a foreign key relationship.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{rule: \"Ensure that the regression index selection includes composite indexes on columns frequently used together in join conditions and filters, especially for large tables. For example, consider creating composite indexes on (ss_item_sk, ss_sold_date_sk), (ws_item_sk, ws_sold_date_sk), and (cs_item_sk, cs_sold_date_sk) to optimize queries that join sales tables with date_dim and item tables.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses and are not already indexed, especially if they are used in multiple queries. Consider the selectivity and frequency of column usage in the workload to determine the necessity of an index.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in the workload. Instead, focus on single-column indexes for columns that are consistently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index in the improving selection, especially if they are frequently used in join conditions or subqueries. Instead, focus on indexing columns that are used in WHERE clauses or as join keys but are not covered by existing indexes.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are used in join conditions or subqueries. Instead, focus on indexing columns that are frequently filtered or aggregated, and ensure that indexes are not redundant with existing indexes on similar columns in related tables.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection unless they are part of a composite index that addresses a specific query pattern. Prioritize indexing columns involved in frequent joins and filters, especially those with high cardinality or those used in WHERE clauses across multiple queries.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality and low selectivity, as they may lead to regression by increasing index size and reducing performance. Instead, focus on single-column indexes for frequently filtered columns with high selectivity.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be involved in multiple queries and can benefit from existing indexes. Instead, focus on indexing columns that are used in filtering conditions or are part of aggregations, especially if they are not already indexed.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are used in joins or subqueries. Instead, focus on indexing columns that are frequently filtered or aggregated, and ensure that indexes are not redundant with existing indexes on similar columns in related tables.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{rule: \"Prioritize composite indexes over single-column indexes when multiple columns are frequently used together in WHERE clauses or JOIN conditions across multiple queries. Consider the frequency and combination of columns in the workload to identify potential composite indexes that can improve query performance.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, as this can lead to redundancy and potential performance regression. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, ensuring that each index serves a distinct purpose without overlapping with existing indexes.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index in the improving index selection, as this can lead to redundancy and potential regression. Instead, focus on creating composite indexes that cover multiple columns used together in queries, especially those involved in joins and filters, to optimize query performance.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are used in join conditions. Instead, focus on indexing columns that are frequently filtered or aggregated in queries, and ensure that indexes are not redundant with existing ones.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently used in query filters or joins. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that combine columns from different tables unless they are frequently used together in join conditions. Instead, focus on single-column indexes for columns that are frequently used in WHERE clauses or join conditions across multiple queries.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple queries, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in filtering conditions (e.g., WHERE clauses) and are not part of existing indexes or constraints.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included in the regression index selection, especially when they are present in the improvement index selection. This includes indexes on columns like 'customer_address.ca_address_sk', 'item.i_item_id', and 'item.i_item_sk' which are used frequently in join conditions across multiple queries.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses and are not already indexed, especially if they are used in multiple queries. Additionally, consider the selectivity of the column and the size of the table when deciding on indexing to prevent unnecessary overhead.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually if the individual indexes are sufficient for the workload. Composite indexes should be used when queries frequently filter or join on multiple columns together, and the individual indexes do not provide the necessary performance improvement.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index in the improvement selection, as this can lead to redundancy and potential regression. Instead, focus on creating indexes on columns that are frequently used in WHERE clauses and JOIN conditions but are not already covered by existing indexes.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are used in join conditions or subqueries. Instead, focus on indexing columns that are frequently filtered or aggregated, and ensure that indexes are not redundant with existing ones. Prioritize indexing columns that are used in WHERE clauses with specific values or ranges, and consider the overall query patterns and data distribution to optimize index selection.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are frequently used in join conditions across multiple queries, as this can lead to redundant indexing and potential performance regressions. Focus on indexing columns that are frequently filtered or aggregated in the workload and ensure that the indexes are aligned with the query patterns.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that combine columns from different tables unless they are frequently queried together in join conditions. Instead, focus on single-column indexes for columns that are used in WHERE clauses or join conditions across multiple queries.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables, to prevent regression. Additionally, prioritize indexing on columns frequently used in WHERE clauses and subqueries to optimize filtering and join operations.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included in the regression index selection, especially when they are present in the improvement index selection. This includes columns like 'customer_address.ca_address_sk', 'item.i_item_id', and 'item.i_item_sk' which are frequently used in join conditions across multiple queries.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are frequently used in join conditions across multiple queries, as this can lead to redundant indexing and potential performance regressions. Focus on indexing columns that are frequently filtered or aggregated in the workload and ensure that the indexes are aligned with the query patterns.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining operations across the workload.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple queries, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in filtering conditions (e.g., WHERE clauses) and are not part of existing indexes or constraints.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included in the regression index selection, especially when they are present in the improvement index selection. This includes columns like 'customer_address.ca_address_sk', 'item.i_item_id', and 'item.i_item_sk' which are frequently used in join conditions across multiple queries.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses and are not already indexed, especially if they are used in multiple queries. Additionally, consider the selectivity of the column and the size of the table when deciding to create an index.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the workload involves frequent joins and filters on those individual columns. Instead, focus on maintaining individual indexes on frequently joined or filtered columns to prevent regression.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be involved in multiple queries and can benefit from indexing. Additionally, prioritize indexing columns that are used in WHERE clauses with specific filters or are part of GROUP BY operations to improve query performance.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and filtering criteria across multiple tables, especially when they are frequently used in subqueries or common table expressions. Prioritize composite indexes on columns that are used together in join conditions to optimize query performance.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently used in query filters or joins. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality and those that are part of large tables.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in the workload. Instead, focus on single-column indexes for columns that are consistently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions that are not inherently optimized.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are used in join conditions. Instead, focus on indexing columns that are frequently filtered or aggregated in queries, and ensure that indexes are not redundant with existing ones.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses and have high cardinality, especially if they are used in filtering conditions or subqueries. Ensure that indexes are not redundant and do not overlap excessively with other indexes, as this can lead to performance regressions.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that combine columns with high cardinality and columns with low cardinality, especially when the workload involves frequent joins and filters on high cardinality columns. Instead, prioritize single-column indexes on high cardinality columns that are frequently used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions that are not inherently optimized.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are included in the regression index selection, especially when they are present in the improvement index selection. This includes indexes on columns like 'customer_address.ca_address_sk', 'item.i_item_id', and 'item.i_item_sk' which are used in multiple queries for joining and filtering.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are frequently used in join conditions across multiple queries, as this can lead to redundant indexing and potential performance regressions. Focus on indexing columns that are frequently filtered or aggregated in the workload and ensure that the indexes align with the query patterns.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that include columns already covered by single-column indexes, especially when the single-column indexes are frequently used in join conditions or WHERE clauses. Instead, focus on maintaining single-column indexes for high cardinality columns that are frequently used in filtering and joining operations.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing them with indexes on non-join columns or columns with low selectivity, as this can lead to performance regressions in join-heavy queries.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are used in join conditions. Instead, focus on indexing columns that are frequently used in WHERE clauses or subqueries to filter data, as these can significantly improve query performance by reducing the amount of data scanned.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses and are not already indexed, especially if they are used in multiple queries. Consider the selectivity and frequency of column usage in the workload to determine the necessity of an index.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear performance benefit for specific query patterns. Ensure that indexes on foreign key columns are maintained to support join operations efficiently.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index in the improving selection, especially if the composite index covers the same query patterns. Focus on maintaining or enhancing composite indexes that align with the workload's join and filter conditions.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are used in join conditions. Instead, focus on indexing columns that are frequently filtered or aggregated in the workload, and ensure that indexes are not redundant with existing ones.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes, especially when the existing indexes are composite and cover multiple columns used together in queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, and ensure that the indexes align with the query patterns in the workload.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that combine columns from different tables unless they are frequently queried together in join conditions. Instead, focus on single-column indexes for columns that are frequently used in WHERE clauses or join conditions across multiple queries.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple queries, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in filtering conditions (e.g., WHERE clauses) and are not part of existing indexes or constraints.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are used in join conditions or subqueries. Instead, focus on indexing columns that are frequently filtered or aggregated in the workload, and ensure that indexes are not redundant with existing indexes.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection, especially if they are frequently used in join conditions or filters across multiple queries. Focus on indexing columns that are used in WHERE clauses or JOIN conditions but are not yet indexed, and ensure that indexes are not redundant or overlapping with existing ones.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality and low selectivity, such as 'i_item_sk' and 'i_item_id' together, as they may lead to regression by increasing index size and reducing performance. Instead, focus on single-column indexes or composite indexes with columns that are frequently used together in WHERE clauses and have high selectivity.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple queries, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of subqueries, especially if they are not part of a foreign key relationship.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are used in join conditions. Instead, focus on indexing columns that are frequently filtered or aggregated in the workload, and ensure that indexes are not redundant with existing ones.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [web_sales(ws_item_sk), promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), store_sales(ss_sold_date_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), catalog_sales(cs_item_sk), date_dim(d_year), item(i_manufact_id), web_site(web_site_sk), catalog_returns(cr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_item_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk)].", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes, especially when the existing indexes are composite and cover multiple columns used together in queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, and ensure that the indexes align with the query patterns in the workload.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), store(s_store_id), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that combine columns with high cardinality and columns with low cardinality, as they may lead to inefficient index usage. Instead, focus on single-column indexes for high cardinality columns that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions that are not inherently optimized by the database engine.\"}"], ["train_workload_random_61_9q", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[store_sales(ss_item_sk), store_returns(sr_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), date_dim(d_date_sk), store(s_store_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), inventory(inv_item_sk), inventory(inv_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are used in join conditions. Instead, focus on indexing columns that are frequently filtered or aggregated in the workload queries.\"}"]], "train_workload_random_67_3q": [["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving date dimensions and demographic attributes. Avoid redundant indexes on columns already covered by composite indexes, and ensure indexes align with the workload's filtering and grouping needs.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not directly used in join conditions or filtering criteria. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and have high cardinality to improve query performance.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables or are part of foreign key relationships, as this can lead to redundant indexes and potential performance regressions. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially for columns frequently used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Ensure that composite indexes cover multiple columns that are used together in queries to improve performance.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those that filter large tables or are part of complex conditions. Avoid redundant indexes on columns that are already covered by existing indexes or are less frequently used in filtering operations.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that composite indexes cover multiple columns used in WHERE clauses, especially for columns frequently used together in join conditions or filters. Avoid single-column indexes when multi-column indexes can provide better coverage for complex queries.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes. Ensure that composite indexes are utilized effectively by analyzing query patterns and column usage. Prioritize composite indexes that cover multiple columns used together in WHERE clauses or JOIN conditions, especially for high cardinality columns.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Ensure that all necessary columns used in join conditions and filters are included in the index. Avoid removing columns that are frequently used in WHERE clauses or JOIN conditions, such as 'd_date_sk', 'ws_order_number', and 'wr_item_sk', as seen in the regression index.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those that filter large tables or are involved in complex conditions. Avoid redundant indexes on columns that are already covered by existing indexes or are less frequently used in filtering operations.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Avoid redundant indexes and prioritize composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across multiple queries, especially for high cardinality columns and large tables. Avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless there is a clear benefit in query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality. Remove redundant indexes that do not contribute to query performance improvement.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Ensure that composite indexes cover multiple columns that are used together in queries to improve query performance.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Prioritize composite indexes that cover multiple columns used in WHERE clauses and JOIN conditions, especially for columns frequently used together across multiple queries. Avoid redundant single-column indexes when composite indexes can provide broader coverage and efficiency.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{\"rule\": \"Ensure that indexes cover all join and filter conditions in the workload. Avoid creating indexes that only partially cover the workload's join and filter conditions, as this can lead to regressions. Specifically, include all necessary columns in composite indexes to support multi-column joins and filters, as seen in the improvement index selection.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across all queries in the workload. Prioritize indexes on columns with high cardinality and those frequently used in filtering conditions. Avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{\"rule\": \"Avoid creating redundant or overly broad indexes that cover columns already efficiently indexed in the improvement selection. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that the indexes are aligned with the query patterns to avoid unnecessary overhead.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes that cover multiple columns used together in WHERE clauses and JOIN conditions, such as (d_date_sk, d_year) for date_dim, (i_item_sk, i_item_id) for item, and (ws_item_sk, ws_order_number) for web_sales. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Prioritize composite indexes that include both primary keys and frequently filtered columns, especially those used in WHERE clauses and JOIN conditions. Avoid redundant single-column indexes when composite indexes can cover multiple query requirements.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance. Remove unnecessary indexes on columns that are not part of the query's critical path, such as those not involved in filtering or joining operations.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across multiple queries, especially for high cardinality columns and those involved in frequent filtering or joining operations. Avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{\"rule\": \"Avoid creating redundant or overly broad indexes that cover columns already efficiently indexed in the improvement selection. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that the indexes are aligned with the query patterns to avoid unnecessary overhead.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join or filter conditions of the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality or those that are part of composite keys in the workload.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes that include columns used in WHERE clauses and JOIN conditions, especially for tables with high row counts. Avoid redundant single-column indexes when composite indexes can serve the same purpose.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these are likely to be covered by existing indexes. Instead, focus on indexing columns that are used in WHERE clauses or GROUP BY operations, especially if they are not part of any existing index or foreign key relationship.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially those involved in joins and filters, to improve query performance and reduce unnecessary index overhead.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Avoid partial indexes that miss key columns used in joins or filters, especially for large tables. Prioritize composite indexes that include both join keys and filter columns to optimize query performance.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes that include columns frequently used together in WHERE clauses and JOIN conditions, especially for tables with high row counts. Avoid redundant indexes on single columns when composite indexes can serve the same purpose.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as unique identifiers or primary keys, when they are not used in filtering conditions. Instead, focus on columns frequently used in WHERE clauses or JOIN conditions with moderate cardinality and high selectivity.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes on columns already covered by other indexes in the workload.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes in the improvement selection. Focus on composite indexes that align with the query's filtering and joining conditions to prevent regression.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Prioritize composite indexes that include both join keys and frequently filtered columns, especially for large tables. Avoid single-column indexes on columns that are part of composite conditions unless they are frequently used independently.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes that include columns used in WHERE clauses and JOIN conditions, especially for tables with high row counts. Avoid redundant single-column indexes when composite indexes can serve the same purpose more efficiently.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join or filter conditions in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance. Remove indexes on columns that are not part of these conditions, as they may lead to regression by increasing maintenance overhead without providing query performance benefits.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables or are part of foreign key relationships, as this can lead to redundant indexes and potential performance regressions. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially those involved in joins and filters. Ensure indexes are aligned with the workload's query patterns, focusing on columns frequently used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Ensure that composite indexes cover multiple columns that are used together in queries to improve performance.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for columns involved in multiple queries or subqueries. Prioritize composite indexes that include both primary key and frequently filtered columns, and avoid redundant single-column indexes when composite indexes can be more effective.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{\"rule\": \"Ensure that indexes cover all join and filter conditions in the workload. Avoid creating indexes that only partially cover the workload, as this can lead to regressions. Specifically, include all necessary columns for joins and filters, such as 'd_date_sk' and 'd_year' for date_dim, and ensure that indexes on tables like 'web_sales' and 'web_returns' cover both 'order_number' and 'item_sk' to optimize joins and filters.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially those involved in joins and filters, to improve query performance and reduce unnecessary index overhead.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Prioritize composite indexes that include both join keys and filter columns, especially for high cardinality columns. Avoid single-column indexes on low cardinality columns unless they are frequently used in isolation for filtering.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes that include columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance. Remove indexes on columns that are not part of these operations, as they may lead to regression by increasing maintenance overhead without providing significant query performance benefits.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes include all columns used in WHERE clauses and JOIN conditions, especially for tables with high row counts. Prioritize indexes that cover multiple columns used together in queries to improve performance and avoid regressions.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used in conjunction with other columns in the workload. Prioritize composite indexes that cover multiple columns used together in queries, especially those involved in joins and filters.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Ensure that indexes cover both the join keys and the filtering conditions. Avoid creating indexes that only partially cover the filtering conditions or that do not include the most frequently used join keys. Prioritize composite indexes that include both join keys and filtering columns used in WHERE clauses.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently joined with primary key columns, as these are often already optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses with high selectivity or are part of GROUP BY and ORDER BY clauses to improve query performance.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Avoid redundant indexes and prioritize composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables or are not frequently used in WHERE clauses. Focus on indexing columns that are used in JOIN conditions and WHERE clauses with high selectivity, especially those that are used in multiple queries across the workload.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these are likely to be covered by existing indexes. Instead, focus on indexing columns that are used in WHERE clauses or GROUP BY operations that are not already indexed, especially if they are used in multiple queries.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Ensure that composite indexes cover multiple columns that are used together in queries to improve performance.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins and filters are prioritized, especially for large tables. Avoid redundant indexes on columns that are already covered by composite indexes or are not frequently filtered or joined on in the workload.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that all necessary columns used in WHERE clauses and JOIN conditions are indexed, especially those involved in filtering and joining large tables. Avoid redundant or partial indexes that do not cover all critical columns, as seen in the regression index where some necessary columns like 'd_date_sk' and 'ws_order_number' are missing.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all columns involved in WHERE clauses and JOIN conditions, especially for columns frequently used together in queries. Avoid creating indexes that only partially cover these conditions, as seen in the regression index where some indexes lack coverage for additional filtering or joining columns present in the workload.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes. Focus on composite indexes that cover multiple columns used together in queries, especially those involved in joins and filters. Prioritize indexes on columns with high cardinality and those frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Ensure that composite indexes cover multiple columns that are used together in queries to improve performance.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize composite indexes that include both primary key and frequently filtered columns, especially for tables with high row counts. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Avoid redundant indexes and prioritize composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes include all columns used in WHERE clauses and JOIN conditions, especially for tables with high row counts. Avoid single-column indexes when multiple columns are frequently queried together.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are part of foreign key relationships, especially when they are frequently used in joins. Prioritize indexing columns that are used in WHERE clauses and GROUP BY operations, and ensure that indexes are not redundant or overly broad, which can lead to performance regressions.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Ensure that indexes cover all join and filter columns used in the workload queries. Avoid removing indexes on primary key columns or columns frequently used in joins and filters, such as 'd_date_sk', 'i_item_sk', 'ca_address_sk', 'cd_demo_sk', 'ws_order_number', and 'wr_order_number'.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these are likely to be covered by existing indexes. Instead, focus on indexing columns that are used in WHERE clauses with high selectivity or are part of GROUP BY or ORDER BY clauses to improve query performance.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not directly involved in filtering or joining operations. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and have high cardinality to improve query performance.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Ensure that indexes cover all necessary columns used in WHERE clauses and JOIN conditions, especially for frequently queried tables. Avoid creating indexes that only partially cover the query requirements, as this can lead to regressions. For example, include both 'd_date_sk' and 'd_year' in the 'date_dim' index, and ensure 'i_item_sk' and 'i_item_id' are both indexed together in 'item'.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially when they are frequently used in WHERE clauses or JOIN conditions. Ensure that indexes align with the query patterns and avoid indexing columns individually if they are part of a composite index that already optimizes the query.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join or filter conditions in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance. Additionally, ensure that composite indexes are created on columns that are used together in queries to optimize multi-column lookups.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently joined, as these are likely to be covered by existing indexes. Instead, focus on indexing columns that are used in WHERE clauses with high selectivity or are frequently grouped or ordered by, as seen in the improvement index selection.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not directly involved in filtering or joining operations in the workload. Prioritize indexes on columns frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially those with high cardinality.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes include all columns used in WHERE clauses and JOIN conditions, especially for columns frequently filtered or joined in the workload. Avoid single-column indexes when multiple columns are consistently used together in queries.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially for columns frequently used in WHERE clauses and JOIN conditions. Ensure indexes align with query patterns and avoid single-column indexes if a composite index can serve the same purpose efficiently.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality or those that are part of composite keys. Additionally, ensure that indexes align with the specific columns used in the workload's filtering and aggregation operations to prevent regression.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid redundant indexes on columns that are already covered by composite indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially those that combine join keys and frequently filtered columns.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{\"rule\": \"Ensure that indexes cover all join and filter conditions in the workload. Avoid creating indexes that only partially cover the query conditions, especially when multiple columns are involved in joins or filters. Prioritize composite indexes that match the query patterns, such as those involving multiple columns in WHERE clauses or JOIN conditions, to prevent regressions.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all columns involved in WHERE clauses and JOIN conditions, especially for columns frequently used together in queries. Avoid creating indexes that only partially cover query conditions, as this can lead to regressions in query performance.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{\"rule\": \"Avoid creating composite indexes with only one column from each table when multiple columns from the same table are frequently used together in queries. Instead, create composite indexes that include all relevant columns from the same table to optimize query performance.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions, especially for high cardinality columns. Avoid redundant indexes on columns already covered by composite indexes. Prioritize indexes on columns frequently used in filtering and joining operations across multiple queries.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), web_page(wp_web_page_sk), catalog_sales(cs_item_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions and frequently filtered columns are prioritized over indexes on columns that are not directly involved in join conditions or filtering, especially when dealing with large tables. Avoid redundant indexes on columns that are already covered by composite indexes.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), web_page(wp_web_page_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover all columns used in WHERE clauses and JOIN conditions, especially for tables with high row counts. Prioritize composite indexes that include multiple columns used together frequently in queries, such as date_dim(d_date_sk, d_year, d_date) and item(i_item_sk, i_item_id). Avoid single-column indexes when multiple columns are consistently used together in queries.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk), customer_demographics(cd_education_status, cd_marital_status, cd_demo_sk), customer_address(ca_state)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "{\"rule\": \"Avoid creating redundant or overly broad indexes that cover columns already efficiently indexed in the improvement selection. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that the indexes are aligned with the query patterns to prevent regression.\"}"], ["train_workload_random_67_3q", "[date_dim(d_date_sk, d_year, d_date), item(i_item_sk, i_item_id), web_page(wp_web_page_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), web_sales(ws_item_sk, ws_order_number), web_returns(wr_order_number, wr_item_sk)]", " [date_dim(d_date), item(i_item_id, i_item_sk), customer_address(ca_address_sk), customer_demographics(cd_marital_status), web_page(wp_web_page_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries. Prioritize composite indexes that include both join keys and frequently filtered columns. Avoid single-column indexes when multiple columns are involved in joins or filters.\"}"]], "train_workload_random_69_9q": [["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Ensure composite indexes include columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Prioritize indexes on columns involved in filtering and joining operations across multiple queries, and consider the inclusion of columns used in ORDER BY and GROUP BY clauses to optimize query performance.\"\n}\n```"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Missing indexes on frequently joined or filtered columns, such as 'date_dim.d_date_sk', 'customer_demographics.cd_demo_sk', and 'item.i_manufact_id', can lead to regressions. Additionally, composite indexes should be considered for columns used together in conditions, like 'store_sales.ss_sold_date_sk' and 'store_sales.ss_net_profit', to optimize query performance.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or columns that are frequently used in range queries. Instead, focus on single-column indexes for columns that are frequently used in join conditions or as foreign keys, and ensure that indexes are created on columns that are used in WHERE clauses with equality conditions.\"}"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not directly used in join or filter conditions. Focus on single-column indexes for primary keys and foreign keys used in joins, and columns frequently used in WHERE clauses.\"}"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Focus on single-column indexes for high cardinality columns that are consistently used in filtering conditions.\"\n}\n```"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already covered by individual indexes, especially when the workload involves frequent joins and filters on those individual columns. Instead, prioritize single-column indexes that align with the most common join and filter conditions in the workload.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across multiple queries, especially those involving large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and consider composite indexes for columns that are often queried together.\"}"], ["train_workload_random_69_9q", "[store_sales(ss_ticket_number), web_sales(ws_item_sk), call_center(cc_call_center_id)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing index maintenance overhead and reducing query performance. Instead, focus on single-column indexes for such columns to optimize join operations.\"}"], ["train_workload_random_69_9q", "[store_sales(ss_ticket_number), web_sales(ws_item_sk), call_center(cc_call_center_id)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Avoid creating composite indexes that include columns already indexed individually in the improvement set, especially when the workload involves frequent joins or filters on those columns. Prioritize single-column indexes for columns with high cardinality or frequent use in WHERE clauses, and ensure that composite indexes do not overlap with existing single-column indexes unless necessary for specific query patterns.\"\n}\n```"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already covered by single-column indexes in the improvement set, especially when the workload involves joins and filters on these columns. Instead, prioritize single-column indexes that align with the workload's join and filter conditions.\"}"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in filtering conditions and have lower cardinality for better performance.\"}"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not directly used in join or filter conditions. Focus on single-column indexes for primary keys and foreign keys used in joins, and columns frequently used in WHERE clauses.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Ensure indexes on columns involved in join conditions and filters are single-column indexes unless multi-column indexes are explicitly needed for compound conditions. Avoid unnecessary multi-column indexes that do not match the query patterns.\"\n}\n```"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on date columns used in join conditions or filters are not removed, especially if they are frequently used across multiple queries, as this can lead to performance regressions.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently queried together in the workload. Instead, focus on single-column indexes for columns that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining operations, especially in large tables.\"}"], ["train_workload_random_69_9q", "[store_sales(ss_ticket_number), web_sales(ws_item_sk), call_center(cc_call_center_id)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Avoid creating composite indexes that include columns already indexed individually, especially when the individual indexes are frequently used in the workload. Prioritize single-column indexes for columns that are used in join conditions or filters across multiple queries, and ensure that these columns are not redundantly included in composite indexes.\"\n}\n```"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating composite indexes (I(C ...)) on columns that are already covered by individual indexes in the improvement selection, especially when the workload involves multiple joins and filters on these columns. Instead, focus on maintaining or enhancing individual indexes that directly support the most frequent join and filter conditions in the workload.\"}"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in filtering and joining operations, especially those with high selectivity, to prevent regression in query performance.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid regression by maintaining indexes on columns frequently used together in WHERE clauses and JOINs, such as date keys and item identifiers.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Ensure indexes on columns involved in join conditions and filters across multiple queries, especially those with high cardinality or frequently used in WHERE clauses. Avoid redundant composite indexes when single-column indexes suffice for query optimization.\"\n}\n```"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all frequently joined and filtered columns across queries are indexed, especially those involved in date filtering and profit calculations. Avoid removing indexes on columns that are part of multi-column indexes used in the workload, such as date and profit columns, as well as item and order number columns.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters, especially for large tables. Prioritize composite indexes that include frequently queried columns together, such as date columns with other filter columns, to optimize query performance. Avoid single-column indexes on columns with high cardinality unless they are frequently used in isolation.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Ensure composite indexes cover all columns used in join conditions and filters, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries. Avoid regression by maintaining composite indexes that include both primary key and foreign key columns, and ensure indexes are aligned with query patterns involving date ranges and aggregations.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Avoid creating composite indexes that include columns already covered by single-column indexes unless there is a clear benefit in query performance. Ensure that indexes on foreign key columns are maintained, as they are often used in join conditions. Additionally, prioritize indexing columns that are frequently used in WHERE clauses and join conditions across multiple queries.\"\n}\n```"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on date columns used in WHERE clauses for filtering by date ranges are maintained or added, especially when they are frequently used across multiple queries.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize composite indexes that align with query patterns, such as those involving date ranges, customer identifiers, and item identifiers. Avoid single-column indexes on columns that are frequently used in conjunction with others in join or filter conditions.\"}"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not directly used in join or filter conditions. Focus on single-column indexes for primary keys and foreign keys used in joins, and columns frequently used in WHERE clauses.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Ensure that multi-column indexes are preserved when they are beneficial for query performance, especially for columns frequently used together in WHERE clauses or JOIN conditions. Avoid replacing them with single-column indexes unless there is a clear performance benefit. Additionally, maintain indexes on columns involved in ORDER BY and GROUP BY clauses to optimize sorting and aggregation operations.\"\n}\n```"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as date columns and foreign keys. Additionally, consider composite indexes for columns that are often queried together to optimize query performance.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover single columns used in aggregation or sorting without considering their use in joins or filters.\"}"], ["train_workload_random_69_9q", "[store_sales(ss_ticket_number), web_sales(ws_item_sk), call_center(cc_call_center_id)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing the complexity and size of the index unnecessarily. Instead, focus on single-column indexes for such columns to optimize join performance.\"}"], ["train_workload_random_69_9q", "[store_sales(ss_ticket_number), web_sales(ws_item_sk), call_center(cc_call_center_id)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Avoid creating composite indexes that include columns already indexed individually unless the composite index significantly improves query performance. Prioritize single-column indexes for columns frequently used in WHERE clauses or JOIN conditions, especially for large tables.\"\n}\n```"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date columns and foreign keys. Additionally, consider composite indexes for columns used together in queries to optimize performance.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions, especially for large tables. Avoid indexes that only cover a single column when multi-column indexes can optimize multiple query conditions. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and consider composite indexes for columns often queried together.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining operations across the workload.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Ensure indexes on columns involved in join conditions and filters across multiple queries, especially those with high cardinality or frequently used in WHERE clauses. Prioritize single-column indexes for columns used in multiple queries and avoid multi-column indexes unless they significantly improve query performance for specific cases.\"\n}\n```"], ["train_workload_random_69_9q", "[store_sales(ss_ticket_number), web_sales(ws_item_sk), call_center(cc_call_center_id)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Instead, focus on single-column indexes for columns that are frequently filtered or joined on, as seen in the improvement index selection.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions, especially for large tables. Prioritize composite indexes that match query patterns, such as those involving date ranges or multiple conditions. Avoid indexes on columns with low cardinality or those not frequently filtered or joined.\"}"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not directly used in join or filter conditions. Focus on single-column indexes for primary keys and foreign keys used in joins, and columns frequently used in WHERE clauses.\"}"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Avoid creating composite indexes on columns that are already indexed individually and ensure indexes are aligned with the most frequently queried columns in the workload. Prioritize indexing columns involved in join conditions and filters, especially those with high cardinality or frequently used in WHERE clauses.\"\n}\n```"], ["train_workload_random_69_9q", "[store_sales(ss_ticket_number), web_sales(ws_item_sk), call_center(cc_call_center_id)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in query predicates, especially when single-column indexes on high cardinality columns can provide better performance. Prioritize indexing columns that are used in join conditions and where clauses across multiple queries in the workload.\"}"], ["train_workload_random_69_9q", "[store_sales(ss_ticket_number), web_sales(ws_item_sk), call_center(cc_call_center_id)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating multi-column indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for high cardinality columns that are frequently filtered or joined on, and ensure indexes align with the most common query patterns in the workload.\"}"], ["train_workload_random_69_9q", "[store_sales(ss_ticket_number), web_sales(ws_item_sk), call_center(cc_call_center_id)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used in join conditions across multiple queries, especially when the columns are part of foreign key relationships. Instead, focus on single-column indexes for these columns to optimize join performance.\"}"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Avoid creating composite indexes on columns that are already indexed individually and frequently used in join conditions across multiple queries. Instead, prioritize single-column indexes for columns that are consistently used in WHERE clauses and join conditions to improve query performance without redundancy.\"\n}\n```"], ["train_workload_random_69_9q", "[store_sales(ss_ticket_number), web_sales(ws_item_sk), call_center(cc_call_center_id)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these are likely to be covered by existing indexes or can lead to redundant indexing. Instead, focus on indexing columns that are used in WHERE clauses, GROUP BY, or ORDER BY operations that are not already indexed.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently queried together in the workload. Instead, focus on single-column indexes for columns that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering conditions across multiple queries.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Ensure multi-column indexes include columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Prioritize indexes on columns involved in filtering and joining operations across multiple queries, and consider the inclusion of columns used in ORDER BY and GROUP BY clauses to optimize query performance.\"\n}\n```"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already covered by single-column indexes in the improvement set, especially when the workload involves multiple joins and filters on these columns. Instead, prioritize single-column indexes that align with the workload's join and filter conditions.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions, especially for large tables. Avoid indexes that only cover single columns used in aggregations without considering their role in joins or filters.\"}"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not directly used in join or filter conditions, especially when single-column indexes on frequently joined or filtered columns (e.g., foreign keys) are more effective.\"}"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Avoid creating composite indexes on columns that are already indexed individually and ensure indexes are aligned with the most frequently joined columns across queries. Prioritize indexing columns involved in WHERE clauses and JOIN conditions that appear consistently across the workload.\"\n}\n```"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date columns and foreign keys. Additionally, consider composite indexes for columns used together in filter conditions to optimize query performance.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover a single column when multiple columns are frequently used together in queries, especially in join conditions. Prioritize composite indexes that align with the query patterns, such as those involving multiple tables and conditions, to prevent regression.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Avoid multi-column indexes when single-column indexes are sufficient for query conditions. Prioritize single-column indexes on frequently joined or filtered columns, especially those involved in equality conditions.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries. Prioritize composite indexes on columns frequently used together in join conditions, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"\n}\n```"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on date columns used in join conditions or where clauses are consistently applied across all relevant tables in the workload to prevent regression.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in WHERE clauses or JOIN conditions. Instead, prioritize single-column indexes for such columns to optimize query performance.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Ensure that composite indexes in the regression selection do not replace single-column indexes that are frequently used in join conditions or where clauses, especially for large tables. Maintain single-column indexes for primary key and foreign key columns that are heavily used in the workload.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Avoid creating composite indexes that include columns already indexed individually unless the composite index significantly improves query performance. Prioritize single-column indexes for columns frequently used in WHERE clauses and JOIN conditions across multiple queries.\"\n}\n```"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually and are frequently used in join conditions across multiple queries. Instead, prioritize single-column indexes on primary keys and foreign keys that are consistently used in join conditions, such as date_dim(d_date_sk), customer_address(ca_state), and customer(c_customer_sk).\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Ensure indexes cover join and filter conditions in queries. Prioritize composite indexes on columns frequently used together in WHERE clauses, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are frequently used in isolation. Consider the workload's query patterns and ensure indexes align with the most common and costly operations.\"}"], ["train_workload_random_69_9q", "[date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not directly used in join or filter conditions. Focus on single-column indexes for primary keys and foreign keys used in joins, and columns frequently used in WHERE clauses.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [store(s_store_sk), date_dim(d_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), item(i_item_sk), promotion(p_promo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), customer(c_customer_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_ticket_number)]\n```", "```json\n{\n    \"rule\": \"Ensure that multi-column indexes are preserved when they are used in the workload, especially for columns that are frequently joined or filtered together. Avoid replacing multi-column indexes with single-column indexes if the workload involves complex queries with multiple conditions on those columns.\"\n}\n```"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter columns used in the workload queries. Missing indexes on frequently joined or filtered columns can lead to regressions. Specifically, ensure indexes on columns like 'date_dim.d_date_sk', 'customer_demographics.cd_demo_sk', 'item.i_item_id', 'item.i_manufact_id', 'store_returns.sr_returned_date_sk', 'catalog_sales.cs_sold_date_sk', and composite indexes that combine join and filter columns such as 'date_dim.d_date_sk' with 'date_dim.d_date' or 'store_sales.ss_sold_date_sk' with 'store_sales.ss_net_profit'.\"}"], ["train_workload_random_69_9q", "[store_sales(ss_ticket_number), web_sales(ws_item_sk), call_center(cc_call_center_id)]", "[item(i_manufact_id, i_item_id), store_returns(sr_return_amt), customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_order_number), catalog_returns(cr_return_amount), household_demographics(hd_demo_sk), web_returns(wr_item_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions or aggregations. Prioritize indexing columns that are used in WHERE clauses with equality conditions and have lower cardinality, as well as columns involved in ORDER BY or GROUP BY clauses.\"}"], ["train_workload_random_69_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [Date_dim(d_date, d_year), Item(i_item_sk, i_manufact_id), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_demo_sk)]", "{rule: \"Ensure that multi-column indexes are used for columns frequently queried together, especially in join and filter conditions, to prevent regression. Prioritize indexes on columns with high cardinality and those involved in WHERE clauses, GROUP BY, and ORDER BY operations.\"}"]], "train_workload_random_2_10q": [["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'wr_item_sk' and 'wr_order_number' in 'web_returns', unless they are frequently used in join conditions or WHERE clauses. Instead, focus on indexing columns that are used in WHERE clauses with equality conditions or are part of join conditions, like 'ca_address_sk' in 'customer_address' and 'cd_demo_sk' in 'customer_demographics'. Additionally, consider composite indexes for columns that are often queried together, such as 'ca_gmt_offset' and 'ca_address_sk' in 'customer_address'.\"}"], ["train_workload_random_2_10q", "[date_dim(d_date_sk, d_date, d_week_seq), customer_address(ca_address_sk, ca_gmt_offset), store(s_store_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_id, i_item_sk), household_demographics(hd_buy_potential), web_sales(ws_order_number, ws_item_sk, ws_bill_customer_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), catalog_returns(cr_returned_date_sk, cr_item_sk)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{\"rule\": \"Ensure that indexes cover all join and filter conditions in the workload. Specifically, include composite indexes that cover multiple columns used together in joins or filters, such as (wr_item_sk, wr_order_number) for web_returns, (ws_order_number, ws_item_sk, ws_bill_customer_sk) for web_sales, and (cs_item_sk, cs_order_number) for catalog_sales. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables with similar usage patterns, especially when they are used in join conditions across multiple tables. Prioritize indexing columns that are frequently used in WHERE clauses and join conditions, but ensure they are not redundant with existing indexes in related tables.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{rule: \"Avoid using indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries. Instead, prioritize indexing columns that are used in WHERE clauses with high cardinality, and columns that are frequently involved in join conditions with high cardinality, as these can significantly improve query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in equality conditions across multiple queries, as they may not provide significant performance benefits and can lead to regression. Instead, focus on indexing columns that are used in join conditions or have high cardinality, and consider composite indexes for columns that are often queried together.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Avoid creating indexes on columns that are already heavily used in join conditions across multiple queries, especially if they are primary keys or foreign keys in large tables. Instead, focus on indexing columns that are frequently filtered or aggregated, and ensure that indexes are created on columns that are used in WHERE clauses with high selectivity.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_2_10q", " [customer_address(ca_gmt_offset), customer_demographics(cd_marital_status, cd_education_status)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions or are part of smaller tables to improve query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid using indexes on columns with high cardinality and low selectivity, such as date columns or columns with many unique values, unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered or joined on, especially those with lower cardinality and higher selectivity.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Avoid single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are involved in JOINs, WHERE conditions, and have high cardinality to improve query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Prioritize indexes on columns with high cardinality and those involved in range queries or inequality conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid omitting critical columns from composite indexes that are frequently used together in queries.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently joined together or filtered together in WHERE clauses, especially for large tables. Avoid using single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially if they are used in multiple queries. Consider the frequency and complexity of queries when selecting indexes to prevent regression.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{rule: \"Avoid using indexes on columns with low cardinality or columns that are frequently used in join conditions across large tables. Instead, prioritize indexing columns that are used in WHERE clauses with high cardinality and columns that are frequently involved in join conditions with smaller tables.\"}"], ["train_workload_random_2_10q", "[date_dim(d_date_sk, d_date, d_week_seq), customer_address(ca_address_sk, ca_gmt_offset), store(s_store_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_id, i_item_sk), household_demographics(hd_buy_potential), web_sales(ws_order_number, ws_item_sk, ws_bill_customer_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), catalog_returns(cr_returned_date_sk, cr_item_sk)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{rule: \"Ensure that indexes cover both the join keys and the filtering conditions. Avoid creating indexes that only cover a single column used in filtering without considering the join keys, as this can lead to regressions in query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, and avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or columns that are frequently used in equality predicates, as they may not provide significant performance benefits and can lead to regression. Instead, focus on single-column indexes for such columns, especially when they are used in join conditions or where clauses.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating composite indexes that only partially cover query conditions, especially when single-column indexes can be more effective for high cardinality columns used in joins and filters.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid using indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries. Instead, prioritize indexing columns that are used in WHERE clauses with high cardinality and columns involved in frequent join operations.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure indexes cover join and filter conditions, especially for large tables. Avoid indexes on columns with high cardinality or low selectivity unless they are frequently used in WHERE clauses. Prioritize composite indexes that match query patterns, such as (wr_item_sk, wr_order_number) for web_returns, to optimize multi-column conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Avoid indexing columns with low cardinality or non-selective attributes, especially when they are used in equality conditions or join predicates. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and have high cardinality or are part of composite keys.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, and avoid removing indexes on columns frequently used in WHERE clauses, especially those involving range conditions or high cardinality columns.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'customer_demographics(cd_marital_status)'. Instead, focus on composite indexes that cover multiple columns involved in join conditions or where clauses, like 'store_sales(ss_sold_date_sk, ss_promo_sk)' or 'store_returns(sr_ticket_number, sr_returned_date_sk, sr_item_sk)'.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{\"rule\": \"Ensure composite indexes are used for columns frequently involved in join conditions and where clauses, especially for large tables. Avoid single-column indexes when multiple columns are often queried together, as seen in the improvement index selection with composite indexes on store_sales and store_returns.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables with similar names or purposes, especially when they are used in join conditions across multiple queries. Prioritize indexing columns that are frequently used in WHERE clauses and join conditions, and ensure that indexes are not redundant across tables.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid replacing composite indexes with single-column indexes unless the single column is independently significant in the workload.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently queried together, especially in large tables, and avoid replacing them with single-column indexes that do not cover the same query patterns.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Avoid relying solely on single-column indexes when queries involve complex conditions or multiple columns.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in join conditions or filters across multiple queries. Instead, prioritize single-column indexes for such columns to optimize query performance.\"}"], ["train_workload_random_2_10q", " [customer_address(ca_gmt_offset), customer_demographics(cd_marital_status, cd_education_status)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'd_date' in 'date_dim', unless they are frequently used in range queries or joins. Instead, focus on columns that are frequently filtered or joined with high selectivity, like 'ca_gmt_offset' in 'customer_address' and combinations of columns that are often queried together, such as 'cd_marital_status' and 'cd_education_status' in 'customer_demographics'.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure indexes cover join and filter conditions, especially for large tables. Avoid indexes on columns with high cardinality or low selectivity unless they are frequently used in WHERE clauses. Prioritize single-column indexes for foreign keys and columns involved in joins.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Ensure that indexes cover join and filter columns used in high-frequency queries. Avoid indexes on low-selectivity columns like 'cd_marital_status' and 'hd_buy_potential' unless they are part of a composite index that includes high-selectivity columns. Prioritize indexes on primary keys and foreign keys involved in joins, such as 'c_customer_sk', 'ca_address_sk', and 'cd_demo_sk', and ensure coverage of date columns used in range queries, like 'd_date_sk'.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions or filters. Instead, prioritize indexing columns that are used in equality conditions and have moderate cardinality, as well as columns that are part of foreign key relationships.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover filter conditions without considering join conditions, especially for large tables.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables. Prioritize indexes on foreign keys and columns with high cardinality used in joins and filters.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple queries, especially when they involve large tables. Avoid regressing to single-column indexes when multi-column indexes have shown improvement in query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{rule: \"Avoid using indexes on low cardinality columns such as 'cd_marital_status' and 'ca_state'. Instead, prioritize indexing high cardinality columns or those frequently used in joins and where clauses, such as 'ca_address_sk', 'cd_demo_sk', and 'order_number' columns in various tables.\"}"], ["train_workload_random_2_10q", "[date_dim(d_date_sk, d_date, d_week_seq), customer_address(ca_address_sk, ca_gmt_offset), store(s_store_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_id, i_item_sk), household_demographics(hd_buy_potential), web_sales(ws_order_number, ws_item_sk, ws_bill_customer_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), catalog_returns(cr_returned_date_sk, cr_item_sk)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{rule: \"Ensure indexes cover both join and filter conditions. Avoid single-column indexes on high cardinality columns used in filters without considering join conditions. Prioritize multi-column indexes that include both join keys and filter columns, especially for large tables.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing them with indexes on columns that are not frequently used in joins or filters, as this can lead to performance regressions.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid replacing composite indexes with single-column indexes unless the workload specifically benefits from it.\"}"], ["train_workload_random_2_10q", " [customer_address(ca_gmt_offset), customer_demographics(cd_marital_status, cd_education_status)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily used in joins or filters across multiple queries, as this can lead to regression by increasing the maintenance overhead and potentially causing suboptimal query plans. Instead, focus on indexing columns that are frequently used in selective filters or as part of unique constraints, and ensure that the indexes align with the most common query patterns.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Avoid indexes on columns with low cardinality or those not involved in frequent join/filter operations.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Prioritize indexes on columns involved in multiple queries and those with high cardinality. Avoid single-column indexes when multi-column conditions are present.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Avoid using indexes on columns with low cardinality or columns that are frequently used in join conditions across large tables. Instead, prioritize composite indexes on columns that are used together in WHERE clauses or join conditions, especially when they involve large tables or are part of complex queries.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure composite indexes cover multiple columns involved in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions or filters. Instead, prioritize indexing columns that are used in equality joins or filters with high selectivity, and consider composite indexes for columns that are often queried together.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid using single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover both join and filter conditions. Avoid removing indexes that are used in multiple queries, especially those involving large tables or frequent joins. Consider the impact on query performance when removing indexes that are used in complex queries with multiple joins and subqueries.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and where clauses, especially for large tables. Prioritize indexing columns that are frequently used in join conditions across multiple queries, such as foreign keys and date columns. Avoid indexing columns with low cardinality or those primarily used in equality conditions unless they are part of a composite index that supports a broader query pattern.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are frequently used in isolation.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize indexing columns involved in multiple join operations and those used in WHERE clauses across different queries. Avoid regression by maintaining indexes on columns frequently used in join conditions, such as date keys and foreign keys, and ensure they are not removed or replaced by less frequently used columns.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{\"rule\": \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{rule: \"Avoid creating composite indexes on columns with high cardinality and frequent use in join conditions, as they may lead to regressions. Instead, prefer single-column indexes for such columns to optimize join performance.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid using indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize composite indexes that cover multiple columns used together in queries, especially those involving JOINs and WHERE conditions. Ensure indexes are created on columns that are frequently filtered or joined, and avoid indexes on columns with high update frequency or low selectivity.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure that indexes on join keys and frequently filtered columns are maintained. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filters. Prioritize maintaining indexes on columns used in join conditions and where clauses, especially for large tables.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Ensure that indexes cover join and filter columns used in high-frequency queries, especially those involving large tables. Avoid indexes on low-selectivity columns or those not directly involved in joins or filters.\"}"], ["train_workload_random_2_10q", " [customer_address(ca_gmt_offset), customer_demographics(cd_marital_status, cd_education_status)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition or are frequently used in join conditions across multiple queries, as this can lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in WHERE clauses with filtering conditions or are part of GROUP BY and ORDER BY clauses to optimize query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions or filters. Instead, focus on indexing columns that are used in equality conditions and have moderate cardinality, as they can significantly improve query performance without causing regression.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover join keys without considering filter conditions, especially when the workload involves complex queries with multiple joins and filters.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables with similar names or purposes, especially when they are used in join conditions across multiple queries. Prioritize indexing columns that are frequently used in WHERE clauses or as join keys, and ensure that indexes are not redundant across tables.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{rule: \"Avoid indexing columns with high cardinality and low selectivity, such as 'cd_marital_status' and 'ca_state'. Instead, prioritize indexing columns that are frequently used in join conditions and have high cardinality, such as primary keys or foreign keys like 'ca_address_sk', 'cd_demo_sk', and 'order_number' columns.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'cd_education_status'. Instead, focus on composite indexes that cover multiple columns used together in WHERE clauses or JOIN conditions, especially for large tables like 'store_sales' and 'catalog_sales'.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Ensure that composite indexes are used for columns frequently queried together, especially in large tables, to prevent regression. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple join conditions and filters on those columns.\"}"], ["train_workload_random_2_10q", "[date_dim(d_date_sk, d_date, d_week_seq), customer_address(ca_address_sk, ca_gmt_offset), store(s_store_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_id, i_item_sk), household_demographics(hd_buy_potential), web_sales(ws_order_number, ws_item_sk, ws_bill_customer_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), catalog_returns(cr_returned_date_sk, cr_item_sk)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{\"rule\": \"Ensure that indexes cover all columns used in join conditions and filters, especially for large tables. Avoid omitting columns that are frequently used together in queries, such as composite keys or columns involved in multiple join conditions. Additionally, prioritize indexing columns that are used in WHERE clauses with high cardinality to improve query performance.\"}"], ["train_workload_random_2_10q", "[date_dim(d_date_sk, d_date, d_week_seq), customer_address(ca_address_sk, ca_gmt_offset), store(s_store_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_id, i_item_sk), household_demographics(hd_buy_potential), web_sales(ws_order_number, ws_item_sk, ws_bill_customer_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), catalog_returns(cr_returned_date_sk, cr_item_sk)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{\"rule\": \"Ensure that indexes cover all columns involved in join conditions and filters, especially for large tables. Prioritize composite indexes that include both primary key and foreign key columns used in joins, and columns frequently used in WHERE clauses. Avoid removing indexes that are part of composite keys unless they are redundant or not used in the workload.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid using indexes on non-primary key columns with high cardinality and low selectivity, especially when the workload involves frequent joins and aggregations. Instead, focus on indexing primary key columns or foreign key columns that are frequently used in join conditions and have high selectivity.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{\"rule\": \"Ensure that composite indexes are used for join and filter conditions involving multiple columns, especially for large tables. Avoid replacing composite indexes with single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Avoid using indexes on columns with low cardinality or columns that are frequently used in join conditions across large tables. Instead, prioritize composite indexes on columns involved in filtering and sorting operations, especially when they are part of complex queries with multiple joins.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Avoid single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes solely on columns with high cardinality or low selectivity, as they may not provide significant performance benefits. Consider composite indexes that align with the query's access patterns, especially for columns frequently used together in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for columns frequently used in WHERE clauses and JOIN operations. Avoid indexes on columns with low cardinality or those not involved in critical query paths.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Avoid relying solely on single-column indexes when queries involve complex conditions or multiple tables.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{rule: \"Avoid indexing columns with low cardinality or columns that are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses with high cardinality and columns involved in join conditions that are critical for query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing these with indexes on columns that are not frequently used in join conditions or where clauses, as this can lead to performance regressions.\"}"], ["train_workload_random_2_10q", "[date_dim(d_date_sk, d_date, d_week_seq), customer_address(ca_address_sk, ca_gmt_offset), store(s_store_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_id, i_item_sk), household_demographics(hd_buy_potential), web_sales(ws_order_number, ws_item_sk, ws_bill_customer_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), catalog_returns(cr_returned_date_sk, cr_item_sk)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes for columns frequently used together in joins and filters, such as date keys and customer keys, to prevent regressions.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or columns that are frequently used in equality predicates, as they may lead to regressions. Instead, focus on single-column indexes for primary keys and foreign keys, and consider the query patterns and join conditions to optimize index selection.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in join conditions across multiple queries. Instead, prefer single-column indexes for such columns to optimize join performance.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure that composite indexes are used for join and filter conditions involving multiple columns, especially for large tables. Avoid replacing composite indexes with single-column indexes unless the workload specifically benefits from it. Prioritize indexing on columns frequently used in join conditions and where clauses, particularly those with high cardinality.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{\"rule\": \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple tables, especially when dealing with large datasets. Prioritize indexes that cover multiple columns used together in queries, such as (wr_item_sk, wr_order_number) or (ss_sold_date_sk, ss_promo_sk), to optimize query performance and prevent regressions.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Ensure that indexes cover join and filter columns used in high-frequency queries, especially those involving large tables. Avoid replacing composite indexes with single-column indexes if the composite index covers multiple query conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for columns frequently used in WHERE clauses and JOIN operations. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_2_10q", "[date_dim(d_date_sk, d_date, d_week_seq), customer_address(ca_address_sk, ca_gmt_offset), store(s_store_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_id, i_item_sk), household_demographics(hd_buy_potential), web_sales(ws_order_number, ws_item_sk, ws_bill_customer_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), catalog_returns(cr_returned_date_sk, cr_item_sk)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid removing indexes that support multiple queries or complex conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently involved in join operations and filtering conditions, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure that composite indexes are maintained for frequently joined columns and columns used in WHERE clauses, especially for large tables. Avoid reducing composite indexes to single-column indexes if the workload involves complex joins and filters across multiple columns.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are prioritized. Avoid creating indexes on columns with low cardinality or those that are not part of join conditions or where clauses in the workload.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{rule: \"Avoid single-column indexes on high cardinality columns that are frequently used in join conditions or filters. Instead, consider composite indexes that cover multiple columns involved in the query predicates or joins, especially when dealing with large tables. Additionally, prioritize indexing columns that are used in WHERE clauses and JOIN conditions over columns used in SELECT or ORDER BY clauses.\"}"], ["train_workload_random_2_10q", " [customer_address(ca_gmt_offset), customer_demographics(cd_marital_status, cd_education_status)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across large tables, as they may lead to regression in query performance due to increased index maintenance overhead. Instead, focus on indexing columns that are used in filtering conditions or smaller tables to improve query performance.\"}"], ["train_workload_random_2_10q", " [customer_address(ca_gmt_offset), customer_demographics(cd_marital_status, cd_education_status)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index is frequently used in join conditions or filters across multiple queries. Prioritize single-column indexes on columns used in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{rule: \"Avoid multi-column indexes on columns with high cardinality and frequent use in join conditions; prefer single-column indexes on such columns to improve query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure that composite indexes are used for join and filter conditions involving multiple columns, especially for large tables. Avoid using single-column indexes on columns with high cardinality or low selectivity, as they may not provide significant performance benefits. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and ORDER BY clauses, and consider the workload's query patterns to determine the most beneficial indexes.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Avoid single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Avoid replacing composite indexes with single-column indexes when the workload involves complex joins and filters on multiple columns, especially when the composite index covers frequently queried columns in large tables.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Avoid single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes on columns with high cardinality or those frequently used in conjunction with other columns in queries.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover join keys without considering filter conditions, especially when the workload involves complex queries with multiple joins and filters. Prioritize composite indexes that include both join and filter columns to optimize query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and conditions on multiple columns.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{rule: \"Avoid indexing columns with low cardinality or columns that are frequently used in join conditions across multiple queries. Instead, prioritize indexing columns that are used in WHERE clauses with high cardinality, and columns that are frequently involved in JOIN operations with high cardinality, as seen in the improvement index selection.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent updates, especially if they are not used in join conditions or where clauses. Prioritize indexing columns that are frequently used in join conditions, where clauses, and have lower cardinality to improve query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple joins and conditions.\"}"], ["train_workload_random_2_10q", " [customer_address(ca_gmt_offset), customer_demographics(cd_marital_status, cd_education_status)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{\"rule\": \"Avoid creating composite indexes that include primary key columns or columns that are already indexed as foreign keys, as these can lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality and those that are not already covered by existing indexes.\"}"], ["train_workload_random_2_10q", "[date_dim(d_date_sk, d_date, d_week_seq), customer_address(ca_address_sk, ca_gmt_offset), store(s_store_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_id, i_item_sk), household_demographics(hd_buy_potential), web_sales(ws_order_number, ws_item_sk, ws_bill_customer_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), catalog_returns(cr_returned_date_sk, cr_item_sk)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{\"rule\": \"Ensure that indexes cover all join and filter columns used in the workload queries. Specifically, include composite indexes for columns frequently used together in joins and filters, such as (d_date_sk, d_date, d_week_seq) for date_dim, and (ca_address_sk, ca_gmt_offset) for customer_address. Avoid removing indexes that cover multiple columns used in conjunction, as seen in the regression index selection where such composite indexes were omitted.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are involved in JOINs, WHERE clauses, and have high cardinality to improve query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure that indexes on join keys and frequently filtered columns are maintained. Avoid removing indexes on columns that are used in join conditions or where clauses, especially if they are part of composite keys or have high cardinality. Prioritize maintaining indexes on columns that are used in multiple queries across the workload.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Avoid replacing composite indexes with single-column indexes when the workload involves complex joins and filters on multiple columns, as this can lead to performance regressions.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid replacing composite indexes with single-column indexes unless the workload specifically benefits from it. Maintain indexes on primary key columns and foreign key columns that are frequently used in joins.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure that composite indexes in the regression selection cover all join and filter conditions used in the workload queries, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently involved in join operations and filtering conditions, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple conditions.\"}"], ["train_workload_random_2_10q", "[date_dim(d_date_sk, d_date, d_week_seq), customer_address(ca_address_sk, ca_gmt_offset), store(s_store_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_id, i_item_sk), household_demographics(hd_buy_potential), web_sales(ws_order_number, ws_item_sk, ws_bill_customer_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), catalog_returns(cr_returned_date_sk, cr_item_sk)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover a single column when multiple columns are frequently used together in queries. Prioritize composite indexes that align with the query patterns, especially for large tables with frequent joins and filters.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Prioritize indexing columns that are part of composite keys or are frequently queried together, such as date keys and item keys, to optimize query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date columns in large tables, unless they are frequently used in WHERE clauses with equality conditions. Instead, focus on indexing foreign key columns and columns used in JOIN conditions, especially in large tables, to improve query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date keys and foreign keys, to prevent regressions.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or columns that are frequently used in join conditions. Instead, focus on single-column indexes for primary keys and foreign keys, and ensure that indexes are aligned with the most common query patterns, such as filtering and joining operations.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{rule: \"Avoid creating composite indexes on columns with low cardinality or columns that are frequently used in equality conditions separately. Instead, prioritize single-column indexes on high cardinality columns or columns frequently used in join conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are involved in JOINs, WHERE conditions, and have high cardinality to improve query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are part of join conditions or filters in the workload. Instead, focus on columns that are frequently used in WHERE clauses with equality conditions and have moderate cardinality, as well as columns involved in JOIN operations with high selectivity.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Ensure that indexes cover join and filter columns used in high-frequency queries, especially those involving large tables. Avoid indexes on low-selectivity columns or those not directly involved in joins or filters.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure that indexes on join keys and frequently filtered columns are maintained. Avoid removing indexes on columns that are used in join conditions or have high cardinality filters, such as order numbers and item keys, as these are critical for query performance.\"}"], ["train_workload_random_2_10q", "[date_dim(d_date_sk, d_date, d_week_seq), customer_address(ca_address_sk, ca_gmt_offset), store(s_store_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_id, i_item_sk), household_demographics(hd_buy_potential), web_sales(ws_order_number, ws_item_sk, ws_bill_customer_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), catalog_returns(cr_returned_date_sk, cr_item_sk)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Prioritize composite indexes that cover both join and filter conditions, and ensure that indexes on frequently filtered columns, such as date columns, are not removed.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed across multiple tables, especially if they are frequently used in join conditions. Instead, focus on indexing columns that are used in filtering conditions and are not already indexed, to improve query performance without redundancy.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when multiple columns are involved in the same query. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins or filters on multiple columns.\"}"], ["train_workload_random_2_10q", "[date_dim(d_date_sk, d_date, d_week_seq), customer_address(ca_address_sk, ca_gmt_offset), store(s_store_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_id, i_item_sk), household_demographics(hd_buy_potential), web_sales(ws_order_number, ws_item_sk, ws_bill_customer_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), catalog_returns(cr_returned_date_sk, cr_item_sk)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_2_10q", " [customer_address(ca_gmt_offset), customer_demographics(cd_marital_status, cd_education_status)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{rule: \"Avoid creating indexes on columns that are already heavily filtered or grouped in the workload, especially if they are part of large tables. Instead, focus on columns that are frequently joined or have selective filters, particularly in smaller tables or those with high cardinality.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Ensure that indexes cover join and filter conditions across all tables involved in the workload queries, especially for large tables and frequently joined columns. Avoid removing indexes that are used in multiple queries for join operations or where conditions, as this can lead to performance regressions.\"}"], ["train_workload_random_2_10q", " [customer_address(ca_gmt_offset), customer_demographics(cd_marital_status, cd_education_status)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes that include primary key columns or columns that are already indexed as foreign keys, as they may lead to redundant indexing and potential performance regressions.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in join conditions or filters, as this can lead to regression in query performance. Instead, prefer single-column indexes for such columns.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or high selectivity, such as boolean or status columns, unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently used in JOINs or WHERE clauses with high cardinality, such as primary keys or foreign keys.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Avoid single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Avoid using indexes on columns with low cardinality or columns that are frequently used in join conditions across large tables. Instead, prioritize indexing columns that are used in WHERE clauses with high cardinality and columns that are frequently used in join conditions with smaller tables.\"}"], ["train_workload_random_2_10q", "[date_dim(d_date_sk, d_date, d_week_seq), customer_address(ca_address_sk, ca_gmt_offset), store(s_store_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_id, i_item_sk), household_demographics(hd_buy_potential), web_sales(ws_order_number, ws_item_sk, ws_bill_customer_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), catalog_returns(cr_returned_date_sk, cr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes for columns frequently used together in joins and filters, such as (cs_item_sk, cs_order_number) for catalog_sales, and (ws_item_sk, ws_order_number) for web_sales. Additionally, consider indexes on columns used in WHERE clauses with specific values or ranges, like (d_date_sk, d_year) for date_dim, and (cd_demo_sk, cd_marital_status, cd_education_status) for customer_demographics.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions without considering the join conditions themselves. Instead, prioritize composite indexes that cover multiple columns involved in join conditions or filtering criteria, especially when they are used together in the workload queries.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for columns frequently used in WHERE clauses and JOIN operations. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_2_10q", " [customer_address(ca_gmt_offset), customer_demographics(cd_marital_status, cd_education_status)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and frequent updates, such as item identifiers in sales tables, unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are used in filtering conditions and have lower update frequency, such as demographic attributes or geographic offsets.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{rule: \"Avoid indexing columns with low cardinality or columns that are frequently used in equality conditions across multiple queries, as they may lead to regression in query performance. Instead, focus on indexing columns that are used in join conditions or have high cardinality, which can improve query performance.\"}"], ["train_workload_random_2_10q", " [customer_address(ca_gmt_offset), customer_demographics(cd_marital_status, cd_education_status)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition or filter condition in multiple queries, especially if they are frequently used in conjunction with other columns that have existing indexes. Instead, focus on indexing columns that are used in WHERE clauses or GROUP BY clauses independently and are not part of existing indexes.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Avoid replacing composite indexes with single-column indexes unless the workload specifically benefits from such a change.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or are frequently used in WHERE clauses with equality conditions, as they may lead to regressions by increasing index size and reducing selectivity. Instead, focus on single-column indexes for high cardinality columns or those frequently used in JOIN conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in join conditions across multiple queries. Instead, prioritize single-column indexes for such columns to optimize join performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid replacing composite indexes with single-column indexes when the workload involves multiple join conditions or filters on multiple columns from the same table. Ensure that indexes cover all columns involved in join conditions and filters to prevent regression.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{\"rule\": \"Ensure that composite indexes are used for join and filter conditions involving multiple columns, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple join and filter conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Ensure indexes cover join and filter conditions on large tables, especially for columns frequently used in WHERE clauses and JOIN operations. Avoid indexes on columns with low cardinality or those not directly involved in query conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, and avoid removing indexes on columns frequently used in WHERE clauses or as part of complex conditions, especially when they involve multiple tables or subqueries.\"}"], ["train_workload_random_2_10q", " [customer_address(ca_gmt_offset), customer_demographics(cd_marital_status, cd_education_status)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other columns that are frequently queried together, as this can lead to redundancy and potential regression in query performance. Instead, focus on creating composite indexes that align with the most common query patterns, ensuring that the indexed columns are used together in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently joined together or filtered in combination, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple joins and conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for columns frequently used in WHERE clauses and JOIN conditions. Prioritize composite indexes that can optimize multiple queries simultaneously, and avoid removing indexes that are critical for large tables or high-frequency operations.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{rule: \"Avoid using indexes on columns with low cardinality or columns involved in complex join conditions, especially when they are not frequently used in filtering or sorting operations. Prioritize indexing columns that are frequently used in WHERE clauses, have high cardinality, or are involved in equality joins.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in equality conditions across multiple queries, as they may not provide significant performance benefits and can lead to regression.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Ensure indexes are created on columns frequently used in join conditions and where clauses, especially for large tables. Prioritize composite indexes on columns that are used together in multiple queries, such as date keys and customer keys, to optimize query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{\"rule\": \"Ensure that composite indexes do not include columns that are not frequently used together in query predicates or join conditions. Prioritize single-column indexes on foreign keys and columns frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in join conditions or filters, as this can lead to regression by not fully optimizing for the most common access patterns. Instead, prioritize single-column indexes for such columns.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize composite indexes that cover multiple columns used together in queries, especially those involved in JOINs and WHERE conditions. Ensure indexes are created on columns that are frequently filtered or joined, and avoid indexes on columns that are primarily used for sorting or grouping unless they are also filtered or joined.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid single-column indexes when multiple columns are consistently queried together, as composite indexes can provide better performance.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Ensure that indexes cover join and filter columns used in high-frequency queries. Avoid indexes on low-selectivity columns like 'cd_marital_status' and 'hd_buy_potential' unless they are part of a composite index that includes high-selectivity columns. Prioritize indexes on foreign key columns and columns involved in range queries or aggregations.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when they are already covered by existing indexes. Instead, focus on indexing columns that are used in WHERE clauses or as part of complex conditions that filter large datasets, ensuring that the indexes align with the query patterns and workload requirements.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure that composite indexes are used for join and filter conditions involving multiple columns, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple joins and conditions on those columns.\"}"], ["train_workload_random_2_10q", " [customer_address(ca_gmt_offset), customer_demographics(cd_marital_status, cd_education_status)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple large tables, as this can lead to increased maintenance overhead and potential performance degradation. Instead, focus on indexing columns that are used in filtering conditions or are part of smaller tables to improve query performance without significant maintenance costs.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure that composite indexes are maintained for frequently joined columns and columns used in WHERE clauses, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple joins and conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{rule: \"Avoid using indexes on columns with low cardinality or columns involved in complex join conditions, especially when they are not frequently filtered or aggregated in the workload. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and have high cardinality to improve query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{rule: \"Ensure that indexes on date columns used in join conditions and where clauses are consistently applied across all sales tables (catalog_sales, store_sales, web_sales) to prevent regression. Additionally, maintain indexes on columns frequently used in join conditions, such as customer demographics and item identifiers, to optimize query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for large tables. Prioritize indexing columns used in WHERE clauses and JOIN conditions, and avoid removing indexes that are frequently used in multiple queries.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Avoid redundant indexes on columns already covered by existing indexes. Prioritize single-column indexes for high cardinality columns used in joins and filters.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{rule: \"Ensure that composite indexes in the regression selection cover all join and filter conditions used in the workload queries, similar to the improvement selection. Avoid omitting critical columns that are frequently used in joins or where clauses, such as 'd_date_sk' in 'date_dim' and 'cd_demo_sk' in 'customer_demographics', which are present in the improvement selection but missing or incomplete in the regression selection.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid using indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries. Instead, prioritize indexing columns that are used in WHERE clauses with high cardinality and columns that are frequently involved in join conditions with high cardinality.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used together in join conditions, as this can lead to redundancy and potential performance regressions. Instead, focus on indexing columns that are used independently in WHERE clauses or are not part of existing composite indexes.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Avoid using indexes on columns with low cardinality or columns that are frequently used in join conditions across large tables. Instead, prioritize composite indexes on columns involved in filtering and sorting operations, especially when they are part of large tables or frequently queried in the workload.\"}"], ["train_workload_random_2_10q", " [customer_address(ca_gmt_offset), customer_demographics(cd_marital_status, cd_education_status)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{\"rule\": \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently joined with other tables, as these are likely to be covered by existing indexes. Focus on indexing columns that are used in WHERE clauses with high selectivity or are part of GROUP BY and ORDER BY clauses to improve query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes cover all join and filter conditions in queries, especially for large tables. Avoid single-column indexes on columns with low cardinality or those frequently used in conjunction with other columns.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid using single-column indexes when multi-column indexes can optimize query performance by reducing the number of lookups and improving data retrieval efficiency.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple tables, especially when dealing with large datasets. Avoid relying solely on single-column indexes for such scenarios.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{rule: \"Avoid indexing columns with low cardinality or columns that are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses with high cardinality and columns that are frequently used in GROUP BY or ORDER BY clauses.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially if they are frequently used in join conditions or filters. Instead, prioritize indexing columns that are used in equality joins or filters with high selectivity, such as primary keys or foreign keys.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and conditions on multiple columns.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{rule: \"Ensure composite indexes cover all join and filter conditions in queries. Avoid single-column indexes when multiple columns are frequently used together in joins or filters. Prioritize indexes on columns involved in multiple query conditions, especially those with high cardinality or used in range queries.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{rule: \"Ensure that composite indexes cover all join and filter conditions in queries. Avoid removing indexes that are used in multiple queries, especially those involving large tables or frequent joins. Prioritize indexes on columns with high cardinality and those used in WHERE clauses, JOIN conditions, and ORDER BY clauses.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid using indexes on columns with high cardinality and low selectivity, such as date columns or columns with many unique values, unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered or joined on and have moderate cardinality, such as foreign keys or columns with repeated values.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure that indexes on join keys and frequently filtered columns are maintained. Avoid removing indexes on columns that are used in join conditions or where clauses, especially if they are part of composite keys or have high cardinality. Prioritize maintaining indexes on columns that are used in multiple queries across the workload.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Avoid using indexes on columns with low cardinality or columns that are frequently used in join conditions across large tables. Instead, prioritize indexing columns that are used in WHERE clauses with high cardinality and columns that are frequently involved in join conditions with smaller tables.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{\"rule\": \"Ensure that composite indexes are used for join and filter conditions involving multiple columns, especially when the workload involves complex queries with multiple joins and conditions. Avoid replacing composite indexes with single-column indexes unless the workload specifically benefits from such a change.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used in join conditions across multiple queries, as this can lead to redundancy and potential performance regressions. Instead, focus on indexing columns that are used in filtering conditions and are not part of existing composite indexes.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables. Prioritize indexes on foreign keys and columns with high cardinality used in filtering.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries. Prioritize composite indexes on columns frequently used together in join conditions, especially when they involve large tables. Avoid removing indexes that are used in multiple queries, particularly those that optimize join operations between large tables.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid relying solely on single-column indexes for complex queries that involve multiple tables and conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{rule: \"Ensure that composite indexes are used for columns frequently queried together, especially in join and where clauses, to prevent regression. Avoid replacing composite indexes with single-column indexes unless the workload specifically benefits from it.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Ensure that indexes cover join and filter conditions across all tables involved in the workload queries, especially for large tables and frequently joined columns. Avoid removing indexes that are used in multiple queries or are critical for join operations, such as those on foreign key columns and date columns used in filtering.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality and low selectivity, especially when they are not frequently used together in query filters or join conditions. Instead, focus on single-column indexes for such columns or composite indexes that align with frequent query patterns and join conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in WHERE clauses or JOIN conditions. Instead, prioritize single-column indexes for such columns to optimize query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid using indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries. Instead, prioritize indexing columns that are used in WHERE clauses with high cardinality and columns that are frequently involved in join operations to improve query performance.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure composite indexes cover multiple columns involved in join conditions and filters, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN operations across multiple queries. Avoid single-column indexes when multi-column indexes can optimize query performance by reducing the need for additional lookups.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and where clauses, especially those with high cardinality or frequently filtered, are maintained or improved. Avoid removing or downgrading indexes on such columns, as it can lead to performance regressions.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used together in join conditions. Instead, focus on indexing columns that are used in WHERE clauses or are part of frequent join conditions but are not already indexed. Additionally, prioritize indexing columns with high cardinality and those involved in filtering operations.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [web_returns(wr_item_sk, wr_order_number), customer_demographics(cd_marital_status), web_sales(ws_item_sk), catalog_sales(cs_item_sk), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure that composite indexes in the regression selection cover all join and filter conditions used in the workload queries, especially for large tables. Consider adding missing composite indexes from the improvement selection that cover multiple columns used together in joins or filters.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), catalog_sales(cs_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), customer_address(ca_state)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid missing indexes on frequently joined columns and columns used in WHERE clauses, especially for large tables. Prioritize composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_sales(ws_item_sk), web_returns(wr_order_number), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple queries, especially when they involve large tables. Avoid relying solely on single-column indexes for such scenarios.\"}"], ["train_workload_random_2_10q", "[date_dim(d_date_sk, d_date, d_week_seq), customer_address(ca_address_sk, ca_gmt_offset), store(s_store_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_id, i_item_sk), household_demographics(hd_buy_potential), web_sales(ws_order_number, ws_item_sk, ws_bill_customer_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), catalog_returns(cr_returned_date_sk, cr_item_sk)]", "[customer_demographics(cd_marital_status), customer_address(ca_state), date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_item_sk), store(s_store_sk), store_returns(sr_returned_date_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that composite indexes are used for join and filter conditions involving multiple columns, especially for large tables. Avoid using single-column indexes when queries frequently involve multiple columns in join or filter conditions.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_education_status)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for columns frequently used in WHERE clauses and JOIN operations. Avoid regression by maintaining indexes on columns involved in complex queries with multiple joins and conditions, such as date keys and identifiers used in joins.\"}"], ["train_workload_random_2_10q", "[date_dim(d_date_sk, d_date, d_week_seq), customer_address(ca_address_sk, ca_gmt_offset), store(s_store_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), item(i_item_id, i_item_sk), household_demographics(hd_buy_potential), web_sales(ws_order_number, ws_item_sk, ws_bill_customer_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk, cd_marital_status, cd_education_status), catalog_returns(cr_returned_date_sk, cr_item_sk)]", " [Store_sales(ss_sold_date_sk), Date_dim(d_date_sk), Customer(c_customer_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes on columns frequently used together in joins and filters, such as date keys and customer keys, to prevent regression.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Date_dim(d_date, d_date_sk), Customer_address(ca_address_sk, ca_gmt_offset), Item(i_item_id), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk), Customer_demographics(cd_marital_status), Customer(c_customer_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid replacing composite indexes with single-column indexes unless the workload specifically benefits from it. Maintain indexes on columns used in JOIN conditions and WHERE clauses across multiple queries.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_order_number, cr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk)]", "{rule: \"Ensure that composite indexes cover all join and filter conditions in queries. Avoid removing indexes that are used in multiple queries, especially those involving large tables or frequently joined columns. Prioritize indexes on columns with high cardinality and those used in WHERE clauses, JOIN conditions, and ORDER BY clauses.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", " [Date_dim(d_date), Promotion(p_promo_sk), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status), Web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries. Instead, prioritize indexing columns that are used in WHERE clauses with high cardinality and columns that are frequently used in join conditions with high cardinality.\"}"], ["train_workload_random_2_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are used in join conditions or filters with equality checks. Instead, focus on columns that are frequently used in WHERE clauses with range conditions or are part of foreign key relationships.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Household_demographics(hd_buy_potential), Store(s_store_sk)]", "{rule: \"Ensure that indexes cover join and filter columns used in high-frequency queries, especially those involving large tables. Avoid indexes on low-selectivity columns or those not directly involved in joins or filters.\"}"], ["train_workload_random_2_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_promo_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", " [catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_address(ca_gmt_offset, ca_address_sk), date_dim(d_date_sk), item(i_item_id), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Avoid single-column indexes when multiple columns are consistently queried together, as composite indexes can improve query performance by reducing the number of lookups needed.\"}"]], "train_workload_random_3_5q": [["train_workload_random_3_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Ensure that composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid removing indexes that cover multiple columns used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_3_5q", " [Item(i_item_id, i_item_sk), Customer_address(ca_address_sk), Date_dim(d_year, d_moy), Web_page(wp_web_page_sk), Household_demographics(hd_buy_potential)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality and low selectivity, such as 'i_category' in the 'Item' table, unless they are frequently used in filtering conditions. Instead, focus on indexing columns that are frequently used in join conditions and have high selectivity, such as 'i_item_sk' and 'ca_address_sk'. Additionally, ensure that indexes align with the most common query patterns, such as those involving date ranges or specific attributes like 'd_year' and 'd_moy' in the 'Date_dim' table.\"}"], ["train_workload_random_3_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes that include columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid indexes that only cover single columns when multiple columns are consistently used together in queries.\"}"], ["train_workload_random_3_5q", " [Item(i_item_id, i_item_sk), Date_dim(d_date, d_year)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be already optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or GROUP BY operations to improve query performance.\"}"], ["train_workload_random_3_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Avoid indexes that only partially cover conditions or focus on non-join attributes. Prioritize composite indexes that align with frequent join patterns and filter conditions, especially for large tables.\"}"], ["train_workload_random_3_5q", " [Item(i_item_id, i_item_sk), Date_dim(d_date, d_year)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently joined with other tables, as this can lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in WHERE clauses or as part of aggregations in the workload.\"}"], ["train_workload_random_3_5q", " [Item(i_item_id, i_item_sk), Date_dim(d_date, d_year)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be already optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or GROUP BY operations to improve query performance.\"}"], ["train_workload_random_3_5q", " [item(i_item_sk), catalog_sales(cs_item_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date_sk), web_page(wp_web_page_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_ticket_number), web_returns(wr_returned_date_sk), customer_demographics(cd_demo_sk), store_returns(sr_ticket_number), store_sales(ss_sold_date_sk)].", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Ensure indexes on columns used in WHERE clauses and JOIN conditions, especially for large tables. Avoid multi-column indexes that include columns not frequently used together in queries.\"}"], ["train_workload_random_3_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Avoid multi-column indexes that do not align with query patterns, especially when single-column indexes suffice for frequent join or filter conditions.\"}"], ["train_workload_random_3_5q", " [Date_dim(d_date_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk), Household_demographics(hd_buy_potential)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, as these can significantly improve query performance by reducing the search space.\"}"], ["train_workload_random_3_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating composite indexes that do not align with query patterns, such as those that include columns not used together in joins or filters. Prioritize single-column indexes on frequently joined or filtered columns, especially those with high cardinality, like date keys and item identifiers.\"}"], ["train_workload_random_3_5q", " [web_page(wp_web_page_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used in join or filter conditions, especially when single-column indexes on frequently joined or filtered columns (like 'wp_web_page_sk') are already effective.\"}"], ["train_workload_random_3_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions in queries. Prioritize composite indexes that include both foreign key columns and frequently filtered columns, especially for large tables. Avoid removing indexes that are used in multiple queries or are part of composite indexes that optimize both joins and filters.\"}"], ["train_workload_random_3_5q", " [Catalog_sales(cs_sold_date_sk), Store_sales(ss_sold_date_sk), Customer_demographics(cd_demo_sk), Web_page(wp_web_page_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Avoid creating composite indexes that include columns not directly involved in filtering or joining conditions, especially when they are used in subqueries or derived tables. Focus on single-column indexes for primary filtering and joining columns to prevent unnecessary complexity and potential performance regressions.\"}"], ["train_workload_random_3_5q", " [date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_page(wp_web_page_sk), web_returns(wr_returned_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_3_5q", "[date_dim(d_date_sk, d_date, d_week_seq), item(i_item_id, i_item_sk, i_category), customer_address(ca_address_sk), household_demographics(hd_buy_potential), web_sales(ws_item_sk, ws_order_number), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk, wr_return_amt), catalog_returns(cr_returned_date_sk, cr_item_sk), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_returned_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for large tables. Prioritize indexes on date columns used in range filters and on columns involved in joins across multiple queries.\"}"], ["train_workload_random_3_5q", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), customer_address(ca_address_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Item(i_category, i_item_id, i_item_sk), Customer_address(ca_address_sk), Web_page(wp_web_page_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize indexing columns involved in frequent joins and filters, especially those with high cardinality or used in WHERE clauses. Avoid redundant indexes on columns already covered by composite indexes.\"}"]], "train_workload_random_1_9q": [["train_workload_random_1_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries, as they may lead to performance regressions. Instead, focus on indexing columns that are used in WHERE clauses with high cardinality and columns that are frequently used in GROUP BY or ORDER BY clauses.\"}"], ["train_workload_random_1_9q", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), customer_address(ca_address_sk), customer(c_customer_sk, c_current_addr_sk), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes for primary keys and foreign keys that are consistently used across multiple queries. Ensure that composite indexes are only created when the combination of columns is frequently queried together, and avoid including columns that are not used in filtering or joining operations.\"}"], ["train_workload_random_1_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for large tables. Prioritize composite indexes on columns frequently used together in joins and filters, and ensure coverage for columns involved in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_1_9q", " [customer(c_customer_sk, c_current_addr_sk), date_dim(d_date_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'ca_state' in 'customer_address', and focus on columns frequently used in join conditions or filters, like 'd_date_sk' in 'date_dim' and 'c_customer_sk' in 'customer'.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk), customer_address(ca_address_sk), date_dim(d_date_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_1_9q", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), customer_address(ca_address_sk), customer(c_customer_sk, c_current_addr_sk), household_demographics(hd_demo_sk), web_site(web_site_sk)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes on date columns match the specific column used in the query conditions, such as 'd_date_sk' instead of 'd_date' when the query uses 'd_date_sk'. Additionally, include indexes on foreign key columns that are frequently joined, such as 'c_customer_sk' and 'c_current_addr_sk' in the 'customer' table, to prevent regressions.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk), customer_address(ca_address_sk), store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, and avoid replacing them with indexes on non-join columns or columns with high cardinality that are not frequently filtered in the workload.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk), customer_address(ca_address_sk), store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used in join or filter conditions, especially when they are not frequently queried together. Focus on single-column indexes for primary keys and foreign keys used in joins, and ensure that composite indexes are only created when multiple columns are consistently used together in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_1_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in joins or filters, such as foreign keys or date columns, as this can lead to performance regressions. Specifically, maintain indexes on columns like 'customer.c_customer_sk', 'item.i_item_sk', and 'date_dim.d_date_sk' which are heavily used in joins and filters across multiple queries.\"}"], ["train_workload_random_1_9q", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), customer(c_current_addr_sk), date_dim(d_date), household_demographics(hd_demo_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing these with indexes on columns that are not frequently used in join conditions or filtering, such as non-key attributes or attributes with low cardinality, unless there is a specific query pattern that benefits from such an index.\"}"], ["train_workload_random_1_9q", "[store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer_address(ca_address_sk), date_dim(d_date), web_returns(wr_item_sk), customer(c_customer_sk), web_sales(ws_item_sk), customer(c_current_addr_sk), customer_demographics(cd_demo_sk), store_returns(sr_cdemo_sk), catalog_returns(cr_item_sk)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for high cardinality columns that are frequently filtered or joined on, such as foreign keys and date columns.\"}"], ["train_workload_random_1_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes and ensure composite indexes are used where multiple columns are frequently queried together.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk), customer_address(ca_address_sk), date_dim(d_date_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{rule: \"Avoid indexing columns with high cardinality and low selectivity, such as 'ca_state' and 's_store_sk', unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOIN conditions and have high selectivity, such as 'c_current_addr_sk', 'ca_address_sk', 'd_date_sk', 'sr_item_sk', and 'sr_ticket_number'.\"}"], ["train_workload_random_1_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Ensure that all primary key and frequently joined columns are indexed individually, especially for large tables, to prevent performance regressions when switching from composite to individual indexes.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk, c_customer_sk), customer_address(ca_address_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_order_number), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), web_sales(ws_item_sk)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing them with indexes on non-join columns or columns with low selectivity, as this can lead to performance regressions in join-heavy queries.\"}"], ["train_workload_random_1_9q", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), customer(c_current_addr_sk), date_dim(d_date), household_demographics(hd_demo_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), store_returns(sr_cdemo_sk)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are used less frequently or primarily in ORDER BY clauses unless they are part of a critical query pattern.\"}"], ["train_workload_random_1_9q", "[store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer_address(ca_address_sk), date_dim(d_date), web_returns(wr_item_sk), customer(c_customer_sk), web_sales(ws_item_sk), customer(c_current_addr_sk), customer_demographics(cd_demo_sk), store_returns(sr_cdemo_sk), catalog_returns(cr_item_sk)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid multi-column indexes on columns with high cardinality and low selectivity, especially when single-column indexes on foreign key columns are sufficient for query optimization.\"}"], ["train_workload_random_1_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure that the regression index selection includes indexes on columns frequently used in join conditions and filters, especially those with high cardinality or used in WHERE clauses, such as customer.c_customer_sk, store_returns.sr_ticket_number, and catalog_sales.cs_sold_date_sk, to prevent performance degradation.\"}"], ["train_workload_random_1_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained. Avoid replacing them with indexes on less frequently filtered columns unless there is a clear performance benefit. Prioritize indexes on columns involved in joins and filters across multiple queries.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk), customer_address(ca_address_sk), date_dim(d_date_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used in join or filter conditions, especially when single-column indexes on join keys are sufficient and more efficient.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk), customer_address(ca_address_sk), store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover all join conditions and frequently filtered columns. Avoid redundant indexes on columns already covered by other indexes. Prioritize indexes on columns involved in multiple queries and large tables.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk), household_demographics(hd_demo_sk, hd_dep_count), date_dim(d_date, d_moy), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_cdemo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_sold_date_sk)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{rule: \"Ensure that indexes on date columns used in WHERE clauses for filtering large tables are maintained, as they are critical for query performance. Avoid replacing or removing indexes on columns frequently used in JOIN conditions, especially when they involve large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_1_9q", " [customer(c_customer_sk, c_current_addr_sk), date_dim(d_date_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include both high cardinality and low cardinality columns together, as this can lead to inefficient index usage. Instead, focus on creating separate indexes for high cardinality columns and consider the query patterns to ensure the indexes align with the most common filtering and joining conditions.\"}"], ["train_workload_random_1_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_1_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained. Avoid replacing them with indexes on less frequently filtered columns unless there is a clear workload shift justifying the change.\"}"], ["train_workload_random_1_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_1_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure that the regression index selection includes indexes on columns frequently used in join conditions and filters, especially those with high cardinality or used in WHERE clauses, such as customer.c_customer_sk, store_returns.sr_ticket_number, and catalog_sales.cs_sold_date_sk, to prevent performance degradation.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk, c_customer_sk), customer_address(ca_address_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_order_number), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), web_sales(ws_item_sk)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized over columns used in filtering conditions. Avoid replacing indexes on join keys with those on filter keys unless the filter is highly selective and frequently used.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk), household_demographics(hd_demo_sk, hd_dep_count), date_dim(d_date, d_moy), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_cdemo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_sold_date_sk)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Instead, focus on indexing columns that are used in filtering conditions and aggregations, as these can significantly improve query performance. Additionally, ensure that indexes do not overlap excessively with existing indexes to prevent redundancy and potential performance degradation.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk, c_customer_sk), customer_address(ca_address_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_order_number), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), web_sales(ws_item_sk)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially if they are frequently used in join conditions. Instead, prioritize indexing columns that are used in WHERE clauses with equality conditions and have lower cardinality, as well as columns that are frequently used in join conditions with high selectivity.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk), customer_address(ca_address_sk), date_dim(d_date_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid indexing columns that are less frequently used or primarily involved in equality conditions on smaller tables.\"}"], ["train_workload_random_1_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Ensure that indexes cover the most frequently joined and filtered columns across the workload. Avoid creating composite indexes that include columns not frequently used together in joins or filters, as this can lead to regression by increasing index maintenance overhead without significant query performance benefits.\"}"], ["train_workload_random_1_9q", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date, d_year), customer_address(ca_address_sk)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes on columns used in WHERE clauses with range conditions or IN lists include all relevant columns to avoid regressions. Specifically, if a column is frequently used in combination with another column in WHERE clauses, consider including both columns in the index to optimize query performance.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk, c_customer_sk), customer_address(ca_address_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_order_number), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), web_sales(ws_item_sk)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{rule: \"Avoid indexing columns with high cardinality and low selectivity, such as 'ca_state' in 'customer_address', and prioritize indexing columns frequently used in join conditions and filters, like 'd_date_sk' in 'date_dim' and 'ca_address_sk' in 'customer_address'.\"}"], ["train_workload_random_1_9q", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date, d_year), customer_address(ca_address_sk)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used in WHERE clauses or JOIN conditions. Focus on indexing columns that are consistently used in filtering and joining operations across multiple queries in the workload.\"}"], ["train_workload_random_1_9q", " [store_returns(sr_item_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_dep_count)].", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already part of foreign key relationships. Instead, focus on indexing columns that are used in filtering conditions with high selectivity or aggregation operations.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk), household_demographics(hd_demo_sk, hd_dep_count), date_dim(d_date, d_moy), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_cdemo_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_sold_date_sk)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are less frequently used or primarily involved in ORDER BY clauses unless they are critical for query performance.\"}"], ["train_workload_random_1_9q", " [customer(c_customer_sk, c_current_addr_sk), date_dim(d_date_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality. Remove redundant indexes that overlap with more efficient ones.\"}"], ["train_workload_random_1_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure that the regression index selection includes composite indexes that cover both join and filter conditions, especially for large tables with high cardinality columns. Prioritize indexes on foreign key columns and frequently filtered columns in the workload.\"}"], ["train_workload_random_1_9q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized over indexes on columns used in filtering conditions. Specifically, prioritize indexes on columns like 'customer_address.ca_address_sk', 'customer_demographics.cd_demo_sk', 'store_returns.sr_ticket_number', and 'web_returns.wr_order_number' which are used in join conditions, as they can significantly improve query performance by reducing the cost of joins.\"}"], ["train_workload_random_1_9q", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year), customer_address(ca_address_sk), customer(c_customer_sk, c_current_addr_sk), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized over indexes on non-join columns. Avoid creating composite indexes that include columns not frequently used in WHERE clauses or join conditions.\"}"], ["train_workload_random_1_9q", " [customer(c_customer_sk, c_current_addr_sk), date_dim(d_date_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions across large tables. Instead, prioritize indexing columns that are used in join conditions with smaller tables or have high selectivity, such as primary keys or foreign keys.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk, c_customer_sk), customer_address(ca_address_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_order_number), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), web_sales(ws_item_sk)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are prioritized over indexes on columns used in filtering conditions. Additionally, maintain indexes on columns frequently used in group by and order by clauses to prevent regression.\"}"], ["train_workload_random_1_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_cdemo_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Avoid creating composite indexes that do not align with the query patterns, especially when single-column indexes on join keys are more effective. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date keys and foreign keys, to prevent regression.\"}"], ["train_workload_random_1_9q", "[store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer_address(ca_address_sk), date_dim(d_date), web_returns(wr_item_sk), customer(c_customer_sk), web_sales(ws_item_sk), customer(c_current_addr_sk), customer_demographics(cd_demo_sk), store_returns(sr_cdemo_sk), catalog_returns(cr_item_sk)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure that all foreign key columns used in join conditions across multiple queries are indexed. Avoid removing indexes on columns that are frequently used in join conditions or as part of complex queries, especially when they are part of large tables.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk, c_customer_sk), customer_address(ca_address_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_order_number), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), web_sales(ws_item_sk)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are prioritized over less frequently used columns or columns with high cardinality, especially when they are involved in join operations across large tables.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk), customer_address(ca_address_sk), store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used in join or filter conditions across multiple queries. Focus on single-column indexes for primary keys and foreign keys that are consistently used in join conditions.\"}"], ["train_workload_random_1_9q", " [store_returns(sr_item_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_dep_count)].", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions or aggregations, as these can significantly improve query performance by reducing the amount of data processed.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk), customer_address(ca_address_sk), store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk)]", "[customer_address(ca_state), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), item(i_item_sk), web_site(web_site_sk), catalog_returns(cr_order_number), customer(c_customer_sk), store_returns(sr_cdemo_sk), web_returns(wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for high cardinality tables. Avoid replacing these with indexes on columns that are not frequently used in join conditions or have lower cardinality, as this can lead to performance regressions.\"}"], ["train_workload_random_1_9q", " [customer(c_current_addr_sk), customer_address(ca_address_sk), date_dim(d_date_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[customer_address(ca_zip, ca_state, ca_address_sk), customer(c_current_addr_sk, c_customer_sk), store(s_store_sk), date_dim(d_date_sk, d_date), item(i_item_sk, i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_1_9q", " [customer(c_customer_sk, c_current_addr_sk), date_dim(d_date_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date columns or columns with unique values like IDs, unless they are frequently used in join conditions or where clauses. Instead, focus on indexing columns that are frequently filtered or joined on with moderate cardinality and high selectivity.\"}"]], "train_workload_random_14_9q": [["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid indexing columns that are less frequently used or primarily involved in aggregation without filtering.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid relying solely on single-column indexes when queries involve complex conditions or aggregations.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter columns used in the workload queries, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve query performance by reducing the need for full table scans.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Ensure composite indexes include columns frequently used together in join conditions and filters, especially for large tables. Prioritize indexes that cover multiple columns used in WHERE clauses and JOINs, as seen in the improvement index selection, to avoid regression.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or as join keys, such as 'item_sk' and 'date_sk', which are critical for query performance in the given workload.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes that include multiple columns with high cardinality unless they are frequently queried together in the workload. Instead, focus on single-column indexes for columns that are frequently used in WHERE clauses or JOIN conditions, especially if they are used in multiple queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in combination, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple joins and filters on those columns.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "```json\n{\n    \"rule\": \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as this can lead to performance regressions. Additionally, prioritize indexing on columns that are used in ORDER BY and GROUP BY clauses to maintain query performance.\"\n}\n```"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries, especially for large tables. Avoid partial indexes that miss critical columns used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries, especially for large tables. Prioritize composite indexes for columns frequently used together in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that multi-column indexes are preserved when they are beneficial for join operations or filtering conditions across multiple tables, especially when the workload involves complex queries with multiple joins and date range filters. Avoid reducing multi-column indexes to single-column indexes if the workload heavily relies on the combination of columns for performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{rule: \"Ensure that composite indexes are used for columns frequently involved in join operations and filtering conditions, especially when multiple columns are used together in queries. Avoid using single-column indexes when queries involve multiple columns in conditions, as this can lead to regressions in query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions across large tables. Instead, prioritize indexing columns that are used in filtering conditions with high selectivity or are part of smaller tables to improve query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that indexes are consistently applied across all sales and returns tables for the same key columns, especially when they are frequently joined or filtered in queries. For example, if 'item_sk' is indexed in 'store_sales', it should also be indexed in 'web_sales', 'catalog_sales', and 'store_returns' to prevent regression.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter columns in the workload queries, especially for large tables. Avoid removing composite indexes that combine frequently joined or filtered columns, as they can significantly improve query performance by reducing the need for full table scans.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses, especially for large tables. Avoid regression by maintaining composite indexes that cover multiple columns used in conjunction, such as (ss_sold_date_sk, ss_item_sk) for store_sales, and (cr_item_sk, cr_order_number) for catalog_returns. Prioritize indexes on columns involved in joins and filters across multiple queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure that composite indexes are maintained for frequently joined columns and columns used in WHERE clauses, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Prioritize single-column indexes for columns that are consistently used in filtering conditions or joins, especially for large tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid using single-column indexes on columns that are frequently used together in join conditions or filters across multiple queries. Instead, consider composite indexes that cover these combinations to optimize query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions across large tables. Instead, prioritize indexing columns that are used in filtering conditions with high selectivity or are part of composite indexes that optimize specific query patterns.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter conditions in the workload queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes when multiple columns are consistently used together in queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Specifically, prioritize composite indexes that include columns frequently used together in joins and filters, such as date_dim(d_date_sk, d_date) and item(i_item_sk, i_manager_id). Avoid removing indexes that are critical for high-frequency operations, such as those on large tables like store_sales and web_sales.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as this can lead to regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions. Instead, prioritize indexing columns that are frequently used in filtering conditions and have moderate to low cardinality, ensuring they improve query performance by reducing scan times.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "```json\n{\n    \"rule\": \"Ensure that composite indexes are used for columns frequently joined together or filtered in the workload, especially for large tables. Avoid using single-column indexes on columns that are part of frequent join conditions or complex filters, as they may lead to regressions in query performance.\"\n}\n```"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when multiple columns are involved in the query conditions. Avoid relying solely on single-column indexes when queries involve complex conditions or multiple tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join operations and filtering conditions, especially when multiple tables are involved in the queries. Prioritize indexes on columns with high cardinality and those used in WHERE clauses, GROUP BY, and ORDER BY operations. Avoid single-column indexes when composite indexes can provide better performance for complex queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Ensure indexes cover both join and filter conditions. If a table is frequently joined and filtered, consider composite indexes that include both join keys and filter columns. Avoid indexes that only cover join keys without considering filter conditions, especially for large tables.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join involves large tables. Instead, prioritize indexing columns that are used in filtering conditions or are part of smaller tables to improve query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions across large tables. Prioritize indexing columns that are used in WHERE clauses with equality conditions and have a significant impact on query performance, such as those involved in filtering or aggregation.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "{rule: \"Ensure composite indexes cover multiple columns used in join conditions and filters, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries. Avoid single-column indexes when multi-column indexes can optimize query performance by reducing I/O operations.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Avoid indexes that only cover join conditions without considering filter conditions, especially for large tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes cover multiple columns used in WHERE clauses, especially for large tables. Prioritize indexes on columns frequently used in JOIN conditions and GROUP BY clauses. Avoid single-column indexes on large tables unless they are highly selective.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that composite indexes in the regression selection maintain the same column order as in the improvement selection, especially for frequently joined or filtered columns. Additionally, include indexes on columns that are used in WHERE clauses or as join keys across multiple queries to prevent regression.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{rule: \"Avoid creating indexes on columns with high cardinality unless they are frequently used in WHERE clauses or JOIN conditions. Ensure composite indexes cover multiple columns used together in queries, especially in JOINs or WHERE conditions, to prevent regression.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently joined together or filtered in the workload, especially for large tables. Avoid using single-column indexes on columns that are part of frequent join conditions or complex queries, as they may not provide sufficient performance improvement.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in WHERE clauses with multiple conditions, especially when filtering by date ranges or joining large tables. Prioritize indexes that cover both filtering and aggregation columns to optimize query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained or added, especially when they are frequently used in the workload queries. Avoid removing or replacing these indexes with less relevant ones, as it can lead to performance regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses, especially for large tables. Avoid regression by maintaining composite indexes that cover multiple columns used in conjunction, such as (ss_sold_date_sk, ss_item_sk) for store_sales, and (cr_item_sk, cr_order_number) for catalog_returns. Additionally, prioritize indexes on columns involved in JOIN operations across multiple queries, like (d_date_sk, d_date) for date_dim.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially when they are used independently across multiple queries.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily indexed or frequently used in join conditions across multiple queries, as this can lead to regression by increasing index maintenance overhead and reducing query performance. Focus on indexing columns that are used in filtering conditions and are not already indexed, especially in large tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in join or filter conditions across multiple queries. Prioritize single-column indexes on columns that are consistently used in WHERE clauses or JOIN conditions, especially if they are used in multiple queries.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter conditions in queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes when multiple columns are consistently used together in queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Specifically, prioritize composite indexes that include columns frequently used together in joins and filters, such as date_dim(d_date_sk, d_date) and item(i_item_sk, i_manager_id). Avoid regression by maintaining indexes on columns involved in high cardinality joins and filters, like customer(c_customer_sk) and promotion(p_promo_sk).\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter conditions in queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes when multi-column indexes can optimize multiple queries.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in join conditions or filters across multiple queries. Instead, prioritize single-column indexes on columns that are consistently used in join conditions or filters across the workload.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions across large tables. Instead, prioritize indexing columns that are used in filtering conditions with high selectivity or are part of composite indexes that optimize specific query patterns.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Prioritize composite indexes over single-column indexes when the workload involves complex queries with multiple joins and conditions.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Prioritize composite indexes on columns frequently used in join conditions across multiple queries, especially when they involve large tables. Avoid single-column indexes on columns that are already part of composite indexes unless they are used independently in other queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses, especially for large tables. Avoid removing composite indexes that optimize multi-column conditions.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses and JOIN conditions, especially when they involve large tables. Avoid creating composite indexes that do not align with query patterns, such as those missing key columns used in filtering or joining.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure that composite indexes are maintained for frequently joined columns and columns used in WHERE clauses with high cardinality, especially when they are used together in multiple queries. Avoid replacing composite indexes with single-column indexes if the workload benefits from the former.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple joins and conditions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{\"rule\": \"Ensure that multi-column indexes in regression selection cover the same or more columns as those in the improvement selection, especially for frequently joined or filtered columns in the workload.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid regression by maintaining indexes on columns involved in multiple queries, such as date_dim.d_date_sk and item.i_item_sk, which are critical for performance in the given workload.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are included in the regression index selection, especially when they are present in the improvement index selection. This includes indexes on columns like 'item_sk', 'sold_date_sk', and 'order_number' across different sales and returns tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{rule: \"Ensure that composite indexes cover all join and filter conditions in the workload queries, especially for large tables. Avoid single-column indexes on columns that are frequently used together in joins or filters, as they may lead to regressions in query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions across large tables. Instead, prioritize indexing columns that are frequently filtered or aggregated in queries, and ensure that indexes align with the most common query patterns and workload characteristics.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in WHERE clauses, especially when they involve date ranges or join conditions. Prioritize indexes on columns with high cardinality and those involved in ORDER BY or GROUP BY operations. Avoid regression by maintaining indexes that support complex queries with multiple conditions and aggregations.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters, especially for large tables. Prioritize composite indexes for columns frequently used together in WHERE clauses and JOINs.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in WHERE clauses across multiple queries. Instead, prioritize single-column indexes for such columns to prevent regression in query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in join conditions and filters, especially for large tables. Avoid removing composite indexes that optimize multiple query patterns, such as those involving date ranges and item identifiers.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure that composite indexes in the regression selection do not omit critical columns used in join conditions or filters, especially when those columns are frequently queried together. Additionally, maintain indexes on columns with high cardinality and those involved in range queries or sorting operations.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as these columns are likely to benefit from existing indexes. Instead, focus on indexing columns that are used in filtering conditions or aggregations, especially if they are not already indexed. Additionally, prioritize indexing columns involved in WHERE clauses with high selectivity or those used in ORDER BY clauses to improve query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in join conditions and filters, especially for large tables. Avoid single-column indexes on columns that are part of multi-column conditions in the workload.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index significantly improves query performance. Prioritize single-column indexes for frequently joined or filtered columns, especially in large tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes cover all frequently joined columns and filtering conditions in the workload. Avoid removing composite indexes that cover multiple columns used together in queries, especially those involving date ranges and item identifiers.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that composite indexes in the regression selection maintain the same column order as in the improvement selection, especially for frequently joined or filtered columns.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent updates, especially if they are not used in WHERE clauses or JOIN conditions in the workload. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and aggregations, and ensure that composite indexes cover multiple columns used together in queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are prioritized, especially for large tables. Avoid creating indexes on columns with low cardinality or those not directly involved in frequent query operations.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when multiple tables are involved in the query. Avoid relying solely on single-column indexes for high cardinality columns that are often used in conjunction with other columns.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple tables are involved in the queries. Prioritize indexes on columns with high cardinality and those used in WHERE clauses, GROUP BY, and ORDER BY operations. Avoid regression to single-column indexes when composite indexes provide better query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Ensure that composite indexes are used for join operations involving large tables, especially when multiple columns are frequently used together in WHERE clauses or JOIN conditions. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple join conditions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins or filters on multiple columns.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure that composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid removing indexes that cover frequently queried columns or combinations of columns that are used together in multiple queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing the overhead of maintaining the index. Instead, focus on indexing columns that are used in filtering conditions and aggregations, especially those with high cardinality and those that appear in WHERE clauses with comparison operators.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "{rule: \"Avoid regression by ensuring indexes cover both join and filter conditions. Prioritize composite indexes that include columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Consider the workload's most common query patterns and ensure indexes support them efficiently.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries. Prioritize composite indexes for columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes if columns are often used in conjunction with others in the workload.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Avoid indexes that only cover join conditions without considering filter conditions, especially for large tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{rule: \"Ensure that composite indexes cover both join and filter conditions, especially for large tables. Avoid single-column indexes on columns that are frequently used together in join conditions, as they may lead to regressions in query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join operations and filtering conditions, especially when multiple tables are involved in the queries. Prioritize indexes on columns with high cardinality and those used in WHERE clauses, GROUP BY, and ORDER BY operations. Avoid single-column indexes when composite indexes can provide better performance for complex queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in the workload, especially when multiple columns are involved in group by or order by clauses. Avoid relying solely on single-column indexes when queries involve complex conditions or multiple tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid using single-column indexes when multi-column indexes can better optimize query performance. Consider the workload's join and filter patterns to determine the most effective composite indexes.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Avoid creating indexes on columns that are already part of composite indexes in the regression selection, especially when they are frequently used in join conditions across multiple queries. Instead, focus on creating composite indexes that cover multiple columns used together in join conditions or filters to improve query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions without considering the workload. Prioritize indexing columns that are used in WHERE clauses, have high cardinality, or are involved in ORDER BY clauses to improve query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes that include multiple columns with high cardinality unless they are frequently queried together in the workload. Instead, focus on single-column indexes for columns that are frequently used in WHERE clauses or JOIN conditions, especially if they are used in multiple queries across the workload.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, as this can lead to regression by increasing the complexity and overhead of maintaining these indexes. Instead, focus on indexing columns that are used in filtering conditions and have high selectivity, as seen in the improvement index selection.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in join conditions and filters, especially for large tables. Avoid single-column indexes on columns that are part of multi-column join conditions or filters, as they may lead to regressions in query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Prioritize composite indexes for columns frequently used together in joins and filters, especially for large tables. Avoid regression by maintaining indexes on columns involved in multiple queries, such as date_dim.d_date_sk and item.i_item_sk, which are critical for performance across various queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{rule: \"Avoid removing composite indexes that cover multiple columns used together in join conditions or filters, especially when they involve large tables or frequently queried columns. Ensure that indexes on columns involved in frequent joins or aggregations are maintained to prevent performance regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple tables are involved in the query. Prioritize indexes on columns with high cardinality and those used in WHERE clauses, GROUP BY, and ORDER BY operations. Avoid single-column indexes when composite indexes can provide better performance for complex queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in the workload, especially when multiple tables are involved in the queries. Avoid using single-column indexes when the workload involves complex joins and filters that benefit from composite indexes.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in WHERE clauses with multiple conditions, especially when they are part of JOIN operations or subqueries. Prioritize indexes on columns with high cardinality and those involved in ORDER BY or GROUP BY clauses. Avoid single-column indexes when multi-column indexes can optimize query performance better.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in WHERE clauses across multiple queries. Instead, prioritize single-column indexes for such columns to prevent regression in query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are frequently used alone in WHERE clauses. Prioritize indexes that support join operations and filtering conditions in the workload.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes that only cover columns already indexed in composite indexes, especially if the composite indexes are frequently used in the workload. Prioritize composite indexes that match the query patterns, such as those involving joins and filters on multiple columns.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing the overhead of maintaining the index. Instead, focus on indexing columns that are used in filtering conditions and aggregations, especially those with high cardinality and those that appear in WHERE clauses with comparison operators.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "{rule: \"Avoid regression by ensuring multi-column indexes are created for columns frequently used together in join conditions or filters, especially when they involve large tables. Prioritize indexes on columns with high cardinality and those involved in range queries or aggregations.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{\"rule\": \"Ensure that composite indexes in the regression selection cover the same or more columns as those in the improvement selection, especially for frequently joined or filtered columns. Avoid replacing single-column indexes with composite indexes unless they cover all necessary query patterns.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that all frequently joined columns and filtering columns in the workload are indexed. Avoid removing indexes on columns that are part of multi-column joins or are used in WHERE clauses, especially if they are used in large tables or frequently accessed tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{rule: \"Ensure that composite indexes cover both join and filter conditions. Avoid single-column indexes on high cardinality columns when composite indexes can better serve the workload by covering multiple query predicates.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that composite indexes are used for frequently joined columns and filtering conditions, especially for large tables. Avoid using single-column indexes on columns that are part of frequent joins or filters in complex queries, as they may not provide sufficient performance benefits. Prioritize composite indexes that cover multiple columns used together in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure indexes are created on columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially when they involve large tables. Avoid redundant indexes on columns that are already covered by existing indexes in the workload.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join operations and filtering conditions, especially when multiple tables are involved in the queries. Avoid relying solely on single-column indexes for complex queries that involve multiple conditions and aggregations.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses or JOIN conditions, especially for large tables. Avoid regression by maintaining composite indexes that cover multiple columns used in conjunction, such as (date_dim.d_date_sk, date_dim.d_date) or (store_sales.ss_sold_date_sk, store_sales.ss_item_sk).\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes cover multiple columns used in join conditions and filters, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries. Avoid single-column indexes on columns with high cardinality unless they are frequently filtered or joined.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Prioritize single-column indexes for columns that are consistently used in filtering or joining operations, especially when they appear in high-frequency queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Prioritize composite indexes over single-column indexes when the workload involves complex queries with multiple joins and conditions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "{rule: \"Avoid regression by ensuring composite indexes cover multiple columns used together in WHERE clauses, especially for large tables. Prioritize indexes on columns frequently used in JOIN conditions and GROUP BY clauses. Consider the workload's query patterns and ensure indexes support filtering and aggregation efficiently.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Avoid indexes that only cover join conditions without considering filter conditions, especially for large tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes cover all frequently joined columns and filtering conditions in the workload. Avoid removing indexes on columns that are part of multi-table joins or are used in WHERE clauses, especially for large tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are maintained, especially when they are frequently used in the workload. Avoid removing composite indexes that cover multiple columns used together in WHERE clauses or JOIN conditions, as they can significantly improve query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions. Instead, prioritize composite indexes that align with query patterns involving multiple columns, particularly those used in JOINs and WHERE clauses.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid single-column indexes on high cardinality columns unless they are frequently used in isolation. Prioritize indexes that cover multiple columns used in conjunction, such as (C store_sales.ss_sold_date_sk, C store_sales.ss_item_sk) over single-column indexes like store(s_store_sk).\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently queried together, especially in large tables, to prevent regression. For example, use composite indexes like (ws_item_sk, ws_ext_discount_amt) instead of single-column indexes when both columns are used together in queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in WHERE clauses and JOIN conditions, especially when multiple columns are used together in queries. Avoid relying solely on single-column indexes when queries involve multiple conditions or aggregations.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when they involve large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters, especially for large tables. Prioritize composite indexes for columns frequently used together in joins or filters, and avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Prioritize single-column indexes on columns that are consistently used in filtering or joining operations, especially in high-frequency tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid using single-column indexes on columns that are frequently used together in join conditions or filters across multiple queries. Instead, consider composite indexes that cover these multi-column access patterns to prevent regression in query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "{rule: \"Ensure that multi-column indexes are preserved when they are used in the workload, especially for columns frequently used together in join conditions or where clauses. Avoid replacing them with single-column indexes unless there is a clear performance benefit.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes cover both join keys and frequently filtered columns. Avoid removing indexes on columns that are used in WHERE clauses or JOIN conditions, especially if they are part of composite indexes that optimize query performance by covering multiple columns used together in queries.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included in the regression index selection, especially for large tables. Additionally, maintain indexes on columns frequently used in WHERE clauses with range conditions or specific values, such as date columns.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{rule: \"Ensure that composite indexes cover all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes on columns that are frequently used together in queries, as this can lead to regressions in query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Prioritize indexes on columns with high cardinality and those involved in range queries or aggregations.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join operations and filtering conditions, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Prioritize composite indexes over single-column indexes when queries involve multiple columns from the same table.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple queries, especially when dealing with large tables. Avoid relying solely on single-column indexes for such scenarios.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses, especially for large tables. Avoid removing composite indexes that optimize multi-column conditions.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple tables, as they may lead to performance regressions. Instead, focus on indexing columns that are frequently filtered or aggregated in queries, especially those with high cardinality.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure that composite indexes include all columns used in WHERE clauses and JOIN conditions, especially for high cardinality columns. Avoid creating composite indexes that do not align with query patterns, such as those missing critical filtering or joining columns. Prioritize indexes that match the query workload's filtering and joining patterns, and consider the order of columns in composite indexes to match the query execution plan.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid indexes on columns that are frequently used in join conditions across multiple tables, especially when they are already indexed in the improvement selection. Prioritize composite indexes that cover both filtering and join conditions to enhance query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "{rule: \"Ensure composite indexes cover multiple columns used together in WHERE clauses, especially for large tables. Avoid single-column indexes on columns frequently used in conjunction with others in queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that composite indexes in the regression selection cover all columns used in join conditions and filters, especially for high cardinality columns and frequently queried tables. Additionally, maintain indexes on columns involved in group by and order by clauses to prevent performance degradation.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained or added, especially for large tables, to prevent regression in query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns frequently used in WHERE clauses and JOIN operations, especially for large tables. Avoid indexes on columns with low cardinality or those not directly involved in query filtering or joining.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently joined together or filtered in the workload, especially for large tables. Avoid using single-column indexes on columns that are part of frequent join conditions or complex filters, as they may lead to regressions in query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{\"rule\": \"Ensure composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when multiple columns are involved in the query conditions. Avoid using single-column indexes when composite indexes can better optimize the query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple queries, especially when dealing with large tables. Avoid relying solely on single-column indexes for such scenarios.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Ensure that composite indexes in the regression selection cover all join and filter conditions present in the workload queries, similar to the improvement selection. Specifically, include composite indexes that combine date and item keys, as well as those that cover both item and sales/return attributes, to prevent regression.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses, especially for large tables. Avoid removing composite indexes that optimize joins and filters across multiple tables, such as those involving date and item keys.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure that composite indexes include all columns used in WHERE clauses and JOIN conditions, especially for high cardinality columns. Avoid removing indexes that cover multiple columns used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure that composite indexes are maintained for frequently joined columns and columns used in WHERE clauses with high cardinality, especially when they are used together in multiple queries. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filtering on multiple columns.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "{rule: \"Ensure composite indexes cover multiple columns used in join conditions and filters, especially for large tables. Avoid single-column indexes on columns with high cardinality or those frequently used in conjunction with other columns in queries.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Avoid indexes that only cover join conditions without considering filter conditions, especially for large tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes cover all join and filter columns in the workload queries, especially for large tables. Avoid removing indexes on frequently joined or filtered columns like 'item_sk', 'sold_date_sk', and 'order_number' in sales and returns tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid single-column indexes on columns that are often used together in queries, as this can lead to regressions in query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Prioritize composite indexes that cover multiple columns used in join conditions and filters, especially for large tables. Avoid single-column indexes on columns with high cardinality or those frequently used in group by or order by clauses.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Avoid relying solely on single-column indexes when multi-column indexes can optimize query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple tables are involved in the queries. Prioritize indexes on columns with high cardinality and those used in WHERE clauses, GROUP BY, and ORDER BY operations. Avoid regression by maintaining indexes that support complex query patterns, such as those involving date ranges and specific item attributes.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Avoid creating composite indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing index maintenance overhead and reducing query performance. Instead, prioritize single-column indexes on primary key or foreign key columns that are consistently used in join conditions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters, especially for large tables. Prioritize composite indexes for columns frequently used together in join conditions, and single-column indexes for columns used in filters or aggregations.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure that composite indexes in the regression selection do not omit critical columns used in join conditions or filters, especially when those columns are frequently queried together. For instance, if a query frequently joins on 'date_dim.d_date_sk' and filters on 'date_dim.d_month_seq', both should be included in a composite index to prevent regression.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in the workload, especially when they appear together in WHERE clauses or JOIN conditions. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple conditions on these columns.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "{rule: \"Ensure that composite indexes are used for join operations involving multiple columns, especially when the workload involves frequent joins on those columns. Avoid replacing composite indexes with single-column indexes if the workload heavily relies on multi-column joins.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as this can lead to regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover one aspect, such as only join keys or only filter conditions, as this can lead to regressions in query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in filtering conditions and have a significant impact on query performance, such as foreign keys and columns involved in JOIN operations.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently involved in filtering and aggregation, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Avoid relying solely on single-column indexes when queries involve complex conditions or multiple tables.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Prioritize composite indexes that cover multiple columns involved in join conditions and filters, especially for tables with high row counts. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Avoid creating indexes on columns that are already part of a composite index in the regression selection, especially if they are frequently used in join conditions across multiple queries. Instead, focus on indexing columns that are used in filtering conditions or are part of smaller tables to improve query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filtering criteria, especially for large tables. Prioritize multi-column indexes for frequently joined columns and columns used in WHERE clauses. Avoid regression by maintaining indexes on columns with high cardinality and those frequently used in join conditions across multiple queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "```json\n{\n    \"rule\": \"Ensure that composite indexes in the regression selection include columns that are frequently used together in WHERE clauses or JOIN conditions, especially when they involve large tables or are used in range queries. Avoid removing composite indexes that cover multiple columns used in filtering and joining, as seen in the improvement index selection.\"\n}\n```"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions across multiple queries, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in filtering conditions or aggregations, especially if they are not part of a foreign key relationship.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "{rule: \"Ensure that composite indexes are created for columns frequently used together in join conditions and filters, especially for large tables. Avoid removing indexes on columns that are part of frequent join conditions or used in WHERE clauses with high cardinality, as this can lead to performance regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index significantly improves query performance. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid regression by ensuring indexes cover columns involved in join conditions and filters, especially for large tables. Prioritize composite indexes for columns frequently used together in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that composite indexes in the regression selection cover all columns used in join conditions and filters, especially for high cardinality columns and frequently queried tables. Additionally, maintain indexes on columns that are used in both join conditions and where clauses to prevent performance degradation.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{\"rule\": \"Ensure that regression index selections include composite indexes on columns frequently used together in join conditions, especially for large tables, to prevent performance degradation. For example, if a query frequently joins on 'store_returns(sr_item_sk, sr_ticket_number)' and 'catalog_returns(cr_item_sk, cr_order_number)', ensure these composite indexes are maintained or improved upon in the regression index selection.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions across large tables. Instead, prioritize indexing columns that are used in filtering conditions with high selectivity or are part of frequent join operations with smaller tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid relying solely on single-column indexes when multi-column indexes can optimize query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure indexes on columns involved in joins across large tables, especially when they are used frequently in the workload. Prioritize composite indexes that cover multiple columns used together in join conditions or filters, and avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Ensure that composite indexes in the regression selection cover all join and filter conditions present in the workload queries, similar to the improvement selection. Specifically, include multi-column indexes that combine frequently joined or filtered columns, such as (d_date_sk, d_date) for date_dim and (ss_sold_date_sk, ss_item_sk) for store_sales, to optimize query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters, especially for large tables. Avoid indexes on columns with low cardinality or those not directly involved in query predicates.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid overly broad composite indexes that include columns not frequently queried together, as they may lead to regressions by increasing index size and reducing specificity.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Prioritize composite indexes over single-column indexes when the workload shows frequent multi-column usage patterns.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "{rule: \"Ensure that composite indexes are created for columns frequently used together in join conditions and filters, especially for large tables. Avoid removing indexes on columns that are part of frequent join conditions or used in WHERE clauses with high cardinality, as this can lead to performance regressions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that composite indexes in regression selection cover all join and filter conditions used in the workload queries, similar to the improvement selection, which includes composite indexes on columns frequently used together in joins and filters.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid regression by maintaining indexes on columns involved in multiple queries, such as date_dim(d_date_sk) and item(i_item_sk).\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that multi-column indexes in the regression selection maintain the same column order as in the improvement selection, and include all necessary columns used in join and filter conditions. Additionally, verify that indexes on frequently joined or filtered columns, such as 'date_dim.d_date_sk' and 'item.i_item_sk', are consistently applied across all relevant tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent updates, especially if they are not used in WHERE clauses or JOIN conditions in the workload. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and have low cardinality or are static.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_category), promotion(p_promo_sk), store(s_store_sk), customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_bill_customer_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filtering predicates, especially for large tables. Prioritize composite indexes for columns frequently used together in WHERE clauses and JOIN conditions to optimize query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [item(i_item_sk), store_sales(ss_item_sk), web_sales(ws_item_sk), date_dim(d_date_sk), store_returns(sr_item_sk), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when multiple columns are involved in the query conditions. Avoid relying solely on single-column indexes when queries involve complex conditions or multiple tables.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in WHERE clauses with multiple conditions, especially when filtering on large tables. Avoid relying solely on single-column indexes for tables with high row counts and complex query conditions.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [store_returns(sr_item_sk, sr_ticket_number), customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk)].", "{rule: \"Ensure that multi-column indexes are preserved when they are beneficial for join operations or filtering conditions across multiple tables. Avoid replacing them with single-column indexes if the workload involves complex queries with multiple joins and conditions on those columns.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), date_dim(d_date_sk), item(i_current_price), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid single-column indexes on columns that are part of multi-column conditions in the workload.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk, i_manufact_id, i_brand), date_dim(d_date_sk, d_week_seq, d_month_seq, d_year), store(s_store_sk), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_address_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), store_sales(ss_item_sk)]", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant single-column indexes when composite indexes can cover multiple query patterns.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_bill_customer_sk), item(i_item_sk), store_returns(sr_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, store_returns(sr_ticket_number), date_dim(d_date), item(i_manufact_id), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), date_dim(d_week_seq), date_dim(d_moy), item(i_manager_id), date_dim(d_month_seq), web_sales(ws_item_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk), store_sales(ss_item_sk)]", "{rule: \"Avoid indexes on columns that are frequently used in join conditions across multiple tables, especially when they are part of composite indexes in the improvement selection. Prioritize composite indexes that cover both filtering and join conditions to optimize query performance.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), item(i_current_price), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "{rule: \"Avoid regression by ensuring multi-column indexes are created for columns frequently used together in WHERE clauses, especially for large tables. Prioritize indexes on columns involved in JOIN conditions and GROUP BY clauses. Consider the workload's query patterns and ensure indexes cover columns used in filtering and sorting operations.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that composite indexes in the regression selection cover all columns used in join conditions and filters, especially for high cardinality columns and frequently queried tables. Avoid removing composite indexes that are present in the improvement selection unless they are proven to be redundant or less effective.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve query performance by reducing the need for full table scans.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [customer(c_customer_sk), store_sales(ss_item_sk, ss_sold_date_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk)]", "{rule: \"Ensure that composite indexes in the regression selection cover all columns used in join conditions and filters, especially for high cardinality columns. Avoid removing composite indexes that are present in the improvement selection and are used in multiple queries.\"}"], ["train_workload_random_14_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_month_seq), I(C date_dim.d_week_seq), I(C item.i_manager_id), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_sold_date_sk,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", " [Item(i_category), Store_returns(sr_item_sk, sr_ticket_number), Catalog_returns(cr_item_sk, cr_order_number), Web_sales(ws_item_sk)].", "{rule: \"Avoid regression by ensuring composite indexes cover all columns involved in join conditions and filters, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOINs, and consider multi-column indexes for complex queries to optimize performance.\"}"]], "train_workload_random_0_9q": [["train_workload_random_0_9q", " [date_dim(d_moy)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially when the columns are part of large tables. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, as they are more likely to improve query performance.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover filter conditions without considering join keys, especially for large tables with frequent joins.\"}"], ["train_workload_random_0_9q", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_returns(wr_order_number)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and have high cardinality, as seen in the improvement index selection.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{rule: \"Avoid indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexes on columns that are used in JOINs and WHERE clauses with high cardinality, especially when they are part of complex queries involving multiple tables.\"}"], ["train_workload_random_0_9q", " [promotion(p_promo_sk), web_site(web_site_sk), date_dim(d_year, d_moy), item(i_item_sk)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid adding indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOINs and WHERE clauses with high cardinality, such as foreign keys and primary keys, to improve query performance.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple tables are involved in the query. Prioritize indexes on columns with high cardinality and those used in WHERE clauses with range conditions or equality checks. Consider adding composite indexes for columns that are used together in multiple queries, such as (date_dim.d_date_sk, date_dim.d_date) and (item.i_item_sk, item.i_current_price).\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes that include columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes if the column is part of a frequent join condition with another column.\"}"], ["train_workload_random_0_9q", "[I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not directly involved in join conditions or filtering operations. Prioritize indexes on columns frequently used in join conditions and filtering, especially those with high cardinality or involved in range queries.\"}"], ["train_workload_random_0_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk)]", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{rule: \"Ensure that all join keys and frequently filtered columns in the workload are indexed. Avoid missing indexes on columns that are used in join conditions or where clauses, especially for large tables. Consider indexing composite keys when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not directly involved in filtering or joining operations. Instead, prioritize composite indexes that cover multiple columns used together in WHERE clauses or JOIN conditions, especially for columns with high cardinality and frequent use in queries.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple tables are involved in the query. Prioritize indexes on columns with high cardinality and those used in WHERE clauses with range conditions or equality checks. Avoid single-column indexes when composite indexes can provide better performance for complex queries.\"}"], ["train_workload_random_0_9q", "[I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other columns that are frequently used together in queries. Instead, focus on creating composite indexes that cover multiple columns used in join conditions or where clauses, especially when they involve large tables or are used in multiple queries.\"}"], ["train_workload_random_0_9q", "[I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover individual columns used in filters without considering join conditions. Prioritize composite indexes that include both join keys and frequently filtered columns, especially for large tables.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{rule: \"Ensure indexes cover join and filter conditions in queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are frequently used in isolation.\"}"], ["train_workload_random_0_9q", " [date_dim(d_year), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in join conditions and where clauses, especially those with high cardinality or those involved in range queries.\"}"], ["train_workload_random_0_9q", "[I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be already optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions, such as those involving functions or calculations.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes that include columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid single-column indexes if the workload involves complex queries with multiple conditions.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in range queries, such as date columns, unless they are part of a composite index that includes a high cardinality column. Prioritize indexing columns that are used in join conditions and have high cardinality, especially when they are frequently queried together.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{rule: \"Ensure that indexes cover join and filter conditions in the workload queries, especially for large tables. Avoid indexes that do not align with the query patterns, such as those missing critical join keys or filter columns used in WHERE clauses.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize composite indexes that cover multiple columns used together in queries, especially those involving date ranges and price filters.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{\"rule\": \"Ensure composite indexes are used for columns frequently joined or filtered together, especially when dealing with large tables. Avoid using single-column indexes on columns that are often used in conjunction with others in WHERE clauses or JOIN conditions. Prioritize composite indexes that match the query patterns, such as (date_dim.d_date_sk, date_dim.d_date) and (item.i_item_sk, item.i_current_price), to optimize query performance.\"}"], ["train_workload_random_0_9q", " [date_dim(d_year, d_moy, d_date), item(i_color)].", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{rule: \"Ensure indexes cover both filtering and join conditions. Avoid indexes that only cover filtering conditions without considering join conditions, especially for large tables involved in joins.\"}"], ["train_workload_random_0_9q", " [date_dim(d_year, d_moy, d_date), item(i_color)].", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Avoid creating separate indexes on individual columns that are frequently used together in WHERE clauses or JOIN conditions. Instead, create composite indexes on these columns to improve query performance. For example, instead of separate indexes on date_dim(d_moy) and date_dim(d_year), use a composite index on date_dim(d_year, d_moy). Similarly, consider the query patterns and avoid redundant indexes that do not align with the workload, such as item(i_item_sk) when item(i_color) is more relevant to the queries.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{rule: \"Avoid indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize composite indexes that cover multiple columns used together in queries, especially those involved in JOINs and WHERE conditions. Ensure indexes are created on columns that are frequently filtered or joined, such as date keys and item keys, to optimize query performance.\"}"], ["train_workload_random_0_9q", " [date_dim(d_year), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date_dim(d_moy) and item(i_color), unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOIN conditions and have high selectivity, such as store_returns(sr_ticket_number) and catalog_returns(cr_order_number, cr_item_sk).\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple tables are involved in the query. Prioritize indexes on columns with high cardinality and those used in WHERE clauses with range conditions or equality checks. Avoid single-column indexes when composite indexes can better serve the query patterns.\"}"], ["train_workload_random_0_9q", " [promotion(p_promo_sk), web_site(web_site_sk), date_dim(d_year, d_moy), item(i_item_sk)]", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{rule: \"Ensure indexes on foreign key columns used in joins across large tables, especially when they are frequently queried together, to prevent regression in query performance.\"}"], ["train_workload_random_0_9q", " [date_dim(d_moy)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Avoid adding redundant or overly broad indexes that cover columns already efficiently filtered by existing indexes or query conditions. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality, to prevent regression in query performance.\"}"], ["train_workload_random_0_9q", " [promotion(p_promo_sk), web_site(web_site_sk), date_dim(d_year, d_moy), item(i_item_sk)]", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{rule: \"Ensure that the index selection matches the column types used in the workload queries. Avoid using indexes on columns that are not directly involved in filtering or joining operations in the queries. Specifically, avoid indexing character columns when integer columns are used for joins and filters.\"}"], ["train_workload_random_0_9q", "[I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are frequently used in isolation.\"}"], ["train_workload_random_0_9q", " [promotion(p_promo_sk), web_site(web_site_sk), date_dim(d_year, d_moy), item(i_item_sk)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Avoid adding indexes on columns that are not directly involved in filtering or joining conditions in the workload queries, especially if they belong to tables with a large number of rows. Prioritize indexes on columns that are frequently used in WHERE clauses and JOIN conditions, and ensure they align with the workload's most common query patterns.\"}"], ["train_workload_random_0_9q", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_returns(wr_order_number)]", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when these columns are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and are not part of existing indexes, as this can improve query performance without redundancy.\"}"], ["train_workload_random_0_9q", "[store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), item(i_item_id), catalog_returns(cr_order_number), web_returns(wr_order_number), web_site(web_site_id)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not directly involved in join conditions or filtering criteria. Prioritize indexes on columns frequently used in WHERE clauses, JOIN conditions, and columns with high cardinality that can significantly reduce the search space.\"}"], ["train_workload_random_0_9q", "[I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions and frequently filtered columns in WHERE clauses are maintained. Avoid replacing these with indexes on less frequently queried columns or those not involved in joins or filters.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid using single-column indexes on columns with high cardinality and frequent joins or filters. Instead, use composite indexes that cover multiple columns involved in joins or filters, especially when they are frequently used together in queries.\"}"], ["train_workload_random_0_9q", "[I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple tables are involved in the query. Prioritize indexes on columns with high cardinality and those used in WHERE clauses with range conditions or equality checks. Avoid single-column indexes when composite indexes can provide better performance for complex queries.\"}"], ["train_workload_random_0_9q", "[I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other columns that are frequently used together in queries. Instead, focus on creating composite indexes that cover multiple columns used in join conditions or where clauses, especially when they are used together in multiple queries.\"}"], ["train_workload_random_0_9q", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_returns(wr_order_number)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across large tables, especially when they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and are not already indexed in the improvement selection.\"}"], ["train_workload_random_0_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk)]", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions across all tables involved in the queries. Avoid missing indexes on frequently joined columns and columns used in date range filters.\"}"], ["train_workload_random_0_9q", "[store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), item(i_item_id), catalog_returns(cr_order_number), web_returns(wr_order_number), web_site(web_site_id)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not directly involved in join conditions or filtering criteria. Prioritize indexes on columns frequently used in join conditions and filtering criteria, especially those with high cardinality.\"}"], ["train_workload_random_0_9q", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_returns(wr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are prioritized over indexes on columns used in filtering conditions. Avoid redundant indexes on columns that are already covered by composite indexes.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes that include columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes if the workload involves complex queries with multiple joins and filters.\"}"], ["train_workload_random_0_9q", " [date_dim(d_year), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions or filters. Instead, prioritize indexing columns that are used in join conditions and have lower cardinality, as they can significantly improve query performance.\"}"], ["train_workload_random_0_9q", "[I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{\"rule\": \"Ensure that indexes cover join and filter conditions in queries. Prioritize composite indexes on columns frequently used together in joins and filters, such as (item_sk, order_number) for sales and returns tables, and (sold_date_sk, promo_sk) for sales tables. Avoid single-column indexes on high-cardinality columns unless they are frequently used alone in filters.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid using single-column indexes on columns that are frequently used in join conditions or filters across multiple queries. Instead, consider composite indexes that cover multiple columns involved in these operations, especially when they are used together in the workload.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid using single-column indexes when multi-column indexes can better optimize query performance by covering multiple conditions simultaneously.\"}"], ["train_workload_random_0_9q", "[I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other columns that are frequently used together in queries. Instead, focus on creating composite indexes that cover multiple columns used in join conditions or where clauses, especially when they are used together in multiple queries.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid indexes on columns with low cardinality or columns that are frequently used in range queries, such as date columns, unless they are part of a composite index that includes a high cardinality column. Prioritize composite indexes that cover multiple columns used in join conditions and filters, especially when they involve high cardinality columns.\"}"], ["train_workload_random_0_9q", "[store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), item(i_item_id), catalog_returns(cr_order_number), web_returns(wr_order_number), web_site(web_site_id)]", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or join conditions, such as date_dim(d_date_sk) and item(i_item_sk), which are critical for query performance in the given workload.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid regression by ensuring composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple tables are involved in the query. Prioritize composite indexes that cover both join and filter columns, such as (date_dim.d_date_sk, date_dim.d_date) and (item.i_item_sk, item.i_current_price), over single-column indexes.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple tables are involved in the query. Prioritize indexes on columns with high cardinality and those used in WHERE clauses with range conditions or equality checks. Avoid single-column indexes when multi-column indexes can optimize the query better.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover filter conditions without considering join keys, especially for large tables with frequent joins.\"}"], ["train_workload_random_0_9q", " [date_dim(d_year, d_moy, d_date), item(i_color)].", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Avoid creating separate indexes on individual columns that are frequently used together in WHERE clauses or JOIN conditions. Instead, create composite indexes on these columns to improve query performance. For example, instead of separate indexes on date_dim(d_moy) and date_dim(d_year), use a composite index on date_dim(d_year, d_moy). Similarly, consider the usage patterns of columns like item(i_item_sk) and customer_address(ca_address_sk) in the workload to determine if composite indexes would be more beneficial.\"}"], ["train_workload_random_0_9q", " [date_dim(d_year, d_moy, d_date), item(i_color)].", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations to optimize query performance.\"}"], ["train_workload_random_0_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not directly involved in join conditions or filtering operations. Prioritize indexes on columns frequently used in join conditions and where clauses, especially those with high cardinality.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple tables are involved in the query. Prioritize indexes on columns with high cardinality and those used in WHERE clauses with range conditions or equality checks. Avoid single-column indexes when composite indexes can better serve the query patterns.\"}"], ["train_workload_random_0_9q", " [promotion(p_promo_sk), web_site(web_site_sk), date_dim(d_year, d_moy), item(i_item_sk)]", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{rule: \"Ensure indexes cover both join and filter conditions. Avoid indexes that only cover filter conditions without considering join conditions, especially for tables with large row counts.\"}"], ["train_workload_random_0_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in joins are maintained, especially for large tables. Avoid replacing these with indexes on columns used primarily for filtering unless they significantly improve query performance. In this case, maintain indexes on promotion(p_promo_sk), date_dim(d_date_sk), store(s_store_sk), and item(i_item_sk) as they are crucial for join operations in the workload.\"}"], ["train_workload_random_0_9q", "[I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{rule: \"Ensure indexes cover join conditions and filtering criteria. Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are frequently used in isolation.\"}"], ["train_workload_random_0_9q", " [date_dim(d_year), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are used in conjunction with other columns that already have indexes. Prioritize indexing columns that are frequently used in join conditions and filters, and ensure that indexes are not redundant with existing indexes on related columns.\"}"], ["train_workload_random_0_9q", "[I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses, especially for large tables. Prioritize indexes on columns involved in JOIN conditions and filters with high cardinality, such as date ranges and numeric comparisons.\"}"], ["train_workload_random_0_9q", " [date_dim(d_year, d_moy, d_date), item(i_color)].", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include columns used in WHERE clauses and JOIN conditions, such as date_dim(d_date_sk), store_sales(ss_item_sk, ss_ticket_number), store_returns(sr_item_sk, sr_ticket_number), catalog_sales(cs_item_sk, cs_order_number), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_item_sk, ws_order_number), and web_returns(wr_item_sk, wr_order_number).\"}"], ["train_workload_random_0_9q", "[store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), item(i_item_id), catalog_returns(cr_order_number), web_returns(wr_order_number), web_site(web_site_id)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not directly involved in join conditions or filtering criteria in the workload. Prioritize indexes on columns frequently used in join conditions and filtering criteria, especially those with high cardinality.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{rule: \"Ensure that indexes cover join and filter conditions in the workload queries, especially for large tables. Avoid indexes that do not align with the query patterns, such as those missing critical join keys or filter columns used in WHERE clauses.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined or filtered together, especially for large tables. Avoid using single-column indexes on high cardinality columns when composite indexes can provide better performance. Prioritize indexes on columns involved in joins and filters across multiple queries.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple tables are joined. Prioritize indexes on columns with high cardinality and those used in WHERE clauses with range conditions or equality checks. Avoid single-column indexes when multi-column indexes can optimize query performance better.\"}"], ["train_workload_random_0_9q", "[I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover individual columns used in joins without considering additional filtering conditions, especially when multiple tables are involved in the query.\"}"], ["train_workload_random_0_9q", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_returns(wr_order_number)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date_dim(d_moy) and date_dim(d_year), when more selective columns like promotion(p_promo_sk) and store(s_store_sk) are available. Prioritize indexing columns that are frequently used in join conditions and have high selectivity, such as item(i_item_sk) and customer_address(ca_address_sk), to improve query performance.\"}"], ["train_workload_random_0_9q", "[I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{rule: \"Ensure that indexes cover join and filter conditions in queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes on low cardinality columns or those not directly involved in joins or filters.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined or filtered together, especially for large tables. Avoid single-column indexes on high cardinality columns when composite indexes can better serve the workload.\"}"], ["train_workload_random_0_9q", " [date_dim(d_year), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number)]", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'item(i_item_sk)' and 'promotion(p_promo_sk)', when they are frequently used in join conditions with large tables. Instead, focus on indexing columns that are used in filtering conditions with high selectivity, such as 'date_dim(d_year)' and 'web_returns(wr_order_number, wr_item_sk)'.\"}"], ["train_workload_random_0_9q", " [date_dim(d_moy)]", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{\"rule\": \"Avoid creating composite indexes that include columns already indexed individually, especially when the individual index is sufficient for filtering or joining operations. In this case, the regression index includes 'date_dim(d_year, d_moy)' which overlaps with the improvement index 'date_dim(d_moy)', and other indexes on foreign key columns that are already covered by existing indexes.\"}"], ["train_workload_random_0_9q", " [promotion(p_promo_sk), web_site(web_site_sk), date_dim(d_year, d_moy), item(i_item_sk)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOINs and WHERE clauses with high cardinality, such as foreign keys and primary keys, to improve query performance.\"}"], ["train_workload_random_0_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk)]", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{\"rule\": \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns used in join conditions and where clauses across all tables involved in the queries. Avoid omitting indexes on frequently joined or filtered columns, such as date_dim(d_date_sk), store(s_store_sk), and item(i_item_sk), which are critical for query performance.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Ensure composite indexes are used for columns frequently joined or filtered together, especially for large tables. Avoid single-column indexes on high cardinality columns when composite indexes can cover multiple query predicates.\"}"], ["train_workload_random_0_9q", " [date_dim(d_year, d_moy, d_date), item(i_color)].", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily used in join conditions across multiple queries, especially if they are primary keys or foreign keys, as this can lead to unnecessary overhead and potential performance regressions. Instead, focus on indexing columns that are frequently used in WHERE clauses or as part of filtering conditions, such as date ranges or specific attributes like item color.\"}"], ["train_workload_random_0_9q", " [date_dim(d_year), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number)]", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{rule: \"Avoid creating indexes on columns that are already part of a join condition or are frequently used in WHERE clauses with equality conditions, as these columns are likely to be accessed efficiently without additional indexes. Instead, focus on indexing columns that are used in range queries or are part of complex expressions in the workload.\"}"], ["train_workload_random_0_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing these with indexes on columns that are not used in joins or are less frequently filtered, such as non-join date columns or non-join attributes, to prevent regression in query performance.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{rule: \"Ensure that indexes cover join and filter conditions in the workload queries, especially for large tables and frequently joined columns. Avoid creating indexes on columns that are not used in join or filter conditions, as they may not improve query performance and could lead to regressions.\"}"], ["train_workload_random_0_9q", "[I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover individual columns used in filters without considering join conditions. Prioritize composite indexes that include both join keys and frequently filtered columns, especially for large tables.\"}"], ["train_workload_random_0_9q", " [date_dim(d_year, d_moy, d_date), item(i_color)].", " [store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), store_returns(sr_ticket_number), date_dim(d_date), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily filtered or joined in the workload queries, as this can lead to redundant or inefficient index usage. Instead, focus on indexing columns that are frequently used in WHERE clauses or as join keys but are not already covered by existing indexes.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_year, d_moy), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), catalog_returns(cr_item_sk), web_sales(ws_item_sk, ws_sold_date_sk)].", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes that include columns frequently used together in joins and filters, such as date and item keys, to optimize query performance.\"}"], ["train_workload_random_0_9q", "[promotion(p_promo_sk), date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_item_sk), web_sales(ws_item_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOIN conditions and WHERE clauses with high cardinality, especially in large tables.\"}"], ["train_workload_random_0_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [Promotion(p_promo_sk), Date_dim(d_year, d_moy), Item(i_item_id), Web_site(web_site_sk)]", "{rule: \"Ensure indexes cover join and filter conditions in queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes on columns not directly involved in joins or filters.\"}"], ["train_workload_random_0_9q", "[promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), web_returns(wr_order_number)]", " [date_dim(d_moy), date_dim(d_year), item(i_item_sk), item(i_color), customer_address(ca_address_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date_dim(d_moy) and date_dim(d_year), when more selective columns like foreign keys (e.g., promotion(p_promo_sk), store(s_store_sk)) or frequently joined columns (e.g., catalog_sales(cs_sold_date_sk), web_returns(wr_order_number)) are available. Prioritize indexing columns that are used in join conditions and have high selectivity to improve query performance.\"}"]], "train_workload_random_15_3q": [["train_workload_random_15_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C item.i_manufact_id)]", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially when they involve large tables. Avoid redundant indexes that do not add value beyond existing composite indexes.\"}"], ["train_workload_random_15_3q", " [item(i_manufact_id, i_item_sk), date_dim(d_year, d_moy), store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk)]", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Ensure that all columns used in join conditions and filters in the workload queries are included in the index. Missing columns in the regression index, such as 'i_item_sk', 'd_year', 'ca_address_sk', and 'c_customer_sk', should be added to prevent performance regression.\"}"], ["train_workload_random_15_3q", " [Store(s_store_sk), Promotion(p_promo_sk), Date_dim(d_moy), Item(i_category), Web_sales(ws_sold_date_sk), Catalog_sales(cs_sold_date_sk)].", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Avoid adding composite indexes on columns with high cardinality unless they are frequently used together in query filters or joins. Prioritize single-column indexes on foreign keys and columns with frequent equality conditions.\"}"], ["train_workload_random_15_3q", " [catalog_sales(cs_sold_date_sk), item(i_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk)]", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Avoid creating indexes on columns that are already heavily filtered or joined in subqueries, especially when they are part of a large table with high cardinality, as this can lead to regression by increasing the index maintenance overhead without significant query performance improvement.\"}"], ["train_workload_random_15_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C item.i_manufact_id)]", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across all queries in the workload. Prioritize indexes on columns with high cardinality and those frequently used in filtering conditions.\"}"], ["train_workload_random_15_3q", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), item(i_category, i_class), store(s_store_sk), promotion(p_promo_sk)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes on date columns used in WHERE clauses, especially those with high cardinality like date_sk, are maintained in the regression index selection to prevent performance degradation.\"}"], ["train_workload_random_15_3q", " [Store(s_store_sk), Promotion(p_promo_sk), Item(i_manufact_id, i_item_sk, i_category, i_class), Date_dim(d_moy), Web_sales(ws_sold_date_sk)]", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions across multiple tables to prevent regression. For example, if a query involves multiple tables with join conditions on 'item_sk' and 'manufact_id', ensure both columns are indexed together. Additionally, consider indexing columns used in filter conditions like 'd_moy' and 'ca_gmt_offset' to optimize query performance.\"}"], ["train_workload_random_15_3q", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), date_dim(d_moy)].", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are only used in subqueries or are less frequently involved in filtering operations.\"}"], ["train_workload_random_15_3q", " [Store(s_store_sk), Promotion(p_promo_sk), Item(i_manufact_id, i_item_sk, i_category, i_class), Date_dim(d_moy), Web_sales(ws_sold_date_sk)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters across multiple queries are consistently included in the index selection. Specifically, maintain indexes on columns that are frequently used together in join conditions, such as 'i_item_sk' and 'i_manufact_id' in the 'Item' table, and 'ca_address_sk' in the 'Customer_address' table, to prevent regression.\"}"], ["train_workload_random_15_3q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_year, d_moy), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk)]", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables. Avoid redundant indexes that do not contribute to query performance improvement.\"}"], ["train_workload_random_15_3q", " [Store(s_store_sk), Promotion(p_promo_sk), Item(i_manufact_id, i_item_sk, i_category, i_class), Date_dim(d_moy), Web_sales(ws_sold_date_sk)]", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Ensure that all columns used in join conditions and filters in the workload are included in the index. Missing columns like 'i_item_sk' in the regression index can lead to performance regressions.\"}"], ["train_workload_random_15_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C item.i_manufact_id)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across all queries in the workload. Prioritize indexing columns that are frequently used together in multiple queries, especially those involved in filtering and joining large tables.\"}"], ["train_workload_random_15_3q", "[item(i_item_sk), date_dim(d_year), customer_address(ca_address_sk), customer(c_customer_sk)]", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, especially if they are involved in JOIN operations across large tables.\"}"], ["train_workload_random_15_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C item.i_manufact_id)]", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Ensure indexes cover columns involved in join conditions and filters across multiple queries in the workload, especially for high cardinality columns and those frequently used in WHERE clauses. Prioritize indexes on columns with integer types and those appearing in multiple queries to optimize performance and prevent regression.\"}"], ["train_workload_random_15_3q", " [item(i_manufact_id, i_item_sk), date_dim(d_year, d_moy), store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for tables with high row counts. Avoid omitting indexes on columns that are part of multiple query conditions across different queries.\"}"], ["train_workload_random_15_3q", " [item(i_manufact_id, i_item_sk), date_dim(d_year, d_moy), store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk)]", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Ensure that all tables involved in join conditions have indexes on the columns used in the join predicates. Specifically, if a workload involves multiple tables with join conditions, indexes should be created on the columns that are frequently used in these join conditions across different queries. This helps in optimizing query performance by reducing the time taken to execute joins.\"}"], ["train_workload_random_15_3q", "[store_sales(ss_sold_date_sk), item(i_item_sk), item(i_manufact_id), customer_address(ca_address_sk), date_dim(d_moy), customer(c_customer_sk), promotion(p_promo_sk), store(s_store_sk), item(i_class), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Ensure that all tables involved in the workload queries have at least one index on the columns used in join conditions and filters, especially for large tables. Avoid removing indexes on columns that are frequently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_15_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C item.i_manufact_id)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes on columns used in WHERE clauses with high cardinality and frequent joins are maintained. Avoid removing indexes on columns that are frequently used in filtering and joining operations, such as date and item identifiers, which are critical for query performance.\"}"], ["train_workload_random_15_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_sold_date_sk)]", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables.\"}"], ["train_workload_random_15_3q", " [item(i_manufact_id, i_item_sk), date_dim(d_year, d_moy), store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk)]", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Ensure all columns involved in join conditions and filters across multiple queries are indexed. Specifically, include columns used in WHERE clauses and JOIN conditions that are frequently queried together, such as date_dim(d_year, d_moy), customer_address(ca_address_sk), and customer(c_customer_sk).\"}"], ["train_workload_random_15_3q", " [Store(s_store_sk), Promotion(p_promo_sk), Date_dim(d_moy), Item(i_category), Web_sales(ws_sold_date_sk), Catalog_sales(cs_sold_date_sk)].", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions across multiple queries are consistently included in the index selection to prevent regression. Specifically, maintain indexes on columns like 'i_item_sk' and 'd_date_sk' that are frequently used in joins across different queries.\"}"], ["train_workload_random_15_3q", "[item(i_item_sk), date_dim(d_year), customer_address(ca_address_sk), customer(c_customer_sk)]", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Avoid adding indexes on columns that are not used in join conditions or filtering predicates in the workload queries, as they may not contribute to query performance and can lead to regression.\"}"], ["train_workload_random_15_3q", " [Store(s_store_sk), Promotion(p_promo_sk), Item(i_manufact_id, i_item_sk, i_category, i_class), Date_dim(d_moy), Web_sales(ws_sold_date_sk)]", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Ensure that all columns used in join conditions and filters in the workload are included in the index. Missing columns like i_item_sk in the regression index can lead to performance regressions.\"}"], ["train_workload_random_15_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C item.i_manufact_id)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across all queries in the workload. Prioritize indexes on columns with high cardinality and those frequently used in filtering conditions. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_15_3q", " [Store(s_store_sk), Promotion(p_promo_sk), Item(i_manufact_id, i_item_sk, i_category, i_class), Date_dim(d_moy), Web_sales(ws_sold_date_sk)]", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions across multiple tables to prevent regression. For example, if a query involves joining on 'item_sk' and filtering on 'category', ensure both columns are indexed together.\"}"], ["train_workload_random_15_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C item.i_manufact_id)]", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Ensure indexes cover columns involved in WHERE clauses and JOIN conditions across all queries in the workload. Prioritize indexing columns with high cardinality and those frequently used in filtering conditions. Avoid regression by maintaining indexes on columns that are critical for query performance, such as those used in JOINs and WHERE clauses, especially if they are part of composite conditions.\"}"], ["train_workload_random_15_3q", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), item(i_category, i_class), store(s_store_sk), promotion(p_promo_sk)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Avoid indexing columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and have high cardinality, especially in large tables.\"}"], ["train_workload_random_15_3q", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), item(i_category, i_class), store(s_store_sk), promotion(p_promo_sk)]", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Ensure indexes on date columns used in WHERE clauses for filtering large tables, especially when they are frequently joined with other tables. Prioritize indexes on columns that are used in multiple queries across the workload, such as date and category columns, to optimize query performance.\"}"], ["train_workload_random_15_3q", " [Store(s_store_sk), Promotion(p_promo_sk), Item(i_manufact_id, i_item_sk, i_category, i_class), Date_dim(d_moy), Web_sales(ws_sold_date_sk)]", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Ensure that indexes cover all columns involved in join conditions and filters across the workload queries. Avoid removing indexes on columns that are frequently used in join conditions, even if they are not directly filtered, as this can lead to performance regressions.\"}"], ["train_workload_random_15_3q", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), item(i_category, i_class), store(s_store_sk), promotion(p_promo_sk)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Avoid indexing columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and have high cardinality, especially in large tables.\"}"], ["train_workload_random_15_3q", " [catalog_sales(cs_sold_date_sk), item(i_item_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk)]", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Avoid creating indexes on columns that are already heavily filtered or joined in the workload queries, as this can lead to redundant or less effective indexing. Instead, focus on indexing columns that are frequently used in WHERE clauses or JOIN conditions but are not already indexed, especially those with high cardinality or those that can significantly reduce the result set size.\"}"], ["train_workload_random_15_3q", " [Store(s_store_sk), Promotion(p_promo_sk), Date_dim(d_moy), Item(i_category), Web_sales(ws_sold_date_sk), Catalog_sales(cs_sold_date_sk)].", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Avoid removing indexes on columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially if they are part of large tables or have high cardinality. Prioritize maintaining indexes on columns that are used in filtering conditions and aggregations.\"}"], ["train_workload_random_15_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C item.i_manufact_id)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across all queries in the workload. Prioritize indexing columns with high cardinality and those frequently used in filtering conditions. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_15_3q", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), item(i_category, i_class), store(s_store_sk), promotion(p_promo_sk)]", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Ensure that indexes on date columns used in WHERE clauses for filtering large tables are maintained, as they are critical for performance in time-based queries. Avoid replacing them with indexes on less frequently filtered columns unless justified by workload changes.\"}"], ["train_workload_random_15_3q", "[date_dim(d_date_sk), item(i_manufact_id), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_sk), date_dim(d_year), item(i_category), item(i_class)]", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize columns involved in WHERE clauses and JOIN conditions across multiple queries, especially those with high cardinality or frequently queried values.\"}"], ["train_workload_random_15_3q", "[date_dim(d_date_sk), item(i_manufact_id), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_sk), date_dim(d_year), item(i_category), item(i_class)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across all queries in the workload. Prioritize indexes on columns with high cardinality and those frequently used in filtering conditions. Avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_15_3q", " [Store(s_store_sk), Promotion(p_promo_sk), Date_dim(d_moy), Item(i_category), Web_sales(ws_sold_date_sk), Catalog_sales(cs_sold_date_sk)].", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions across multiple queries, as they may lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in filtering conditions and aggregations, especially those with high cardinality.\"}"], ["train_workload_random_15_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_sold_date_sk)]", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries, especially for large tables. Avoid omitting indexes on frequently joined or filtered columns like 'date_dim.d_year', 'customer_address.ca_address_sk', and 'item.i_item_sk' which are critical for query performance.\"}"], ["train_workload_random_15_3q", " [item(i_manufact_id, i_item_sk), date_dim(d_year, d_moy), store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions across all tables involved in the queries. Avoid omitting indexes on frequently joined or filtered columns, such as 'i_item_sk', 'd_year', and 'd_moy', which are critical for query performance.\"}"], ["train_workload_random_15_3q", " [item(i_manufact_id, i_item_sk), date_dim(d_year, d_moy), store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk)]", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Ensure all tables involved in join conditions have indexes on the columns used in the join predicates, especially for large tables. Prioritize indexing columns that are frequently used in WHERE clauses and GROUP BY operations.\"}"], ["train_workload_random_15_3q", "[store_sales(ss_sold_date_sk), item(i_item_sk), item(i_manufact_id), customer_address(ca_address_sk), date_dim(d_moy), customer(c_customer_sk), promotion(p_promo_sk), store(s_store_sk), item(i_class), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Ensure that all foreign key columns used in join conditions across multiple queries are indexed, especially when they are part of large tables or frequently used in the workload. Additionally, maintain indexes on columns that are used in WHERE clauses with high selectivity to prevent regression.\"}"], ["train_workload_random_15_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C item.i_manufact_id)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across all queries in the workload. Prioritize indexing columns with high cardinality and those frequently used in filtering conditions. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_15_3q", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), item(i_category, i_class), store(s_store_sk), promotion(p_promo_sk)]", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Ensure that indexes on date columns used in WHERE clauses for filtering large tables are maintained, as they are critical for performance. Avoid removing indexes on columns that are frequently used in join conditions across multiple queries, especially when they involve large tables.\"}"], ["train_workload_random_15_3q", "[store_sales(ss_sold_date_sk), item(i_item_sk), item(i_manufact_id), customer_address(ca_address_sk), date_dim(d_moy), customer(c_customer_sk), promotion(p_promo_sk), store(s_store_sk), item(i_class), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Ensure that all tables involved in the workload queries have at least one index on the columns used in join conditions and filters. Avoid removing indexes on columns that are frequently used in WHERE clauses or JOIN conditions across multiple queries, especially for large tables.\"}"], ["train_workload_random_15_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C item.i_manufact_id)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in conjunction with other columns in WHERE clauses. Instead, focus on indexing columns that are frequently used in JOIN conditions and have high cardinality, as well as columns that are used in GROUP BY or ORDER BY clauses.\"}"], ["train_workload_random_15_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C item.i_manufact_id)]", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Ensure that indexes on columns used in WHERE clauses with high cardinality and frequent joins are maintained. Avoid removing indexes on columns that are frequently used in subqueries or as part of complex conditions, especially if they are part of the primary filtering criteria in multiple queries.\"}"], ["train_workload_random_15_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C item.i_manufact_id)]", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across all queries in the workload. Prioritize indexing columns with high cardinality and those frequently used in filtering conditions. Avoid regression by maintaining indexes on columns that are critical for query performance, such as those involved in multiple query conditions or large table joins.\"}"], ["train_workload_random_15_3q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_year, d_moy), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes on columns used in WHERE clauses for filtering are consistent across similar queries, especially for columns involved in joins and aggregations. Avoid redundant indexes on columns that are not frequently used in filtering or joining operations.\"}"], ["train_workload_random_15_3q", " [item(i_manufact_id, i_item_sk), date_dim(d_year, d_moy), store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk)]", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk, i_manufact_id)]", "{rule: \"Ensure that all foreign key relationships used in join conditions are indexed, especially those involving large tables and frequently queried columns. In this case, ensure that 'date_dim(d_year, d_moy)' and 'web_sales(ws_sold_date_sk)' are indexed as they are missing in the regression index but present in the improvement index.\"}"], ["train_workload_random_15_3q", "[store_sales(ss_sold_date_sk), item(i_item_sk), item(i_manufact_id), customer_address(ca_address_sk), date_dim(d_moy), customer(c_customer_sk), promotion(p_promo_sk), store(s_store_sk), item(i_class), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", " [Item(i_manufact_id), Date_dim(d_moy), Store(s_store_sk), Promotion(p_promo_sk)].", "{rule: \"Ensure that all foreign key columns used in join conditions across multiple queries are indexed, especially when they are part of large tables or frequently used in the workload. Additionally, maintain indexes on columns that are used in WHERE clauses with high selectivity to prevent regression.\"}"], ["train_workload_random_15_3q", " [item(i_manufact_id, i_item_sk), date_dim(d_year, d_moy), store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_moy), Item(i_category, i_class), Customer_address(ca_address_sk)]", "{rule: \"Ensure that all necessary columns used in WHERE clauses and JOIN conditions across the workload are indexed. Specifically, include multi-column indexes for frequently joined columns and columns with high cardinality that are used together in WHERE clauses. Avoid omitting indexes on columns that are part of subqueries or used in multiple queries, such as 'i_manufact_id' and 'd_year' in this workload.\"}"]], "train_workload_random_17_9q": [["train_workload_random_17_9q", " [item(i_item_id, i_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are less frequently used or only appear in specific queries unless they are critical for performance.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure multi-column indexes are used for columns frequently involved in join conditions and filters, especially when they appear together in multiple queries. Prioritize indexes on columns with high cardinality and those involved in WHERE clauses with specific values or ranges. Avoid single-column indexes when multi-column indexes can optimize multiple queries simultaneously.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are frequently filtered or joined independently.\"}"], ["train_workload_random_17_9q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join or filter conditions of the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance. Additionally, ensure that indexes are created on columns with high cardinality to maximize their effectiveness.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially for columns with high cardinality or those involved in complex operations like subqueries or aggregations. Prioritize composite indexes when multiple columns are consistently used together in queries.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses with high cardinality, such as date columns and item identifiers, as these are critical for query performance.\"}"], ["train_workload_random_17_9q", " [item(i_item_id, i_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{\"rule\": \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, as this can lead to regression by increasing the complexity and size of the index. Instead, focus on indexing columns that are used in filtering conditions and have high selectivity, such as primary keys or unique identifiers.\"}"], ["train_workload_random_17_9q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_17_9q", " [Promotion(p_promo_sk), Customer_address(ca_gmt_offset), Customer_demographics(cd_marital_status)]", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{\"rule\": \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as this can lead to regression by increasing the cost of maintaining the index and potentially slowing down insert/update operations. Instead, focus on indexing columns that are used in filtering conditions (e.g., WHERE clauses) and have high selectivity, such as 'Promotion(p_promo_sk)', 'Customer_address(ca_gmt_offset)', and 'Customer_demographics(cd_marital_status)'.\"}"], ["train_workload_random_17_9q", " [item(i_item_id, i_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_17_9q", " [item(i_item_id, i_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple tables, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in WHERE clauses and GROUP BY operations to optimize query filtering and aggregation.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure indexes cover join and filter conditions in queries. Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid indexes on columns with low cardinality or those not involved in filtering or joining operations.\"}"], ["train_workload_random_17_9q", "[item(i_item_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), date_dim(d_date), web_returns(wr_item_sk), date_dim(d_year)]", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and are not part of existing indexes in other tables.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple join conditions and filters on multiple columns.\"}"], ["train_workload_random_17_9q", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk)].", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, as this can lead to excessive index maintenance and degrade performance. Instead, prioritize indexing columns that are used in WHERE clauses and have high selectivity, especially those involved in filtering large datasets.\"}"], ["train_workload_random_17_9q", " [item(i_item_id, i_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized, especially for large tables, to prevent regression in query performance. Avoid replacing or removing such indexes with those on less frequently queried columns or smaller tables.\"}"], ["train_workload_random_17_9q", " [Store_sales(ss_sold_date_sk), Catalog_sales(cs_sold_date_sk)].", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when these columns are already indexed in other tables. Instead, focus on indexing columns that are used in WHERE clauses and are not part of existing indexes, particularly in large tables with high row counts.\"}"], ["train_workload_random_17_9q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, as these can significantly improve query performance.\"}"], ["train_workload_random_17_9q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), store_returns(sr_item_sk, sr_ticket_number), item(i_category, i_item_id, i_color), store(s_store_id, s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential)]", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables for similar purposes, especially when they are used in join conditions. Prioritize indexing columns that are frequently used in WHERE clauses and GROUP BY operations, and ensure that indexes are not redundant across tables. Consider the selectivity and cardinality of columns when choosing indexes to prevent regression.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes that include columns not directly involved in filtering or joining conditions in the workload queries. Focus on single-column indexes for columns frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or involved in equality conditions.\"}"], ["train_workload_random_17_9q", "[item(i_item_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), date_dim(d_date), web_returns(wr_item_sk), date_dim(d_year)]", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when they are already indexed in other tables. Prioritize indexing columns that are used in WHERE clauses with high selectivity and columns involved in ORDER BY or GROUP BY operations.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when dealing with large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple joins and filters, as this can lead to performance regressions.\"}"], ["train_workload_random_17_9q", "[item(i_item_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), date_dim(d_date), web_returns(wr_item_sk), date_dim(d_year)]", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join conditions involve large tables. Instead, focus on indexing columns that are used in WHERE clauses and are part of smaller tables or have high selectivity.\"}"], ["train_workload_random_17_9q", " [item(i_item_id, i_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure indexes cover columns used in join conditions and filters, especially for large tables. Prioritize indexes on foreign keys and columns frequently used in WHERE clauses. Avoid indexes on columns with low cardinality or those not involved in critical query paths.\"}"], ["train_workload_random_17_9q", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk)].", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables unless they are part of a primary key or foreign key relationship. Prioritize indexing columns that are used in WHERE clauses and have high cardinality, especially if they are used in filtering large tables.\"}"], ["train_workload_random_17_9q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Instead, focus on indexing columns that are used in WHERE clauses or as filter conditions, and ensure that indexes are not redundant with existing ones.\"}"], ["train_workload_random_17_9q", " [item(i_item_id, i_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple tables, especially if they are already indexed in the improvement selection. Focus on indexing columns that are used in WHERE clauses and are not already covered by existing indexes. Prioritize indexing columns that are used in filtering conditions with high cardinality and those that are involved in aggregation operations.\"}"], ["train_workload_random_17_9q", " [item(i_item_id, i_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized, especially when they are frequently used in the workload. Avoid creating indexes on columns that are not directly used in join or filter conditions, as they may not provide significant performance benefits and could lead to regression.\"}"], ["train_workload_random_17_9q", "[item(i_item_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), date_dim(d_date), web_returns(wr_item_sk), date_dim(d_year)]", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when they are already indexed in other tables. Prioritize indexing columns that are used in WHERE clauses with filtering conditions and are not already indexed in other tables involved in the query.\"}"], ["train_workload_random_17_9q", " [Promotion(p_promo_sk), Customer_address(ca_gmt_offset), Customer_demographics(cd_marital_status)]", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when these columns are already part of foreign key relationships. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, such as columns involved in WHERE clauses with specific values or ranges.\"}"], ["train_workload_random_17_9q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), store_returns(sr_item_sk, sr_ticket_number), item(i_category, i_item_id, i_color), store(s_store_id, s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential)]", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables for similar purposes, especially when they are part of foreign key relationships or frequently used in joins. Prioritize indexing columns that are used in WHERE clauses with specific conditions or filters, and ensure that indexes are not redundant across multiple tables unless necessary for performance optimization.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize composite indexes that include columns frequently used together in WHERE clauses and JOIN conditions. Avoid indexes on columns with low cardinality or those not involved in filtering or joining operations.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables. Prioritize composite indexes on columns that are used together in JOINs or WHERE conditions to improve query performance.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Ensure composite indexes are used for frequently joined columns and filtering conditions, especially for large tables. Avoid single-column indexes on columns that are often used together in queries, as seen in the regression index selection.\"}"], ["train_workload_random_17_9q", " [Store_sales(ss_sold_date_sk), Catalog_sales(cs_sold_date_sk)].", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in filtering or joining operations in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses or JOIN conditions, especially those with high cardinality or those that significantly reduce the result set size.\"}"], ["train_workload_random_17_9q", "[item(i_item_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), date_dim(d_date), web_returns(wr_item_sk), date_dim(d_year)]", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid redundant indexes on columns that are already covered by existing indexes in the workload.\"}"], ["train_workload_random_17_9q", " [item(i_item_id, i_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_17_9q", " [Promotion(p_promo_sk), Customer_address(ca_gmt_offset), Customer_demographics(cd_marital_status)]", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, as this can lead to excessive index maintenance overhead and may not significantly improve query performance. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, such as 'ca_gmt_offset' and 'cd_marital_status' in the improvement index.\"}"], ["train_workload_random_17_9q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), store_returns(sr_item_sk, sr_ticket_number), item(i_category, i_item_id, i_color), store(s_store_id, s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential)]", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Specifically, include composite indexes on columns frequently used together in joins and filters, such as (sr_item_sk, sr_ticket_number) for store_returns and (i_category, i_item_id, i_color) for item, to prevent regression.\"}"], ["train_workload_random_17_9q", " [item(i_item_id, i_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid redundant indexes on columns that are already covered by other indexes in the workload.\"}"], ["train_workload_random_17_9q", "[item(i_item_sk), promotion(p_promo_sk), date_dim(d_date, d_date_sk), web_returns(wr_order_number, wr_item_sk, wr_return_amt), web_site(web_site_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), household_demographics(hd_buy_potential), warehouse(w_warehouse_sk)]", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions, such as date_dim(d_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), and customer_address(ca_gmt_offset). Avoid omitting critical columns like d_date_sk and wr_item_sk that are frequently used in joins and filters.\"}"], ["train_workload_random_17_9q", "[item(i_item_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_order_number), date_dim(d_date), web_returns(wr_item_sk), date_dim(d_year)]", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in filtering or joining operations in the workload queries. Focus on columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses. Additionally, prioritize indexes on columns with high cardinality and those that are part of composite keys used in the workload.\"}"], ["train_workload_random_17_9q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), store_returns(sr_item_sk, sr_ticket_number), item(i_category, i_item_id, i_color), store(s_store_id, s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential)]", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure that indexes cover all join and filter columns used in the workload queries. Specifically, include composite indexes for columns frequently used together in joins and filters, such as (sr_item_sk, sr_ticket_number) for store_returns and (i_category, i_item_id, i_color) for item, to prevent regression.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of multiple join conditions across different queries, such as 'cs_sold_date_sk', 'i_item_sk', and 'd_date_sk'. Additionally, prioritize indexing columns that are used in WHERE clauses with high selectivity, like 'i_item_id' and 'ca_address_sk', to prevent regression in query performance.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes if multiple columns are consistently used together in queries.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are consistently used in isolation.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure that indexes cover the join and filter conditions used in the workload queries, especially for large tables and frequently joined columns. Avoid indexes on columns that are not used in joins or filters, as they may not provide performance benefits and could lead to regressions.\"}"], ["train_workload_random_17_9q", " [item(i_item_id, i_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are less frequently used or only appear in specific queries unless they are critical for performance.\"}"], ["train_workload_random_17_9q", " [item(i_item_id, i_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{\"rule\": \"Ensure composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid single-column indexes on columns that are often used together in queries, as seen in the regression index selection where single-column indexes are used instead of composite indexes that were present in the improvement index selection.\"}"], ["train_workload_random_17_9q", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk)].", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{\"rule\": \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance. Additionally, ensure that indexes are created on columns with high selectivity to maximize their effectiveness.\"}"], ["train_workload_random_17_9q", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk)].", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables unless they are part of a foreign key relationship. Prioritize indexing columns that are used in WHERE clauses with high selectivity and columns involved in ORDER BY or GROUP BY operations.\"}"], ["train_workload_random_17_9q", " [Store_sales(ss_sold_date_sk), Catalog_sales(cs_sold_date_sk)].", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join conditions involve large tables. Instead, prioritize indexing columns that are used in WHERE clauses with high selectivity or are part of GROUP BY operations to improve query performance.\"}"], ["train_workload_random_17_9q", " [Promotion(p_promo_sk), Customer_address(ca_gmt_offset), Customer_demographics(cd_marital_status)]", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially if they are already indexed in other tables. Focus on indexing columns that are used in WHERE clauses with specific filters or aggregations, and ensure that indexes are not redundant or overlapping with existing indexes.\"}"], ["train_workload_random_17_9q", "[item(i_item_sk), promotion(p_promo_sk), date_dim(d_date, d_date_sk), web_returns(wr_order_number, wr_item_sk, wr_return_amt), web_site(web_site_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), household_demographics(hd_buy_potential), warehouse(w_warehouse_sk)]", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure that all necessary join keys and frequently filtered columns are indexed, especially for large tables. Avoid removing indexes on columns that are used in join conditions or where clauses across multiple queries, such as 'd_date_sk' in 'date_dim' and 'wr_item_sk' in 'web_returns'. Additionally, maintain indexes on columns that are used in subqueries or correlated subqueries, like 'i_item_id' in 'item' when it is used in subqueries for filtering.\"}"], ["train_workload_random_17_9q", " [item(i_item_id, i_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized, especially for large tables, to prevent regression in query performance. Avoid removing or deprioritizing indexes on columns frequently used in WHERE clauses or as join keys, such as 'store_sales(ss_sold_date_sk)', 'catalog_sales(cs_sold_date_sk)', and 'web_sales(ws_sold_date_sk)'.\"}"], ["train_workload_random_17_9q", "[item(i_item_sk), promotion(p_promo_sk), date_dim(d_date, d_date_sk), web_returns(wr_order_number, wr_item_sk, wr_return_amt), web_site(web_site_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), household_demographics(hd_buy_potential), warehouse(w_warehouse_sk)]", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes cover both the join keys and the filtering conditions. Avoid removing indexes on columns frequently used in WHERE clauses, especially those with high cardinality or used in range queries. Consider the impact of removing indexes on columns used in multiple queries across different tables, such as date_dim(d_date_sk) and customer_address(ca_address_sk).\"}"], ["train_workload_random_17_9q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as this can lead to regression by increasing the index maintenance overhead. Instead, focus on indexing columns that are used in filtering conditions and have high selectivity.\"}"], ["train_workload_random_17_9q", " [Promotion(p_promo_sk), Customer_address(ca_gmt_offset), Customer_demographics(cd_marital_status)]", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating indexes on columns that are already heavily filtered or joined in the workload queries, as this can lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are frequently used in WHERE clauses or as join keys but are not already indexed.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize composite indexes that cover multiple columns used together in joins or filters, especially for high cardinality columns. Avoid redundant indexes that do not improve query performance or cover additional query patterns.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple join conditions and filters on multiple columns.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are frequently filtered or joined independently.\"}"], ["train_workload_random_17_9q", " [item(i_item_id, i_item_sk), store_sales(ss_sold_date_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date keys and foreign keys. Avoid indexes on columns with low cardinality or those not directly involved in query conditions.\"}"], ["train_workload_random_17_9q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [date_dim(d_date_sk), catalog_sales(cs_item_sk), item(i_item_sk), store_returns(sr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number), customer_address(ca_address_sk), catalog_returns(cr_order_number), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid adding indexes on columns that are already part of a foreign key relationship or are frequently joined, as this can lead to redundant indexing and potential performance regressions. Focus on indexing columns that are used in WHERE clauses and are not already indexed by foreign key constraints.\"}"], ["train_workload_random_17_9q", " [Promotion(p_promo_sk), Customer_address(ca_gmt_offset), Customer_demographics(cd_marital_status)]", " [Item(i_item_sk), Promotion(p_promo_sk), Date_dim(d_date, d_year), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily filtered or joined in the workload queries, as this can lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are frequently used in WHERE clauses or as join keys but are not already covered by existing indexes.\"}"], ["train_workload_random_17_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_id), customer_address(ca_address_sk), date_dim(d_moy), catalog_sales(cs_item_sk), catalog_returns(cr_order_number), item(i_color), item(i_current_price), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_order_number), store_returns(sr_return_amt), store_sales(ss_item_sk), store_sales(ss_ticket_number)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Focus on indexing columns that are used in WHERE clauses with high selectivity and columns involved in GROUP BY operations to optimize query performance.\"}"], ["train_workload_random_17_9q", "[item(i_item_sk), promotion(p_promo_sk), date_dim(d_date, d_date_sk), web_returns(wr_order_number, wr_item_sk, wr_return_amt), web_site(web_site_sk), catalog_returns(cr_order_number), customer_demographics(cd_demo_sk), household_demographics(hd_buy_potential), warehouse(w_warehouse_sk)]", " [item(i_item_sk, i_item_id), promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Avoid removing indexes that are used in multiple queries, especially those involving large tables or frequently joined columns. Prioritize indexes on columns with high cardinality and those involved in WHERE clauses, JOIN conditions, and GROUP BY operations.\"}"]], "train_workload_random_19_3q": [["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns with low cardinality or columns that are frequently used in join conditions with high cardinality columns, as they may lead to performance regressions. Prioritize indexing columns that are used in filtering conditions and have high cardinality.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), date_dim(d_dow)].", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in complex queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and avoid redundant indexes on columns with low cardinality or those not directly involved in query predicates.\"}"], ["train_workload_random_19_3q", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid adding indexes on columns that are not part of the join or filter conditions in the workload queries, especially if they are not frequently used in the workload. Focus on indexing columns that are used in join conditions and where clauses to improve query performance.\"}"], ["train_workload_random_19_3q", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are part of a join condition but not frequently filtered or aggregated in the workload. Prioritize indexing columns that are used in WHERE clauses with range conditions or are frequently aggregated.\"}"], ["train_workload_random_19_3q", "[date_dim(d_date), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), store(s_store_sk), web_returns(wr_order_number), web_site(web_site_sk), catalog_returns(cr_order_number)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes on date columns used in range filters and join conditions are maintained, as they are critical for query performance. Additionally, maintain indexes on columns frequently used in join conditions across large tables.\"}"], ["train_workload_random_19_3q", " [customer(c_customer_sk), customer_address(ca_address_sk), date_dim(d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries. Instead, focus on indexing columns that are used in WHERE clauses, have high cardinality, or are part of join conditions that are critical for query performance. Additionally, prioritize indexing columns that are used in ORDER BY or GROUP BY clauses to optimize sorting and aggregation operations.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price)]", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid regression by ensuring indexes cover join and filter conditions. Prioritize composite indexes for columns frequently used together in joins and filters, especially for large tables. Consider the workload's query patterns and ensure indexes align with the most common and costly operations.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Prioritize composite indexes on columns frequently used together in join conditions and filters, especially when they involve large tables. Avoid single-column indexes on columns that are part of complex join conditions or filters, as they may not provide significant performance benefits.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), date_dim(d_date, d_year), customer_address(ca_address_sk), item(i_item_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, especially when the workload involves joins on these columns. Instead, prioritize individual indexes on columns frequently used in join conditions and filters.\"}"], ["train_workload_random_19_3q", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in other tables involved in the join. Instead, prioritize indexing columns that are used in filtering conditions or are part of large tables to improve query performance.\"}"], ["train_workload_random_19_3q", "[date_dim(d_date), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), store(s_store_sk), web_returns(wr_order_number), web_site(web_site_sk), catalog_returns(cr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already covered by single-column indexes in the improvement selection, especially when the workload involves joins and filters on those columns. Instead, prioritize single-column indexes that align with the join and filter conditions in the workload.\"}"], ["train_workload_random_19_3q", "[date_dim(d_date), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), store(s_store_sk), web_returns(wr_order_number), web_site(web_site_sk), catalog_returns(cr_order_number)]", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that all join keys and frequently filtered columns in the workload are indexed. Avoid removing indexes on columns that are used in join conditions or as filters in multiple queries, such as customer(c_customer_sk), store(s_store_sk), and web_site(web_site_sk).\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover both join keys and frequently filtered columns. Avoid indexes that only cover single columns when multi-column indexes can better optimize query performance, especially for large tables with complex joins and filters.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure multi-column indexes are preserved when they involve frequently filtered columns, especially when filtering on a combination of columns like item_sk and current_price in the workload.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid replacing composite indexes with single-column indexes unless the workload specifically benefits from such a change.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure multi-column indexes are preserved when they involve columns frequently used together in WHERE clauses, especially when filtering large datasets. Avoid replacing them with single-column indexes unless the workload analysis shows a clear benefit.\"}"], ["train_workload_random_19_3q", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables unless they are part of a primary key or foreign key relationship. Instead, prioritize indexing columns that are used in WHERE clauses with range conditions or are part of large tables to improve query performance.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Prioritize composite indexes on columns frequently used together in join conditions and filters, especially when they involve large tables. Avoid single-column indexes on columns that are part of composite conditions unless they are frequently used independently.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), date_dim(d_date, d_year), customer_address(ca_address_sk), item(i_item_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, especially if they are frequently used in join conditions or filters. Instead, prioritize single-column indexes on frequently joined or filtered columns to prevent regression.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure multi-column indexes are used for columns frequently queried together, especially when filtering and joining on large tables. Avoid single-column indexes on columns that are part of frequent multi-column conditions in the workload.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexes on columns that are involved in filtering large datasets or are part of JOIN conditions, especially when they are combined with other columns in composite indexes.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), date_dim(d_date, d_year), item(i_item_sk), customer_address(ca_address_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_item_sk, wr_order_number)]", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that all join conditions in the workload queries are supported by indexes. Specifically, if a query involves joining on multiple columns, such as (wr_item_sk, wr_order_number), ensure that the index covers all columns involved in the join. Additionally, prioritize indexing columns that are frequently used in WHERE clauses with range conditions, such as d_year, to optimize query performance.\"}"], ["train_workload_random_19_3q", " [customer(c_customer_sk), customer_address(ca_address_sk), date_dim(d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns involved in multiple queries, especially those with high cardinality or used in WHERE clauses. Avoid redundant indexes on columns with low cardinality or those not frequently queried.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns with low cardinality or columns that are not used in join conditions or filters in the workload queries. Prioritize indexing columns that are frequently used in join conditions, filters, and have high cardinality.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), date_dim(d_date, d_year), item(i_item_sk), customer_address(ca_address_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_item_sk, wr_order_number)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure all tables involved in join conditions have indexes on the columns used in the join. Additionally, include indexes on columns used in WHERE clauses that filter large datasets, especially when filtering by date ranges or specific values.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), date_dim(d_date, d_year), customer_address(ca_address_sk), item(i_item_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, especially if they are frequently used in join conditions or filters. Instead, prioritize individual indexes on columns that are part of join conditions or where clauses in the workload queries.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price)]", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other columns that are frequently used together in queries. Instead, focus on creating composite indexes that cover multiple columns used in join conditions or filters, especially when they are used together in multiple queries.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently queried together, especially when filtering and joining on multiple columns. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple conditions on the same table.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns that are not directly used in join or filter conditions of the workload queries, especially if they are not part of a composite index that includes such columns. In this case, the index on 'date_dim.d_year' in the regression index selection is not necessary as it is not directly used in join or filter conditions, and the index on 'item.i_item_sk' should be a composite index with 'item.i_current_price' as in the improvement index.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure that composite indexes are maintained when they cover multiple columns that are frequently queried together, especially when involving large tables or complex joins. Avoid replacing composite indexes with single-column indexes if the workload involves filtering or joining on multiple columns simultaneously.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding single-column indexes on columns that are already part of a multi-column index unless there is a specific query pattern that benefits from the single-column index. In this case, the regression index added a single-column index on 'item.i_item_sk' which is already part of a multi-column index 'item.i_item_sk, item.i_current_price' in the improvement index. This can lead to unnecessary index maintenance overhead without significant query performance benefits.\"}"], ["train_workload_random_19_3q", " [customer(c_customer_sk), customer_address(ca_address_sk), date_dim(d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns involved in join conditions across large tables, especially when they are frequently used in the workload. Avoid removing indexes that support critical join operations or filter conditions, particularly in high cardinality columns.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Prioritize composite indexes on columns frequently used together in join conditions and filters, especially when they involve large tables. Avoid single-column indexes on columns that are part of composite keys in the workload, as they may lead to regressions in query performance.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), date_dim(d_date, d_year), item(i_item_sk), customer_address(ca_address_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns involved in join conditions or filters. Prioritize single-column indexes on columns frequently used in WHERE clauses and JOIN conditions, such as foreign keys and date columns.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), date_dim(d_dow)].", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions across all tables involved in the queries.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns that are used in equality joins with large tables unless they are frequently filtered or aggregated. Prioritize composite indexes that cover multiple columns used together in WHERE clauses or JOIN conditions, especially when they involve range conditions or multiple filters.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are frequently used in isolation.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), date_dim(d_date, d_year), item(i_item_sk), customer_address(ca_address_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_item_sk, wr_order_number)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included in the index selection to prevent regression. Prioritize indexing on columns that are frequently used in join conditions and filters, especially those with high cardinality or those involved in large tables.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns with low cardinality or columns that are frequently used in join conditions with high cardinality columns, as they may lead to performance regressions.\"}"], ["train_workload_random_19_3q", " [customer(c_customer_sk), customer_address(ca_address_sk), date_dim(d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or join conditions across multiple queries, such as date_dim(d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_sales(cs_sold_date_sk), and web_sales(ws_sold_date_sk).\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding single-column indexes on columns that are already part of a multi-column index unless the single-column index is frequently used independently in queries. In this case, the regression index added a single-column index on 'item.i_item_sk' which is already part of a multi-column index 'item.i_item_sk, item.i_current_price' in the improvement index. This can lead to unnecessary index maintenance overhead without significant query performance benefits.\"}"], ["train_workload_random_19_3q", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially when the column is part of a large table. Instead, prioritize indexing columns that are used in filtering conditions and have high selectivity, as they can significantly reduce the search space and improve query performance.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Prioritize indexes on columns with high cardinality and those involved in WHERE clauses with range conditions or equality checks.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), date_dim(d_dow)].", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in join conditions, filtering predicates, and group by clauses to improve query performance.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure multi-column indexes are used for columns frequently queried together, especially when filtering and joining on large tables. Avoid single-column indexes on columns that are part of multi-column conditions in the workload.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), date_dim(d_dow)].", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for filtering or joining operations. Prioritize single-column indexes on frequently joined or filtered columns, especially those involved in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_19_3q", " [customer(c_customer_sk), customer_address(ca_address_sk), date_dim(d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns frequently used in join conditions across large tables, such as store_sales(ss_item_sk, ss_ticket_number) and catalog_sales(cs_item_sk, cs_order_number). Avoid redundant indexes on smaller tables or columns with low cardinality unless they are critical for specific query performance.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), date_dim(d_date, d_year), customer_address(ca_address_sk), item(i_item_sk), catalog_page(cp_catalog_page_sk)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Prioritize indexing columns involved in join conditions and filters that are frequently used across multiple queries, especially those with high cardinality and those that are part of large tables. Avoid indexing columns that are not directly involved in filtering or joining operations, as they may lead to unnecessary overhead without significant performance benefits.\"}"], ["train_workload_random_19_3q", " [customer(c_customer_sk), customer_address(ca_address_sk), date_dim(d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in query predicates. Instead, focus on single-column indexes for columns that are frequently used in WHERE clauses or JOIN conditions, especially those with high cardinality or those that are part of large tables.\"}"], ["train_workload_random_19_3q", " [customer(c_customer_sk), customer_address(ca_address_sk), date_dim(d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns involved in join conditions and frequently used filter predicates across multiple queries. Avoid removing indexes that are used in multiple queries, especially those that are part of join conditions or filter predicates.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns that are used in equality joins with large tables unless they are frequently filtered or aggregated. Prioritize indexes on columns involved in range queries, frequent filters, or aggregations, especially when combined with other columns in composite indexes.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), date_dim(d_date, d_year), item(i_item_sk), customer_address(ca_address_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_item_sk, wr_order_number)]", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover all join conditions and filter predicates in the workload queries. Specifically, include indexes on columns used in join conditions across multiple tables and those used in WHERE clauses for filtering, such as date_dim(d_date_sk) and catalog_returns(cr_order_number) in the regression index selection.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Prioritize composite indexes for columns frequently used together in joins and filters, especially when they involve large tables. Avoid single-column indexes when multi-column indexes can optimize multiple queries.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns with low cardinality or columns that are frequently used in join conditions with high cardinality columns, as they may lead to performance regressions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, especially when they are combined with other columns in composite indexes.\"}"], ["train_workload_random_19_3q", " [customer(c_customer_sk), customer_address(ca_address_sk), date_dim(d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns involved in join conditions and frequently used filter predicates across multiple queries. Avoid removing indexes that are used in multiple queries, especially those that are part of join conditions or filter predicates.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), date_dim(d_date, d_year), item(i_item_sk), customer_address(ca_address_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes with prefix 'I(C ' as they indicate potential redundancy or misalignment with the workload requirements. Instead, focus on indexes that directly align with the query's join and filter conditions, such as those on primary keys or frequently queried columns.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), date_dim(d_dow)].", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing indexes on frequently filtered columns with those on less frequently used columns.\"}"], ["train_workload_random_19_3q", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not used in join conditions or filtering predicates in the workload queries, as they may not contribute to query performance improvement and can lead to regression.\"}"], ["train_workload_random_19_3q", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are part of complex join conditions or subqueries unless they are frequently used as primary filters. Prioritize indexing columns that are directly involved in filtering large datasets or are part of the main query's WHERE clause.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid replacing composite indexes with single-column indexes unless the single column is independently significant in the workload.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure multi-column indexes are preserved when they involve columns frequently used together in WHERE clauses, especially when filtering large tables. Avoid replacing them with single-column indexes unless justified by query patterns.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price)]", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on join keys and frequently filtered columns are maintained. Avoid removing composite indexes that combine join keys with frequently filtered columns, as they can significantly improve query performance by reducing the need for full table scans.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes if composite indexes can provide better coverage for the workload.\"}"], ["train_workload_random_19_3q", "[date_dim(d_date), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), store(s_store_sk), web_returns(wr_order_number), web_site(web_site_sk), catalog_returns(cr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already covered by single-column indexes in the improvement selection, especially if the single-column indexes are on primary or foreign key columns used in joins or filters.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure that multi-column indexes are preserved when they cover multiple query predicates, especially when they involve filtering and joining on large tables. Avoid replacing them with single-column indexes that do not cover the same query patterns.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns that are used in equality joins with columns that already have indexes, unless the new index significantly improves query performance. Prioritize indexing columns involved in range queries or those frequently used in WHERE clauses without existing indexes.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price)]", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on join keys and frequently filtered columns are maintained, especially for large tables. Avoid removing composite indexes that combine join keys with frequently filtered columns, as they can significantly improve query performance by reducing the need for full table scans.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in the workload queries. Prioritize composite indexes over single-column indexes when the workload involves complex queries with multiple conditions on the same table.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns that are used in equality joins with columns that already have indexes, unless the column is frequently used in other queries without the indexed column. Prioritize indexing columns involved in range conditions or those that are frequently filtered in WHERE clauses.\"}"], ["train_workload_random_19_3q", "[date_dim(d_date), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), store(s_store_sk), web_returns(wr_order_number), web_site(web_site_sk), catalog_returns(cr_order_number)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions across multiple queries, such as date_dim(d_date), customer(c_customer_sk), and store(s_store_sk), to prevent regression.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding single-column indexes on columns that are already part of a multi-column index unless the single-column index is frequently used independently in queries. In this case, the regression index added a single-column index on 'item.i_item_sk' which is already part of a multi-column index 'item.i_item_sk, item.i_current_price' in the improvement index. This can lead to unnecessary index maintenance overhead without significant query performance benefits.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently queried together, especially when filtering and joining on multiple columns. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple conditions on the same table.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Prioritize composite indexes on columns frequently used together in join conditions and filters, especially when they involve large tables. Avoid single-column indexes on columns that are part of composite keys or are frequently joined with other columns.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), date_dim(d_dow)].", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns involved in join conditions or frequently filtered columns.\"}"], ["train_workload_random_19_3q", "[date_dim(d_date), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), store(s_store_sk), web_returns(wr_order_number), web_site(web_site_sk), catalog_returns(cr_order_number)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns involved in date range filters and join conditions across large tables, such as date_dim(d_date_sk) and customer(c_customer_sk), to prevent regressions.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding single-column indexes on columns that are already part of a multi-column index unless there is a specific query pattern that benefits from it. In this case, the regression index added a single-column index on 'item.i_item_sk' which is already part of a multi-column index 'item.i_item_sk, item.i_current_price' in the improvement index. This can lead to unnecessary index maintenance overhead without significant query performance benefits.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes if composite indexes can provide better coverage for the workload.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Prioritize composite indexes on columns frequently used together in join conditions and filters, especially when they involve large tables. Avoid single-column indexes on columns that are part of complex join conditions or filters, as they may not provide significant performance benefits.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns that are used in equality joins with large tables unless they are frequently filtered or aggregated. Prioritize indexes on columns involved in filtering conditions, especially when combined with aggregation, and ensure that multi-column indexes cover both filtering and join conditions when possible.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize composite indexes for columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes that do not align with query patterns.\"}"], ["train_workload_random_19_3q", " [customer(c_customer_sk), customer_address(ca_address_sk), date_dim(d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in query predicates. Instead, focus on single-column indexes for columns that are frequently used in WHERE clauses or JOIN conditions, especially those with high cardinality or those that are part of foreign key relationships.\"}"], ["train_workload_random_19_3q", " [promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), date_dim(d_dow)].", " [promotion(p_promo_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize indexing columns involved in joins and filters across multiple queries, especially for large tables. Avoid removing indexes that are used in multiple queries or are critical for join operations.\"}"], ["train_workload_random_19_3q", "[date_dim(d_date), promotion(p_promo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), store(s_store_sk), web_returns(wr_order_number), web_site(web_site_sk), catalog_returns(cr_order_number)]", " [customer(c_customer_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and filter conditions, especially for tables with high row counts. Prioritize indexes on date columns used in range filters and columns frequently used in WHERE clauses across multiple queries.\"}"], ["train_workload_random_19_3q", " [date_dim(d_date), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, or as GROUP BY keys to improve query performance.\"}"], ["train_workload_random_19_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently queried together, especially when filtering and joining on multiple columns. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple conditions on those columns.\"}"]], "train_workload_random_21_9q": [["train_workload_random_21_9q", "[date_dim(d_date_sk, d_week_seq), promotion(p_promo_sk), store(s_store_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk, cd_marital_status), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number), household_demographics(hd_buy_potential), customer(c_customer_sk), web_sales(ws_order_number), item(i_item_id)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes that only cover a single column when multiple columns are frequently used together in queries. Prioritize composite indexes that align with the query patterns, especially for large tables and frequently joined columns.\"}"], ["train_workload_random_21_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [item(i_current_price)].", "{rule: \"Avoid single-column indexes on columns with high cardinality and large tables when multi-column indexes can better support complex join conditions and filtering criteria in the workload.\"}"], ["train_workload_random_21_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter columns in the workload queries, especially for large tables. Missing indexes on frequently joined or filtered columns can lead to regressions.\"}"], ["train_workload_random_21_9q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date, d_date_sk), Store(s_store_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Customer_demographics(cd_demo_sk), Web_returns(wr_order_number)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "{rule: \"Ensure that all foreign key relationships used in join conditions are indexed, especially for large tables. Avoid omitting indexes on columns frequently used in WHERE clauses or join conditions, such as 'i_item_sk', 'cs_order_number', and 'cr_item_sk', which are present in the improvement index but missing in the regression index.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), catalog_returns(cr_order_number), store_returns(sr_ticket_number), web_returns(wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes on frequently joined or filtered columns (e.g., item_sk, date_sk) are more effective for the workload.\"}"], ["train_workload_random_21_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [item(i_current_price)].", "{rule: \"Avoid single-column indexes on columns with high cardinality and large tables, especially when multi-column indexes on related columns are more beneficial for the workload.\"}"], ["train_workload_random_21_9q", "[date_dim(d_date_sk, d_week_seq), promotion(p_promo_sk), store(s_store_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk, cd_marital_status), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number), household_demographics(hd_buy_potential), customer(c_customer_sk), web_sales(ws_order_number), item(i_item_id)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient and more efficient for the workload. Prioritize single-column indexes on frequently joined or filtered columns across large tables.\"}"], ["train_workload_random_21_9q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date, d_date_sk), Store(s_store_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Customer_demographics(cd_demo_sk), Web_returns(wr_order_number)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Specifically, include indexes on columns involved in multi-table joins and those frequently used in WHERE clauses. Avoid omitting indexes on columns that are part of critical join conditions or filter predicates, as seen in the regression index selection where key columns like 'i_item_sk' and 'd_date' are missing.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), store_returns(sr_item_sk), web_returns(wr_item_sk), customer_address(ca_address_sk), customer(c_customer_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses, GROUP BY, ORDER BY, or are part of aggregate functions to improve query performance.\"}"], ["train_workload_random_21_9q", " [Date_dim(d_date_sk), Catalog_sales(cs_sold_date_sk), Store_returns(sr_item_sk)]", " [item(i_current_price)].", "{rule: \"Avoid selecting indexes on columns with high cardinality and low selectivity, such as 'i_current_price', unless they are frequently used in WHERE clauses with range conditions or are part of a composite index that improves query performance.\"}"], ["train_workload_random_21_9q", "[customer_demographics(cd_marital_status), customer_address(ca_address_sk), date_dim(d_date_sk, d_date, d_week_seq), store(s_store_sk), customer(c_customer_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), promotion(p_promo_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state), item(i_item_id)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, as this can lead to redundancy and potential performance regression.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), catalog_returns(cr_order_number), store_returns(sr_ticket_number), web_returns(wr_order_number)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOINs, WHERE clauses, and have high cardinality to improve query performance.\"}"], ["train_workload_random_21_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially date columns like date_dim.d_date_sk, to prevent regression in query performance.\"}"], ["train_workload_random_21_9q", "[customer_demographics(cd_marital_status), customer_address(ca_address_sk), date_dim(d_date_sk, d_date, d_week_seq), store(s_store_sk), customer(c_customer_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), promotion(p_promo_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state), item(i_item_id)]", " [item(i_current_price)].", "{rule: \"Avoid selecting indexes on columns with high cardinality and low filtering potential, especially when they are not part of join conditions or where clauses in the workload queries.\"}"], ["train_workload_random_21_9q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date, d_date_sk), Store(s_store_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Customer_demographics(cd_demo_sk), Web_returns(wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexes on columns that are involved in JOINs, WHERE conditions, and have high cardinality to improve query performance.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), store_returns(sr_item_sk), web_returns(wr_item_sk), customer_address(ca_address_sk), customer(c_customer_sk)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries. Instead, prioritize indexing columns that are used in WHERE clauses with high cardinality and columns that are frequently involved in aggregations or sorting operations.\"}"], ["train_workload_random_21_9q", "[date_dim(d_date_sk, d_week_seq), promotion(p_promo_sk), store(s_store_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk, cd_marital_status), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number), household_demographics(hd_buy_potential), customer(c_customer_sk), web_sales(ws_order_number), item(i_item_id)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns involved in join conditions or filters. Prioritize single-column indexes on foreign key columns and columns frequently used in WHERE clauses.\"}"], ["train_workload_random_21_9q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date, d_date_sk), Store(s_store_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Customer_demographics(cd_demo_sk), Web_returns(wr_order_number)]", " [item(i_current_price)].", "{rule: \"Avoid single-column indexes on columns with high cardinality and large data types, especially when multi-column indexes on related columns are more beneficial for the workload.\"}"], ["train_workload_random_21_9q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date, d_date_sk), Store(s_store_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Customer_demographics(cd_demo_sk), Web_returns(wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries. Instead, prefer single-column indexes on such columns to improve join performance and reduce regression risk.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), catalog_returns(cr_order_number), store_returns(sr_ticket_number), web_returns(wr_order_number)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOINs, WHERE clauses, and have high cardinality to improve query performance.\"}"], ["train_workload_random_21_9q", "[promotion(p_promo_sk), store(s_store_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_sk), web_site(web_site_sk), item(i_item_id), item(i_current_price), customer_address(ca_address_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), date_dim(d_dom), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_demo_sk), store_returns(sr_ticket_number), customer_demographics(cd_marital_status), store_returns(sr_item_sk), web_sales(ws_order_number), web_returns(wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Ensure that indexes cover all join and filter conditions in the workload. Avoid using composite indexes that do not align with query patterns, and ensure that indexes are not overly broad or narrow, missing critical columns used in joins or filters.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), catalog_returns(cr_order_number), store_returns(sr_ticket_number), web_returns(wr_order_number)]", " [item(i_current_price)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'i_current_price', unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are used in JOINs, WHERE clauses, and have high selectivity, like primary keys or foreign keys.\"}"], ["train_workload_random_21_9q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date, d_date_sk), Store(s_store_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Customer_demographics(cd_demo_sk), Web_returns(wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes with prefix 'I(C ' as they indicate potential redundancy or misalignment with the workload's join and filter conditions. Instead, focus on indexes that directly support the workload's join keys and filter conditions, as seen in the improvement index selection.\"}"], ["train_workload_random_21_9q", " [promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), date_dim(d_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_sales(ws_sold_date_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "{rule: \"Ensure that all necessary foreign key columns used in join conditions across multiple queries are indexed. Avoid omitting indexes on frequently joined tables and columns, especially those with high cardinality or used in WHERE clauses, such as item(i_item_sk), web_sales(ws_order_number), and catalog_sales(cs_sold_date_sk).\"}"], ["train_workload_random_21_9q", " [Date_dim(d_date_sk), Catalog_sales(cs_sold_date_sk), Store_returns(sr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating composite indexes on columns that are not frequently used together in join or filter conditions across multiple queries. Instead, focus on indexing individual columns that are consistently used in join conditions or as filters in the workload.\"}"], ["train_workload_random_21_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [item(i_current_price)].", "{rule: \"Avoid single-column indexes on columns with high cardinality and large tables, especially when multi-column indexes on foreign key relationships are more beneficial for the workload.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), store_returns(sr_item_sk), web_returns(wr_item_sk), customer_address(ca_address_sk), customer(c_customer_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these are likely to be covered by existing indexes. Instead, focus on indexing columns that are used in WHERE clauses, GROUP BY, or ORDER BY operations, especially if they are not part of existing indexes.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), store_returns(sr_item_sk), web_returns(wr_item_sk), customer_address(ca_address_sk), customer(c_customer_sk)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "{rule: \"Avoid creating indexes on columns with low selectivity or high cardinality when they are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in filtering conditions and have higher selectivity to improve query performance.\"}"], ["train_workload_random_21_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns used in join conditions across multiple queries, especially those involving date dimensions, to prevent regression. Specifically, maintain indexes on date columns like date_dim.d_date_sk when they are frequently used in join conditions.\"}"], ["train_workload_random_21_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [item(i_current_price)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'i_current_price', unless they are frequently used in range queries or as part of a composite index with more selective columns.\"}"], ["train_workload_random_21_9q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date, d_date_sk, d_year), Store(s_store_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in join or filter conditions across multiple queries. Instead, focus on creating single-column indexes on columns that are frequently used in join conditions or as foreign keys, as seen in the improvement index selection.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), catalog_returns(cr_order_number), store_returns(sr_ticket_number), web_returns(wr_order_number)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple tables, as they may lead to regression in query performance. Instead, prioritize indexing columns that are used in filtering conditions and have high cardinality, especially if they are involved in aggregation or sorting operations.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), catalog_returns(cr_order_number), store_returns(sr_ticket_number), web_returns(wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used individually in join conditions or filters across multiple queries. Instead, create individual indexes on these columns to improve query performance and prevent regression.\"}"], ["train_workload_random_21_9q", " [Date_dim(d_date_sk), Catalog_sales(cs_sold_date_sk), Store_returns(sr_item_sk)]", " [item(i_current_price)].", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent updates, especially if they are not used in WHERE clauses or JOIN conditions in the workload. Instead, focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and have lower cardinality.\"}"], ["train_workload_random_21_9q", " [promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), date_dim(d_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_sales(ws_sold_date_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for large tables. Avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_21_9q", "[date_dim(d_date_sk, d_week_seq), promotion(p_promo_sk), store(s_store_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk, cd_marital_status), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number), household_demographics(hd_buy_potential), customer(c_customer_sk), web_sales(ws_order_number), item(i_item_id)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid omitting indexes on columns involved in multiple queries or complex conditions.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), catalog_returns(cr_order_number), store_returns(sr_ticket_number), web_returns(wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Prioritize single-column indexes on frequently joined or filtered columns across multiple queries.\"}"], ["train_workload_random_21_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [item(i_current_price)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'i_current_price', unless they are frequently used in range queries or as part of a composite index with other more selective columns.\"}"], ["train_workload_random_21_9q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date, d_date_sk), Store(s_store_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Customer_demographics(cd_demo_sk), Web_returns(wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries. Instead, use single-column indexes on these columns to improve join performance and reduce regression risk.\"}"], ["train_workload_random_21_9q", "[customer_demographics(cd_marital_status), customer_address(ca_address_sk), date_dim(d_date_sk, d_date, d_week_seq), store(s_store_sk), customer(c_customer_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), promotion(p_promo_sk), item(i_item_sk), web_returns(wr_order_number), customer_address(ca_state), item(i_item_id)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for columns involved in multiple queries or with high cardinality. Prioritize indexes on columns used in WHERE clauses and JOIN conditions across different tables, and consider composite indexes for columns frequently used together.\"}"], ["train_workload_random_21_9q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date, d_date_sk), Store(s_store_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Customer_demographics(cd_demo_sk), Web_returns(wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes with prefix 'I(C ' on columns that are already indexed in the improvement selection, as it may lead to redundancy and potential regression in query performance.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), catalog_returns(cr_order_number), store_returns(sr_ticket_number), web_returns(wr_order_number)]", " [item(i_current_price)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'i_current_price', unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on columns that are frequently filtered or joined, like primary keys or foreign keys, as seen in the improvement index selection.\"}"], ["train_workload_random_21_9q", " [Date_dim(d_date_sk), Catalog_sales(cs_sold_date_sk), Store_returns(sr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be already optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of aggregation functions to improve query performance.\"}"], ["train_workload_random_21_9q", " [Date_dim(d_date_sk), Catalog_sales(cs_sold_date_sk), Store_returns(sr_item_sk)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries, as they may lead to regression in query performance. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, especially in large tables.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), store_returns(sr_item_sk), web_returns(wr_item_sk), customer_address(ca_address_sk), customer(c_customer_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries. Instead, prioritize single-column indexes on these columns to improve join performance and reduce regression risk.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), catalog_returns(cr_order_number), store_returns(sr_ticket_number), web_returns(wr_order_number)]", " [item(i_current_price)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'i_current_price', unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on columns that are frequently filtered or joined, like primary keys or foreign keys, as seen in the improvement index selection.\"}"], ["train_workload_random_21_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses for filtering by date ranges are indexed, especially if they are used in multiple queries across different tables.\"}"], ["train_workload_random_21_9q", "[promotion(p_promo_sk), store(s_store_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_sk), web_site(web_site_sk), item(i_item_id), item(i_current_price), customer_address(ca_address_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), date_dim(d_dom), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_demo_sk), store_returns(sr_ticket_number), customer_demographics(cd_marital_status), store_returns(sr_item_sk), web_sales(ws_order_number), web_returns(wr_order_number)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and consider multi-column indexes for composite conditions. Avoid omitting indexes on columns with high cardinality or those involved in range queries.\"}"], ["train_workload_random_21_9q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date, d_date_sk, d_year), Store(s_store_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already part of foreign key relationships or are frequently used in joins, as they may lead to regression by overshadowing more beneficial single-column indexes on those columns.\"}"], ["train_workload_random_21_9q", "[promotion(p_promo_sk), store(s_store_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_sk), web_site(web_site_sk), item(i_item_id), item(i_current_price), customer_address(ca_address_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), date_dim(d_dom), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_demo_sk), store_returns(sr_ticket_number), customer_demographics(cd_marital_status), store_returns(sr_item_sk), web_sales(ws_order_number), web_returns(wr_order_number)]", " [item(i_current_price)].", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables and frequently queried columns. Avoid removing indexes that are used in multiple queries or are part of complex join conditions.\"}"], ["train_workload_random_21_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter columns in the workload queries, especially for large tables. Missing indexes on frequently joined or filtered columns can lead to regressions.\"}"], ["train_workload_random_21_9q", "[date_dim(d_date_sk, d_week_seq), promotion(p_promo_sk), store(s_store_sk), web_returns(wr_order_number), customer_demographics(cd_demo_sk, cd_marital_status), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number), household_demographics(hd_buy_potential), customer(c_customer_sk), web_sales(ws_order_number), item(i_item_id)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns involved in date range filters, such as d_date_sk, and ensure coverage for all tables involved in joins, such as item(i_item_sk) and web_sales(ws_order_number).\"}"], ["train_workload_random_21_9q", " [promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), date_dim(d_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_sales(ws_sold_date_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), store_returns(sr_item_sk), web_returns(wr_item_sk), customer_address(ca_address_sk), customer(c_customer_sk)]", " [item(i_current_price)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as numeric columns representing prices, unless they are frequently used in WHERE clauses with range conditions. Instead, prioritize indexing columns that are frequently used in JOIN conditions or WHERE clauses with equality conditions, especially if they are foreign keys or have low cardinality.\"}"], ["train_workload_random_21_9q", " [promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), date_dim(d_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_order_number), web_sales(ws_sold_date_sk), web_returns(wr_order_number), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_21_9q", "[promotion(p_promo_sk), store(s_store_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_sk), web_site(web_site_sk), item(i_item_id), item(i_current_price), customer_address(ca_address_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), date_dim(d_dom), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_demo_sk), store_returns(sr_ticket_number), customer_demographics(cd_marital_status), store_returns(sr_item_sk), web_sales(ws_order_number), web_returns(wr_order_number)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in queries, especially for large tables. Prioritize indexing columns involved in WHERE clauses and JOIN conditions across multiple queries. Avoid omitting indexes on columns frequently used in filtering or joining, such as date keys and item keys, which are critical for performance in large datasets.\"}"], ["train_workload_random_21_9q", "[promotion(p_promo_sk), store(s_store_sk), date_dim(d_date), date_dim(d_date_sk), item(i_item_sk), web_site(web_site_sk), item(i_item_id), item(i_current_price), customer_address(ca_address_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), date_dim(d_dom), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_demo_sk), store_returns(sr_ticket_number), customer_demographics(cd_marital_status), store_returns(sr_item_sk), web_sales(ws_order_number), web_returns(wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Prioritize single-column indexes on frequently joined or filtered columns across large tables.\"}"], ["train_workload_random_21_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [item(i_current_price)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'i_current_price', unless they are frequently used in range queries or as part of a composite index with other more selective columns.\"}"], ["train_workload_random_21_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns used in join conditions across multiple queries, especially on date columns like date_dim.d_date_sk, to prevent regression in query performance.\"}"], ["train_workload_random_21_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize indexing columns frequently used in WHERE clauses and JOIN conditions, such as foreign keys and date columns, to optimize query performance. Avoid redundant indexes on columns with low cardinality or those not involved in critical query paths.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), store_returns(sr_item_sk), web_returns(wr_item_sk), customer_address(ca_address_sk), customer(c_customer_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes solely on columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in multiple queries across the workload, especially those involved in JOINs and WHERE clauses.\"}"], ["train_workload_random_21_9q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date, d_date_sk), Store(s_store_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Customer_demographics(cd_demo_sk), Web_returns(wr_order_number)]", " [item(i_current_price)].", "{rule: \"Avoid single-column indexes on columns with high cardinality and large data types when multi-column indexes on foreign key relationships are more beneficial for join operations.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), store_returns(sr_item_sk), web_returns(wr_item_sk), customer_address(ca_address_sk), customer(c_customer_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or those involved in filtering large datasets.\"}"], ["train_workload_random_21_9q", " [Date_dim(d_date_sk), Catalog_sales(cs_sold_date_sk), Store_returns(sr_item_sk)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "```json\n{\n  \"rule\": \"Avoid creating composite indexes on columns that are frequently used in join conditions across multiple queries, as this can lead to regression by increasing index maintenance overhead and reducing query performance. Instead, focus on single-column indexes for join keys and ensure that indexes align with the most selective predicates in the workload.\"\n}\n```"], ["train_workload_random_21_9q", " [Date_dim(d_date_sk), Catalog_sales(cs_sold_date_sk), Store_returns(sr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries, as they may lead to regression in query performance. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality.\"}"], ["train_workload_random_21_9q", " [item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), store_returns(sr_item_sk), web_returns(wr_item_sk), customer_address(ca_address_sk), customer(c_customer_sk)]", " [item(i_current_price)].", "{\"rule\": \"Avoid selecting indexes on columns with high cardinality and low selectivity, such as 'i_current_price', when there are more beneficial indexes available on columns frequently used in joins or filters, like 'i_item_id' or 'd_date_sk'. Prioritize indexes that align with the workload's join and filter conditions to prevent performance regressions.\"}"], ["train_workload_random_21_9q", " [Date_dim(d_date_sk), Catalog_sales(cs_sold_date_sk), Store_returns(sr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in join conditions or where clauses in the workload. Focus on indexing columns that are part of join conditions or frequently filtered in where clauses, especially those with high cardinality.\"}"], ["train_workload_random_21_9q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date, d_date_sk), Store(s_store_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Customer_demographics(cd_demo_sk), Web_returns(wr_order_number)]", " [Promotion(p_promo_sk), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_demographics(cd_demo_sk), Customer(c_customer_sk), Warehouse(w_warehouse_sk)].", "{rule: \"Ensure that all foreign key relationships used in join conditions are indexed, especially for large tables. Avoid removing indexes on columns frequently used in join conditions or where clauses, as this can lead to performance regressions.\"}"]], "train_workload_random_23_4q": [["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together. Additionally, maintain indexes on columns that are used in WHERE clauses with high selectivity, such as date columns and unique identifiers.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure that composite indexes in the regression selection cover all join and filter conditions present in the workload queries, similar to the improvement selection. Specifically, include indexes on columns frequently used together in joins and filters, such as (sr_item_sk, sr_ticket_number) for store_returns, and consider adding missing indexes like (cs_sold_date_sk) for catalog_sales and (cd_demo_sk, cd_marital_status) for customer_demographics.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple joins and filters.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Avoid indexes that only cover join conditions without considering filter conditions, especially for large tables.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOINs across multiple queries. Avoid omitting columns that are part of multi-column conditions in the workload.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure indexes cover join and filter conditions across large tables, especially when multiple tables are involved in the query. Prioritize indexing columns used in join conditions and those frequently filtered, particularly in tables with high row counts.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Ensure indexes on columns involved in join conditions and where clauses, especially for large tables. Avoid removing indexes that are used in multiple queries across the workload, such as those on date columns and foreign keys.\"}"], ["train_workload_random_23_4q", " [catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)].", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in other tables. Focus on indexing columns that are used in WHERE clauses with high selectivity and columns involved in ORDER BY clauses to improve query performance.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Avoid indexes that only cover join conditions without considering filter conditions, especially for large tables.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid missing indexes on columns involved in multiple queries, such as 'order_number' and 'item_sk' in returns tables.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure that composite indexes in the regression selection cover all join and filter conditions present in the workload queries, especially for large tables. Avoid removing indexes that cover multiple columns used together in joins or filters, as seen with the missing composite index on store_returns(sr_item_sk, sr_ticket_number) and customer_demographics(cd_demo_sk, cd_marital_status).\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together, as this can lead to performance regressions.\"}"], ["train_workload_random_23_4q", " [customer_demographics(cd_marital_status), date_dim(d_date_sk, d_date), store_returns(sr_item_sk), item(i_category), household_demographics(hd_buy_potential), promotion(p_promo_sk), store(s_store_sk)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid redundant indexes on columns that are already covered by existing indexes or are less frequently used in critical operations.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure that composite indexes in the regression selection cover all join and filter conditions present in the workload queries, especially for large tables. Avoid removing indexes that are used in join conditions or frequently filtered columns, as seen with the missing composite index on store_returns(sr_item_sk, sr_ticket_number) and the lack of coverage for catalog_sales(cs_sold_date_sk) and customer_demographics(cd_marital_status).\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Ensure indexes on columns involved in join conditions and frequently used in WHERE clauses, especially for large tables. Avoid removing indexes that optimize join operations and filter conditions on large datasets.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Avoid removing composite indexes that cover multiple columns involved in join conditions or filters, especially when they are frequently used together in the workload. Instead, consider adding or maintaining composite indexes that align with the join and filter patterns in the queries.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize composite indexes that include multiple columns used together in joins or filters, especially for large tables. Avoid single-column indexes that do not align with query patterns.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure composite indexes cover all columns involved in join conditions and filters, especially for large tables. Avoid single-column indexes when multi-column conditions are present in the workload.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_23_4q", " [customer_demographics(cd_marital_status), date_dim(d_date_sk, d_date), store_returns(sr_item_sk), item(i_category), household_demographics(hd_buy_potential), promotion(p_promo_sk), store(s_store_sk)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Ensure indexes cover columns used in join conditions and filters across multiple queries, especially for large tables. Prioritize indexes on columns that are frequently used in WHERE clauses and JOIN conditions, and consider composite indexes for columns that are often queried together.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently used in the workload. Consider the cardinality and selectivity of columns when choosing indexes, and maintain indexes on primary keys and foreign keys that are involved in joins.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid omitting columns that are frequently used together in queries, such as those in join conditions or WHERE clauses.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Ensure indexes on columns involved in join conditions and where clauses, especially for large tables. Prioritize composite indexes for columns frequently used together in join conditions and filters.\"}"], ["train_workload_random_23_4q", " [customer_demographics(cd_marital_status), date_dim(d_date_sk, d_date), store_returns(sr_item_sk), item(i_category), household_demographics(hd_buy_potential), promotion(p_promo_sk), store(s_store_sk)]", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index unless the additional columns are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially if they filter large datasets. Consider the selectivity of the columns and the size of the tables when choosing indexes.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily used in join conditions across multiple queries, especially if they are part of large tables. Instead, focus on indexing columns that are frequently filtered or aggregated, and ensure that indexes are created on columns that are used in WHERE clauses with high selectivity.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that all join keys and frequently filtered columns in the workload are indexed. Avoid removing indexes on columns that are used in join conditions or where clauses, especially if they are part of composite keys or frequently queried tables.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid removing indexes that cover multiple columns used together in queries, as this can lead to regressions in query performance.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Ensure composite indexes are used for columns frequently queried together, especially when filtering and joining, to prevent regression. For example, use composite indexes like (cd_demo_sk, cd_marital_status) instead of individual indexes on cd_marital_status.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins and filters are maintained, especially for large tables. Avoid creating composite indexes that do not align with the query's join and filter conditions, as they may lead to regressions by not supporting the specific access patterns required by the workload.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes for columns frequently used together in join conditions and filters, such as (item_sk, order_number) for returns and sales tables, and (sold_date_sk) for date filtering across sales tables.\"}"], ["train_workload_random_23_4q", " [customer_demographics(cd_marital_status), date_dim(d_date_sk, d_date), store_returns(sr_item_sk), item(i_category), household_demographics(hd_buy_potential), promotion(p_promo_sk), store(s_store_sk)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid indexing columns that are only used in specific queries or are part of smaller tables unless they are critical for performance.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure that composite indexes in the regression selection cover all join and filter conditions present in the workload queries, especially for large tables. Avoid removing indexes that are used in join conditions or frequently filtered columns, such as those involving date or item keys.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Ensure indexes on columns involved in join conditions and where clauses, especially for large tables. Avoid removing indexes on columns frequently used in join conditions across multiple queries, such as 'cs_sold_date_sk', 'cr_order_number', and 'ca_address_sk'. Prioritize indexing columns that are part of join conditions and filtering criteria in complex queries to prevent regression.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together, as this can lead to performance regressions.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes for columns frequently used together in joins and filters, such as date_dim(d_date_sk) and item(i_item_sk). Avoid missing indexes on columns used in WHERE clauses, such as customer_demographics(cd_marital_status) and catalog_sales(cs_sold_date_sk).\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns frequently used in WHERE clauses and JOIN operations, especially for large tables. Avoid indexes that do not align with query patterns or that are redundant with existing indexes.\"}"], ["train_workload_random_23_4q", " [customer_demographics(cd_marital_status), date_dim(d_date_sk, d_date), store_returns(sr_item_sk), item(i_category), household_demographics(hd_buy_potential), promotion(p_promo_sk), store(s_store_sk)]", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses with high cardinality, such as date columns or categorical columns with many distinct values.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid missing indexes on columns used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index unless the composite index is not used in the workload. Prioritize indexing columns that are frequently used in join conditions and where clauses, especially if they are involved in multiple queries across the workload.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing composite indexes with single-column indexes if the composite index covers multiple frequently queried columns.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize composite indexes that include columns used in WHERE clauses and JOIN conditions, especially for large tables. Avoid single-column indexes that do not align with the workload's query patterns.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid missing indexes on columns involved in multiple queries, such as 'cs_item_sk' and 'd_date_sk', which are crucial for performance in both join and filter operations.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure that composite indexes in regression do not omit critical single-column indexes from improvement, especially on frequently joined or filtered columns like 'item_sk' and 'order_number'.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple join conditions and filters.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in WHERE clauses or JOIN conditions, as they may lead to regression by increasing index maintenance overhead and reducing query performance. Instead, prefer single-column indexes for such cases.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Ensure that all foreign key columns used in join conditions and filtering are indexed. Avoid removing indexes on columns that are frequently used in join conditions or where clauses, especially if they are part of a composite key or have high cardinality.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize composite indexes that include columns used in WHERE clauses and JOIN conditions, especially for tables with high row counts. Avoid regression by maintaining indexes on columns frequently used together in queries, such as date and item identifiers, and ensure indexes are aligned with the workload's filtering and grouping needs.\"}"], ["train_workload_random_23_4q", " [catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)].", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'cd_marital_status', and ensure indexes align with join and filter conditions in the workload, such as 'cs_sold_date_sk' and 'ss_sold_date_sk' for date filtering and 'cs_item_sk' for join operations.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Avoid indexing columns with high cardinality and low selectivity unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOIN conditions and have high cardinality, as they can significantly improve query performance. Additionally, consider the workload and ensure that indexes align with the most common query patterns to prevent regressions.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes for columns frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses. Ensure indexes align with query patterns, especially for columns involved in equality conditions and high cardinality columns.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together, as this can lead to performance regressions.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid redundant indexes that do not align with query patterns.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Avoid single-column indexes when multi-column indexes can better optimize the workload.\"}"], ["train_workload_random_23_4q", " [customer_demographics(cd_marital_status), date_dim(d_date_sk, d_date), store_returns(sr_item_sk), item(i_category), household_demographics(hd_buy_potential), promotion(p_promo_sk), store(s_store_sk)]", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for high cardinality columns and ensure that composite indexes are aligned with query patterns, especially for columns used in filtering and joining.\"}"], ["train_workload_random_23_4q", " [catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)].", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when these columns are part of large tables with high row counts. Instead, prioritize indexing columns that are used in WHERE clauses and have high selectivity, particularly in tables with large row counts.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that all join keys and frequently filtered columns in the workload are indexed. Avoid removing indexes on columns that are used in join conditions or where clauses, especially if they are part of composite keys or frequently queried columns. Maintain indexes on primary keys and foreign keys that are involved in joins across large tables.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Ensure composite indexes are used for columns frequently queried together, especially when filtering and joining, to prevent regression. For example, use composite indexes like (cd_demo_sk, cd_marital_status) instead of individual indexes on cd_marital_status.\"}"], ["train_workload_random_23_4q", " [catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)].", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used as join keys across multiple queries, especially when the columns are part of large tables. Instead, focus on single-column indexes for join keys to improve query performance and reduce index maintenance overhead.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Prioritize composite indexes on columns involved in join conditions and filters, especially for large tables. Avoid single-column indexes on columns that are frequently used together in join conditions, as they may lead to regressions in query performance.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure indexes cover join and filter conditions. Avoid indexes that only cover filter conditions without considering join conditions, especially for large tables.\"}"], ["train_workload_random_23_4q", " [catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)].", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'item_sk' and 'order_number', when the workload involves frequent joins and filters on date columns. Instead, prioritize indexing on date columns used in WHERE clauses and JOIN conditions, as they are more likely to improve query performance by reducing the search space.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Ensure that all join and filter columns used in the workload queries are indexed. Specifically, include multi-column indexes for columns frequently used together in join conditions or where clauses, such as (cd_demo_sk, cd_marital_status) in customer_demographics, and ensure that indexes cover all major sales and returns tables like catalog_sales, store_sales, and web_sales with their respective date and item keys.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure that composite indexes in the regression selection cover all join and filter conditions present in the workload queries, similar to the improvement selection. Specifically, include indexes on columns frequently used together in joins and filters, such as (cs_item_sk, cs_order_number) for catalog_sales and (sr_item_sk, sr_ticket_number) for store_returns, and consider adding additional columns like cd_demo_sk to the customer_demographics index to match the improvement selection.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_23_4q", " [catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)].", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in WHERE clauses across multiple queries, especially those with high cardinality or those involved in range queries.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Ensure that all join keys and frequently filtered columns in the workload are indexed. Avoid removing indexes on columns that are used in join conditions or where clauses, especially if they are part of large tables or frequently queried tables.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[item(i_item_sk), date_dim(d_date_sk, d_week_seq, d_year), warehouse(w_warehouse_sk), web_site(web_site_sk), store_returns(sr_ticket_number), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently queried together.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", " [Catalog_sales(cs_item_sk), Customer_demographics(cd_marital_status), Store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure composite indexes cover all columns involved in join conditions and filters, especially for large tables. Avoid single-column indexes when multi-column indexes can optimize multiple query conditions simultaneously.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Customer_address(ca_address_sk), Item(i_item_id), Store_returns(sr_ticket_number), Web_returns(wr_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or high selectivity, such as 'cd_marital_status', as they may not significantly improve query performance and can lead to regression. Instead, focus on indexing columns that are frequently used in joins and have higher cardinality, like 'ca_address_sk', 'i_item_id', and 'sr_ticket_number'.\"}"], ["train_workload_random_23_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[date_dim(d_date_sk, d_week_seq, d_year), promotion(p_promo_sk), warehouse(w_warehouse_sk), store_returns(sr_ticket_number, sr_item_sk), item(i_item_id), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk, cd_marital_status), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially those with high cardinality or used in equality conditions.\"}"], ["train_workload_random_23_4q", " [catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)].", " [date_dim(d_date_sk), customer_address(ca_address_sk), web_returns(wr_item_sk), store_returns(sr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in WHERE clauses and are not already indexed, to improve query filtering and reduce unnecessary index maintenance overhead.\"}"]], "train_workload_random_34_7q": [["train_workload_random_34_7q", "[date_dim(d_date_sk), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), store_returns(sr_item_sk), web_returns(wr_order_number), web_sales(ws_item_sk), web_sales(ws_ship_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid using composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries, as they may lead to regressions by not fully optimizing the join operations. Instead, use single-column indexes on such columns to ensure efficient join performance.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure multi-column indexes are used for columns frequently involved in join conditions and filters across multiple queries, especially when they involve large tables. Avoid relying solely on single-column indexes for such scenarios.\"}"], ["train_workload_random_34_7q", "[store(s_store_sk), date_dim(d_date_sk, d_year), item(i_item_sk, i_manufact_id), promotion(p_promo_sk), customer_address(ca_address_sk), web_returns(wr_order_number)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover join and filter conditions for large tables, especially when multiple tables are involved in the query. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, particularly for tables with high row counts.\"}"], ["train_workload_random_34_7q", "[store(s_store_sk), date_dim(d_date_sk, d_year), item(i_item_sk, i_manufact_id), promotion(p_promo_sk), customer_address(ca_address_sk), web_returns(wr_order_number)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses with high cardinality, such as date columns, to prevent regression in query performance.\"}"], ["train_workload_random_34_7q", "[date_dim(d_date_sk), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), store_returns(sr_item_sk), web_returns(wr_order_number), web_sales(ws_item_sk), web_sales(ws_ship_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves multiple tables with join conditions on these columns. Instead, focus on indexing columns that are frequently used in WHERE clauses and join conditions across different queries.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover all columns involved in join conditions and filters, especially for large tables. Avoid regression by maintaining composite indexes that cover multiple columns used together in queries, particularly when they are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions in queries. Avoid removing indexes that are used in join conditions or frequently filtered columns, especially in large tables. Consider composite indexes for columns that are often queried together.\"}"], ["train_workload_random_34_7q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_sold_date_sk), web_sales(ws_order_number), catalog_sales(cs_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), web_returns(wr_order_number)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Avoid removing indexes on columns frequently used in joins or filters, such as date_dim(d_date_sk), store(s_store_sk), and web_sales(ws_sold_date_sk).\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that all join and filter columns used in the workload queries are indexed. Specifically, include indexes on columns that are used in WHERE clauses, JOIN conditions, and GROUP BY clauses. Avoid removing indexes on columns that are frequently used in these operations, such as date keys and order numbers, to prevent regression in query performance.\"}"], ["train_workload_random_34_7q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_sold_date_sk), web_sales(ws_order_number), catalog_sales(cs_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), web_returns(wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for tables with high row counts and frequent usage in joins or filters. Prioritize indexing columns involved in multiple queries and those with high cardinality.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters, especially for large tables. Prioritize multi-column indexes for columns frequently used together in queries, such as those in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in filtering conditions, especially those involved in JOINs and WHERE clauses, and ensure they have high cardinality to improve query performance.\"}"], ["train_workload_random_34_7q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_sold_date_sk), web_sales(ws_order_number), catalog_sales(cs_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{\"rule\": \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or involved in range queries. Ensure indexes align with the workload's filtering and joining patterns.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Specifically, multi-column indexes should be considered for columns frequently used together in joins or filters, such as date_dim.d_date_sk and customer_address.ca_address_sk, to prevent regression.\"}"], ["train_workload_random_34_7q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_sold_date_sk), web_sales(ws_order_number), catalog_sales(cs_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), web_returns(wr_order_number)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload. Prioritize indexing columns that are consistently used for filtering or joining, especially those involved in high cardinality operations or large tables.\"}"], ["train_workload_random_34_7q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_sold_date_sk), web_sales(ws_order_number), catalog_sales(cs_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), web_returns(wr_order_number)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid multi-column indexes on columns with high cardinality and low selectivity unless they are frequently used together in WHERE clauses. Prioritize single-column indexes on foreign keys and columns frequently used in JOIN conditions.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes for columns frequently used together in joins and filters, such as date keys and item keys, to prevent regression.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple queries, especially when dealing with large tables. Avoid relying solely on single-column indexes for such scenarios.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure that all foreign key columns used in joins and filters in the workload are indexed, especially those with high cardinality or used in large tables. Avoid removing indexes on columns that are frequently used in WHERE clauses or JOIN conditions, as this can lead to performance regressions.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered or joined on, especially those with high cardinality, to improve query performance.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables and frequently queried columns. Avoid removing composite indexes that optimize multiple conditions simultaneously.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes cover all frequently joined and filtered columns in the workload, especially those involved in large tables and complex queries. Avoid reducing indexes to only single columns when multi-column indexes are beneficial for query performance.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize composite indexes that include columns frequently used together in WHERE clauses and JOIN conditions. Avoid single-column indexes on large tables unless they are frequently used as primary filters.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially those with high cardinality or used in range queries.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{\"rule\": \"Ensure that indexes covering join and filter conditions across multiple tables in complex queries are not removed. Specifically, maintain indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date keys and order numbers, to prevent performance regressions.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover all columns involved in join conditions and filters, especially for large tables. Avoid regression by maintaining composite indexes that include multiple columns used together in queries, such as those in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure that all necessary columns used in join conditions and where clauses are indexed, especially those with high cardinality or frequently used in the workload. Avoid removing indexes on columns that are part of multi-column indexes in the improvement selection.\"}"], ["train_workload_random_34_7q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_sold_date_sk), web_sales(ws_order_number), catalog_sales(cs_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), web_returns(wr_order_number)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently queried together, especially if they belong to different tables or have different data types. Prioritize single-column indexes on columns that are frequently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_34_7q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_sold_date_sk), web_sales(ws_order_number), catalog_sales(cs_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid creating indexes on columns with low cardinality or those not directly involved in filtering or joining operations.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure multi-column indexes are considered for queries involving multiple conditions on the same table, especially when the workload involves complex joins and filters across large tables. Avoid regressing to single-column indexes when multi-column indexes have shown improvement in query performance.\"}"], ["train_workload_random_34_7q", "[date_dim(d_date_sk), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), store_returns(sr_item_sk), web_returns(wr_order_number), web_sales(ws_item_sk), web_sales(ws_ship_date_sk)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload. Specifically, prioritize indexes on columns frequently used in join conditions across large tables, such as 'date_dim(d_date_sk)' and 'store_returns(sr_item_sk)'. Avoid removing indexes that support multiple queries, especially those involving large tables or complex joins.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered or joined on, especially those with high cardinality, to improve query performance.\"}"], ["train_workload_random_34_7q", "[store(s_store_sk), date_dim(d_date_sk, d_year), item(i_item_sk, i_manufact_id), promotion(p_promo_sk), customer_address(ca_address_sk), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that already have an index, especially when the existing index is more comprehensive or covers additional columns that are frequently queried together. Prioritize composite indexes that align with the query patterns and join conditions in the workload.\"}"], ["train_workload_random_34_7q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_sold_date_sk), web_sales(ws_order_number), catalog_sales(cs_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), web_returns(wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables. Avoid regression by maintaining indexes on columns frequently used in joins and filters across multiple queries, such as item_sk, promo_sk, and order_number.\"}"], ["train_workload_random_34_7q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_sold_date_sk), web_sales(ws_order_number), catalog_sales(cs_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), web_returns(wr_order_number)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions in queries. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together. For example, maintain indexes on columns like 'ws_order_number' and 'cr_order_number' that are used in join conditions across sales and returns tables.\"}"], ["train_workload_random_34_7q", "[date_dim(d_date_sk), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), store_returns(sr_item_sk), web_returns(wr_order_number), web_sales(ws_item_sk), web_sales(ws_ship_date_sk)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and have high cardinality, especially in large tables.\"}"], ["train_workload_random_34_7q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_sold_date_sk), web_sales(ws_order_number), catalog_sales(cs_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for large tables. Prioritize indexes on foreign keys and columns frequently used in WHERE clauses. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_34_7q", "[date_dim(d_date_sk), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), store_returns(sr_item_sk), web_returns(wr_order_number), web_sales(ws_item_sk), web_sales(ws_ship_date_sk)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries, especially for large tables. Avoid removing indexes that are frequently used in join conditions across multiple queries.\"}"], ["train_workload_random_34_7q", "[date_dim(d_date_sk), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), store_returns(sr_item_sk), web_returns(wr_order_number), web_sales(ws_item_sk), web_sales(ws_ship_date_sk)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_34_7q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_sold_date_sk), web_sales(ws_order_number), catalog_sales(cs_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), web_returns(wr_order_number)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure that indexes cover both the join keys and the filtering conditions. Avoid removing indexes on frequently joined columns or columns used in WHERE clauses, especially those with high cardinality or used in range queries.\"}"], ["train_workload_random_34_7q", "[store(s_store_sk), date_dim(d_date_sk, d_year), item(i_item_sk, i_manufact_id), promotion(p_promo_sk), customer_address(ca_address_sk), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that already have indexes, especially if the existing indexes are more comprehensive or cover multiple columns. Prioritize indexes that align with the workload's join and filter conditions, focusing on columns frequently used in WHERE clauses and JOIN operations.\"}"], ["train_workload_random_34_7q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_sold_date_sk), web_sales(ws_order_number), catalog_sales(cs_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), web_returns(wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure that all tables involved in join operations have indexes on their respective foreign key columns to prevent regression. Specifically, maintain indexes on columns frequently used in WHERE clauses and JOIN conditions, such as item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), and sales order numbers (e.g., web_sales(ws_order_number), catalog_returns(cr_item_sk)).\"}"], ["train_workload_random_34_7q", "[date_dim(d_date_sk), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), store_returns(sr_item_sk), web_returns(wr_order_number), web_sales(ws_item_sk), web_sales(ws_ship_date_sk)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Specifically, prioritize indexes on columns frequently used in join conditions across multiple queries, such as date keys and item keys, to prevent regression.\"}"], ["train_workload_random_34_7q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_sold_date_sk), web_sales(ws_order_number), catalog_sales(cs_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), web_returns(wr_order_number)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid multi-column indexes on columns with high cardinality and frequent filtering conditions, especially when single-column indexes on these columns are already beneficial. Prioritize single-column indexes for columns frequently used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_34_7q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_sold_date_sk), web_sales(ws_order_number), catalog_sales(cs_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure multi-column indexes are used for queries involving multiple conditions on the same table, especially when filtering and joining on multiple columns. Avoid regressing to single-column indexes when queries benefit from compound indexes, as seen in the improvement index selection.\"}"], ["train_workload_random_34_7q", "[date_dim(d_date_sk), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), store_returns(sr_item_sk), web_returns(wr_order_number), web_sales(ws_item_sk), web_sales(ws_ship_date_sk)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Specifically, prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as date keys and item keys, to prevent regression.\"}"], ["train_workload_random_34_7q", "[date_dim(d_date_sk), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), store_returns(sr_item_sk), web_returns(wr_order_number), web_sales(ws_item_sk), web_sales(ws_ship_date_sk)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes on columns with low cardinality or that are frequently used in WHERE clauses with equality conditions, as they may not provide significant performance benefits and can lead to regression when simpler, more selective indexes are more effective.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables and frequently queried columns. Avoid removing composite indexes that optimize multiple conditions simultaneously.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes cover all frequently joined and filtered columns in the workload. Avoid reducing multi-column indexes to single-column indexes if the workload involves complex queries with multiple conditions on those columns.\"}"], ["train_workload_random_34_7q", "[store(s_store_sk), date_dim(d_date_sk, d_year), item(i_item_sk, i_manufact_id), promotion(p_promo_sk), customer_address(ca_address_sk), web_returns(wr_order_number)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover join and filter conditions for large tables, especially when multiple tables are involved in the query. Prioritize indexes on columns used in WHERE clauses and JOIN conditions for tables with high row counts.\"}"], ["train_workload_random_34_7q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_sold_date_sk), web_sales(ws_order_number), catalog_sales(cs_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), web_returns(wr_order_number)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Avoid removing indexes on columns frequently used in joins or filters, such as date_dim(d_date_sk), store(s_store_sk), and customer_address(ca_address_sk), which are present in the improvement index but missing in the regression index.\"}"], ["train_workload_random_34_7q", " [promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_sold_date_sk), web_sales(ws_order_number), catalog_sales(cs_sold_date_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient and more efficient for the workload. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_34_7q", "[date_dim(d_date_sk), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), store_returns(sr_item_sk), web_returns(wr_order_number), web_sales(ws_item_sk), web_sales(ws_ship_date_sk)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{\"rule\": \"Ensure that indexes cover all frequently joined and filtered columns in the workload. Avoid removing indexes on columns that are used in multiple queries for joins or filters, especially if they are part of large tables or frequently queried tables. In this case, ensure indexes on columns like 'ws_item_sk', 'ws_ship_date_sk', 'ca_address_sk', and 'd_week_seq' are maintained or added if they are used in multiple queries for joins or filters.\"}"], ["train_workload_random_34_7q", "[date_dim(d_date_sk), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), store_returns(sr_item_sk), web_returns(wr_order_number), web_sales(ws_item_sk), web_sales(ws_ship_date_sk)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_34_7q", "[store(s_store_sk), date_dim(d_date_sk, d_year), item(i_item_sk, i_manufact_id), promotion(p_promo_sk), customer_address(ca_address_sk), web_returns(wr_order_number)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized, especially for large tables, to prevent regression in query performance. Avoid creating indexes that do not align with the join and filter conditions of the workload queries.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that all foreign key columns used in joins and filters across multiple queries are indexed. Additionally, maintain composite indexes for columns frequently used together in WHERE clauses or JOIN conditions, especially when they involve large tables.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure multi-column indexes are used for columns frequently involved in join conditions and filters across multiple queries, especially when dealing with large tables. Avoid reducing indexes to single-column when they are part of complex query patterns involving multiple tables.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables. Avoid missing indexes on columns frequently used in WHERE clauses or JOIN conditions, such as date keys and item identifiers.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure that indexes cover the most frequently joined and filtered columns in the workload, especially those involved in WHERE clauses and JOIN conditions. Avoid creating indexes on columns with low cardinality or those not directly involved in query predicates. Prioritize composite indexes that match the query patterns, such as those involving date ranges or specific item identifiers, to prevent regression.\"}"], ["train_workload_random_34_7q", "[store(s_store_sk), date_dim(d_date_sk, d_year), item(i_item_sk, i_manufact_id), promotion(p_promo_sk), customer_address(ca_address_sk), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that already have an index, especially when the existing index is more comprehensive or covers additional columns that are frequently queried together.\"}"], ["train_workload_random_34_7q", "[date_dim(d_date_sk), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), store_returns(sr_item_sk), web_returns(wr_order_number), web_sales(ws_item_sk), web_sales(ws_ship_date_sk)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{\"rule\": \"Ensure that indexes cover all frequently joined and filtered columns in the workload. Avoid removing indexes on columns that are used in multiple queries for joins or filters, such as 'ws_item_sk' and 'ws_ship_date_sk' in 'web_sales', which are critical for performance in the given workload.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables. Prioritize composite indexes that include columns used together in WHERE clauses and JOIN conditions. Avoid regression by maintaining indexes on columns frequently used in filtering and joining, such as date keys and item identifiers.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially if they are involved in multiple queries across the workload.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables and frequently queried columns. Avoid removing composite indexes that optimize multiple conditions simultaneously.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [date_dim(d_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes cover all frequently joined and filtered columns in the workload, especially those used in WHERE clauses and JOIN conditions. Avoid reducing composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_34_7q", "[store(s_store_sk), date_dim(d_date_sk, d_year), item(i_item_sk, i_manufact_id), promotion(p_promo_sk), customer_address(ca_address_sk), web_returns(wr_order_number)]", "[web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover join and filter conditions for large tables, especially those involved in frequent joins and aggregations. Prioritize indexes on foreign keys and columns used in WHERE clauses for tables with high row counts.\"}"], ["train_workload_random_34_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [promotion(p_promo_sk), date_dim(d_year, d_moy), item(i_item_id, i_manufact_id), catalog_returns(cr_item_sk, cr_order_number), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure that indexes cover the most frequently joined and filtered columns across the workload, especially those involving large tables and date-related columns. Avoid removing indexes on columns that are frequently used in WHERE clauses or JOIN conditions, such as date keys and item identifiers, as these are critical for query performance.\"}"]], "train_workload_random_39_6q": [["train_workload_random_39_6q", " [item(i_item_sk), date_dim(d_year, d_date), customer_address(ca_address_sk)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered or joined, especially those with high cardinality, to improve query performance.\"}"], ["train_workload_random_39_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk), item(i_manufact_id)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions, especially if they are not part of the primary filtering criteria in the workload.\"}"], ["train_workload_random_39_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk), item(i_manufact_id)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on expressions or computed columns unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are directly involved in filtering, joining, or grouping operations.\"}"], ["train_workload_random_39_6q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_order_number,C web_sales.ws_item_sk)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Ensure composite indexes are maintained for queries involving joins and aggregations across multiple columns, especially when the workload includes complex queries with multiple conditions and groupings. Avoid reducing composite indexes to single-column indexes when the workload indicates frequent use of multiple columns together.\"}"], ["train_workload_random_39_6q", " [item(i_item_sk), date_dim(d_year, d_date), customer_address(ca_address_sk)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on expressions or computed columns unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are directly involved in filtering, joining, or sorting operations in the workload queries.\"}"], ["train_workload_random_39_6q", "[item(i_item_sk), date_dim(d_year, d_date), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), web_returns(wr_return_amt), date_dim(d_date_sk), catalog_returns(cr_item_sk)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are involved in filtering, joining, or sorting operations across multiple queries in the workload.\"}"], ["train_workload_random_39_6q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_order_number,C web_sales.ws_item_sk)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Ensure that composite indexes are not reduced to single-column indexes if the workload involves multiple join conditions or filtering on multiple columns, as this can lead to performance regressions.\"}"], ["train_workload_random_39_6q", " [customer_address(ca_address_sk), date_dim(d_date), item(i_item_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)].", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered, joined, or sorted, especially those with high cardinality.\"}"], ["train_workload_random_39_6q", " [item(i_item_sk), date_dim(d_year, d_date), customer_address(ca_address_sk)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered, joined, or sorted, especially those with high cardinality.\"}"], ["train_workload_random_39_6q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_order_number,C web_sales.ws_item_sk)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Ensure that composite indexes are not reduced to single-column indexes if the workload involves multiple conditions on the indexed columns, especially in join operations or where clauses. Retain composite indexes that cover multiple columns used together in queries to prevent regression.\"}"], ["train_workload_random_39_6q", "[item(i_item_sk), date_dim(d_year, d_date), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), web_returns(wr_return_amt), date_dim(d_date_sk), catalog_returns(cr_item_sk)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are involved in filtering, joining, or sorting operations, especially those with high cardinality or those that are part of composite keys.\"}"], ["train_workload_random_39_6q", " [customer_address(ca_address_sk), date_dim(d_date), item(i_item_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)].", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered or joined, especially those with high cardinality and those involved in range queries or aggregations.\"}"], ["train_workload_random_39_6q", " [item(i_item_sk), date_dim(d_year, d_date), customer_address(ca_address_sk)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered or joined, especially those with high cardinality, to improve query performance.\"}"], ["train_workload_random_39_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk), item(i_manufact_id)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on expressions or computed columns unless necessary, as they may not be utilized effectively by the query optimizer and can lead to performance regressions. Instead, focus on indexing columns that are frequently used in joins, filters, or group by clauses.\"}"], ["train_workload_random_39_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk), item(i_manufact_id)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are involved in filtering conditions, have high cardinality, and are frequently used in JOIN operations.\"}"], ["train_workload_random_39_6q", " [item(i_item_sk), date_dim(d_year, d_date), customer_address(ca_address_sk)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered or joined, especially those with high cardinality, to improve query performance.\"}"], ["train_workload_random_39_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk), item(i_manufact_id)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, especially those involved in JOIN operations across large tables.\"}"], ["train_workload_random_39_6q", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), item(i_manufact_id), customer_demographics(cd_demo_sk), customer(c_customer_sk), date_dim(d_dow)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions, especially if they are not part of the primary workload queries. Instead, focus on indexing columns that are frequently filtered or joined on, and have higher cardinality to improve query performance.\"}"], ["train_workload_random_39_6q", "[item(i_item_sk), date_dim(d_year, d_date), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), web_returns(wr_return_amt), date_dim(d_date_sk), catalog_returns(cr_item_sk)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or high frequency of duplicate values, especially if they are not part of a join or filter condition in the workload queries.\"}"], ["train_workload_random_39_6q", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), item(i_manufact_id), customer_demographics(cd_demo_sk), customer(c_customer_sk), date_dim(d_dow)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions, especially if they are not part of the primary workload queries. Instead, focus on indexing columns that are frequently filtered or joined on, as seen in the improvement index selection.\"}"], ["train_workload_random_39_6q", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), item(i_manufact_id), customer_demographics(cd_demo_sk), customer(c_customer_sk), date_dim(d_dow)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are involved in filtering, joining, or sorting operations in the workload queries.\"}"], ["train_workload_random_39_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk), item(i_manufact_id)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in join or filter conditions across multiple queries in the workload.\"}"], ["train_workload_random_39_6q", "[date_dim(d_date_sk), date_dim(d_date), customer_address(ca_address_sk), store_sales(ss_ticket_number), catalog_sales(cs_sold_date_sk), item(i_manufact_id), catalog_sales(cs_item_sk), inventory(inv_date_sk), date_dim(d_year), item(i_item_sk)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are involved in filtering, joining, or sorting operations in the workload queries.\"}"], ["train_workload_random_39_6q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_item_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_order_number,C web_sales.ws_item_sk)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Ensure composite indexes are maintained for join conditions involving multiple columns, especially when they are frequently used together in queries. Avoid reducing composite indexes to single-column indexes if the workload shows consistent use of multiple columns in join conditions.\"}"], ["train_workload_random_39_6q", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), item(i_manufact_id), customer_demographics(cd_demo_sk), customer(c_customer_sk), date_dim(d_dow)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions, especially if they are not part of the primary workload queries. Instead, focus on indexing columns that are frequently filtered or joined on, and have higher cardinality, as seen in the improvement index selection.\"}"], ["train_workload_random_39_6q", " [item(i_item_sk), date_dim(d_year, d_date), customer_address(ca_address_sk)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered, joined, or sorted, especially those with high cardinality.\"}"], ["train_workload_random_39_6q", " [customer_address(ca_address_sk), date_dim(d_date), item(i_item_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)].", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are involved in frequent filtering, joining, or sorting operations, especially those with high cardinality.\"}"], ["train_workload_random_39_6q", " [customer_address(ca_address_sk), date_dim(d_date), item(i_item_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)].", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on expressions or computed columns that are not frequently used in the workload. Instead, focus on indexing columns that are directly involved in joins, filters, or group by operations, as seen in the improvement index selection.\"}"], ["train_workload_random_39_6q", " [customer_address(ca_address_sk), date_dim(d_date), item(i_item_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)].", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered, joined, or aggregated in the workload queries.\"}"], ["train_workload_random_39_6q", " [customer_address(ca_address_sk), date_dim(d_date), item(i_item_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk)].", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are involved in frequent filtering, joining, or sorting operations, especially those with high cardinality.\"}"], ["train_workload_random_39_6q", "[date_dim(d_date_sk), date_dim(d_date), customer_address(ca_address_sk), store_sales(ss_ticket_number), catalog_sales(cs_sold_date_sk), item(i_manufact_id), catalog_sales(cs_item_sk), inventory(inv_date_sk), date_dim(d_year), item(i_item_sk)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are involved in filtering, joining, or sorting operations in the workload queries.\"}"], ["train_workload_random_39_6q", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), item(i_manufact_id), customer_demographics(cd_demo_sk), customer(c_customer_sk), date_dim(d_dow)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are involved in frequent filtering, joining, or sorting operations, especially those with high cardinality.\"}"], ["train_workload_random_39_6q", " [item(i_item_sk), date_dim(d_year, d_date), customer_address(ca_address_sk)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on expressions or computed columns unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are directly involved in filtering, joining, or sorting operations in the workload.\"}"], ["train_workload_random_39_6q", " [item(i_item_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), item(i_manufact_id), customer_demographics(cd_demo_sk), customer(c_customer_sk), date_dim(d_dow)]", "[I(C web_sales.ws_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions, especially if they are not part of the primary workload queries. Instead, focus on indexing columns that are frequently filtered or joined on, and have higher cardinality, as seen in the improvement index selection.\"}"]], "train_workload_random_45_9q": [["train_workload_random_45_9q", " [date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently joined with other tables, as this can lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in WHERE clauses, GROUP BY, or ORDER BY operations that are not already covered by existing indexes.\"}"], ["train_workload_random_45_9q", " [date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in join or filter conditions across multiple queries in the workload. Prioritize indexing columns that are consistently used in WHERE clauses or JOIN conditions, especially those that are part of large tables or have high cardinality, to improve query performance and prevent regression.\"}"], ["train_workload_random_45_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid single-column indexes when queries involve multiple columns in conditions, as composite indexes can better optimize such scenarios.\"}"], ["train_workload_random_45_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Ensure that all frequently joined columns and columns used in WHERE clauses across multiple queries are indexed. Avoid removing composite indexes that cover multiple columns used together in queries, especially if they are part of the improvement index set.\"}"], ["train_workload_random_45_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for columns frequently used in WHERE clauses and JOIN operations. Prioritize composite indexes for columns used together in multiple queries, and avoid single-column indexes that do not align with the workload's query patterns.\"}"], ["train_workload_random_45_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes on columns frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses are maintained. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve query performance by reducing the need for sorting and additional lookups.\"}"], ["train_workload_random_45_9q", " [date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Instead, focus on indexing columns that are used in filtering conditions and are not already indexed, to prevent redundancy and potential performance regression.\"}"], ["train_workload_random_45_9q", " [date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are used in isolated queries or less frequently, unless they are part of a critical performance bottleneck.\"}"], ["train_workload_random_45_9q", " [date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance. In this case, avoid indexing 'item(i_item_sk)' and 'store(s_store_id)' as they are not directly used in the workload's join or filtering conditions.\"}"], ["train_workload_random_45_9q", " [date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent updates, such as customer identifiers and order numbers, unless they are frequently used in WHERE clauses or JOIN conditions. Instead, prioritize indexing columns that are used in filtering conditions and have lower cardinality, such as date keys and foreign keys linking tables.\"}"], ["train_workload_random_45_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, such as date columns and foreign keys. Avoid removing indexes that are used in multiple queries, even if they seem redundant, as they can significantly improve query performance.\"}"], ["train_workload_random_45_9q", "[date_dim(d_date_sk, d_year), promotion(p_promo_sk), item(i_item_sk, i_category), web_site(web_site_sk), web_sales(ws_item_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store_sales(ss_customer_sk, ss_item_sk), store_returns(sr_item_sk), web_returns(wr_item_sk)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover join and filter columns used frequently across large tables, especially in complex queries involving multiple tables and subqueries. Prioritize indexes on columns that are used in WHERE clauses, JOIN conditions, and GROUP BY operations, particularly for tables with high row counts.\"}"], ["train_workload_random_45_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "{rule: \"Ensure that indexes cover both join and filter conditions in queries. Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid single-column indexes on columns that are not frequently filtered or joined on, as they may not provide significant performance benefits.\"}"], ["train_workload_random_45_9q", "[date_dim(d_date_sk, d_year), promotion(p_promo_sk), item(i_item_sk, i_category), web_site(web_site_sk), web_sales(ws_item_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store_sales(ss_customer_sk, ss_item_sk), store_returns(sr_item_sk), web_returns(wr_item_sk)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across large tables, especially for columns frequently used in WHERE clauses and JOIN operations. Prioritize indexes on columns involved in multi-table joins and those with high cardinality to optimize query performance.\"}"], ["train_workload_random_45_9q", "[date_dim(d_date_sk, d_year), promotion(p_promo_sk), item(i_item_sk, i_category), web_site(web_site_sk), web_sales(ws_item_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store_sales(ss_customer_sk, ss_item_sk), store_returns(sr_item_sk), web_returns(wr_item_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve query performance by reducing the need for sorting and filtering operations.\"}"], ["train_workload_random_45_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables. Prioritize indexes on columns with high cardinality and those involved in range queries or aggregations. Avoid removing indexes that optimize critical paths in the workload, such as date and item keys in sales tables.\"}"], ["train_workload_random_45_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "{rule: \"Ensure indexes cover columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid indexes on columns with low cardinality or infrequent usage in queries.\"}"], ["train_workload_random_45_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes cover all frequently joined and filtered columns across multiple tables, especially those involved in subqueries and complex conditions. Avoid removing composite indexes that optimize multi-column access patterns, such as those combining date and identifier columns, which are critical for performance in analytical queries.\"}"], ["train_workload_random_45_9q", " [date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and are not part of existing indexes in other tables.\"}"], ["train_workload_random_45_9q", "[date_dim(d_date_sk, d_year), promotion(p_promo_sk), item(i_item_sk, i_category), web_site(web_site_sk), web_sales(ws_item_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store_sales(ss_customer_sk, ss_item_sk), store_returns(sr_item_sk), web_returns(wr_item_sk)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes cover the join and filter conditions in the workload queries, especially for large tables. Avoid missing indexes on frequently joined columns and columns used in WHERE clauses, such as date keys and foreign keys, to prevent regressions.\"}"], ["train_workload_random_45_9q", " [date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other frequently queried columns, as this can lead to redundancy and potential regression in query performance. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality.\"}"], ["train_workload_random_45_9q", "[date_dim(d_date_sk, d_year), promotion(p_promo_sk), item(i_item_sk, i_category), web_site(web_site_sk), web_sales(ws_item_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store_sales(ss_customer_sk, ss_item_sk), store_returns(sr_item_sk), web_returns(wr_item_sk)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes cover both the join keys and the filtering conditions in the workload. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid removing indexes that are used in multiple queries or are critical for join operations.\"}"], ["train_workload_random_45_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid single-column indexes when queries involve multiple columns in conditions, as composite indexes can better optimize such scenarios.\"}"], ["train_workload_random_45_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes are maintained for columns frequently used together in WHERE clauses, especially when they involve date ranges or join conditions. Avoid removing composite indexes that optimize multiple query patterns.\"}"], ["train_workload_random_45_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "{rule: \"Ensure that all foreign key columns used in joins across multiple tables in the workload are indexed. Specifically, check for missing indexes on columns frequently used in WHERE clauses and JOIN conditions, such as 'date_dim.d_date_sk', 'item.i_item_sk', and 'promotion.p_promo_sk'. If these columns are not indexed in the regression index selection, add them to prevent performance regressions.\"}"], ["train_workload_random_45_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables and frequently joined columns. Additionally, prioritize indexes on columns used in WHERE clauses with high selectivity and those involved in ORDER BY clauses.\"}"], ["train_workload_random_45_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "{rule: \"Ensure that all foreign key columns used in joins across multiple tables in the workload are indexed, especially those with high cardinality or frequently used in WHERE clauses. Avoid removing indexes on columns that are part of complex queries involving multiple joins and subqueries, as this can lead to performance regressions.\"}"], ["train_workload_random_45_9q", "[date_dim(d_date_sk, d_year), promotion(p_promo_sk), item(i_item_sk, i_category), web_site(web_site_sk), web_sales(ws_item_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store_sales(ss_customer_sk, ss_item_sk), store_returns(sr_item_sk), web_returns(wr_item_sk)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes cover the join and filter conditions in the workload queries. Specifically, prioritize indexes on columns frequently used in joins and where clauses across large tables, such as date_dim(d_date_sk), item(i_item_sk), and sales tables' item_sk columns, to prevent regression.\"}"], ["train_workload_random_45_9q", " [date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as they may already be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or aggregate functions, especially if they are not part of a foreign key relationship.\"}"], ["train_workload_random_45_9q", " [date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are used less frequently or primarily in smaller tables unless they are critical for specific query performance.\"}"], ["train_workload_random_45_9q", " [date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'item(i_item_sk)', when the workload involves frequent joins and filters on columns with lower cardinality and higher selectivity, such as 'date_dim(d_date_sk)' and 'store(s_store_sk)'. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions with high selectivity to improve query performance.\"}"], ["train_workload_random_45_9q", " [date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes are created on columns frequently used in join conditions and where clauses across multiple queries, especially on large tables. Avoid creating indexes on columns that are not frequently used in such conditions, as they may not provide significant performance benefits and could lead to regression.\"}"], ["train_workload_random_45_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), promotion(p_promo_sk), store(s_store_id)]", "```json\n{\n    \"rule\": \"Ensure that indexes cover all join and filter conditions in the workload. Specifically, include indexes on columns frequently used in WHERE clauses and JOIN conditions, such as 'date_dim.d_date_sk', 'item.i_item_sk', and 'customer_address.ca_address_sk'. Avoid removing indexes that are used in multiple queries, especially those involving large tables or complex joins.\"\n}\n```"], ["train_workload_random_45_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk), I(C web_sales.ws_item_sk,C web_sales.ws_ext_discount_amt)]", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes on columns frequently used in WHERE clauses, JOIN conditions, and ORDER BY clauses are maintained. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve query performance by reducing the need for sorting and filtering operations.\"}"]], "train_workload_random_49_4q": [["train_workload_random_49_4q", "[customer_demographics(cd_demo_sk), customer_address(ca_state, ca_gmt_offset), store(s_store_sk), date_dim(d_date_sk, d_year), item(i_manufact_id), item(i_item_id), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Avoid redundant indexes on columns already covered by composite indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially for large tables.\"}"], ["train_workload_random_49_4q", " [household_demographics(hd_demo_sk, hd_dep_count), date_dim(d_date_sk), item(i_color), web_sales(ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{rule: \"Prioritize indexing columns involved in join conditions and filters with high cardinality or frequent use across multiple queries. Avoid indexing columns with low cardinality or those primarily used in equality conditions unless they are part of a composite index that supports a broader query pattern.\"}"], ["train_workload_random_49_4q", "[date_dim(d_date_sk, d_year), item(i_item_sk, i_item_id, i_manufact_id, i_category), household_demographics(hd_demo_sk, hd_dep_count), web_sales(ws_item_sk), customer_demographics(cd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already part of composite indexes. Composite indexes that cover multiple columns used together in queries are generally more efficient than individual indexes on each column. Ensure that indexes are aligned with the query patterns, focusing on columns frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations.\"}"], ["train_workload_random_49_4q", " [household_demographics(hd_demo_sk, hd_dep_count), date_dim(d_date_sk), item(i_color), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently filtered or joined in the workload. Focus on composite indexes that match the query patterns, especially on columns used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_49_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns involved in multiple queries and those used in WHERE clauses, such as date and foreign key columns.\"}"], ["train_workload_random_49_4q", "[customer_demographics(cd_demo_sk), customer_address(ca_state, ca_gmt_offset), store(s_store_sk), date_dim(d_date_sk, d_year), item(i_manufact_id), item(i_item_id), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for filtering or joining conditions. Prioritize single-column indexes on frequently filtered or joined columns, especially when they are used in multiple queries across the workload.\"}"], ["train_workload_random_49_4q", " [household_demographics(hd_demo_sk, hd_dep_count), date_dim(d_date_sk), item(i_color), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{\"rule\": \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently used in query filters or joins. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality and those that significantly reduce the result set size.\"}"], ["train_workload_random_49_4q", " [household_demographics(hd_demo_sk, hd_dep_count), date_dim(d_date_sk), item(i_color), web_sales(ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOIN conditions and have lower cardinality for better performance.\"}"], ["train_workload_random_49_4q", "[date_dim(d_date_sk, d_year), item(i_item_sk, i_item_id, i_manufact_id, i_category), household_demographics(hd_demo_sk, hd_dep_count), web_sales(ws_item_sk), customer_demographics(cd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes. Ensure that composite indexes are utilized effectively by including all necessary columns in the correct order to support the query workload.\"}"], ["train_workload_random_49_4q", "[date_dim(d_date_sk, d_year), item(i_item_sk, i_item_id, i_manufact_id, i_category), household_demographics(hd_demo_sk, hd_dep_count), web_sales(ws_item_sk), customer_demographics(cd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already part of composite indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially those involved in joins and filters. Ensure indexes are aligned with query patterns, focusing on columns frequently used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_49_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns involved in multiple queries and those used in WHERE clauses, such as date and foreign key columns.\"}"], ["train_workload_random_49_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that all foreign key columns used in join conditions and filter conditions in the workload are indexed. Specifically, include indexes on 'customer_demographics.cd_demo_sk', 'catalog_sales.cs_sold_date_sk', 'date_dim.d_date_sk', 'store_sales.ss_sold_date_sk', and 'web_sales.ws_sold_date_sk' as they are present in the improvement index but missing in the regression index.\"}"], ["train_workload_random_49_4q", "[customer_demographics(cd_demo_sk), customer_address(ca_state, ca_gmt_offset), store(s_store_sk), date_dim(d_date_sk, d_year), item(i_manufact_id), item(i_item_id), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Avoid redundant indexes on columns already covered by composite indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially for large tables.\"}"], ["train_workload_random_49_4q", "[date_dim(d_date_sk, d_year), item(i_item_sk, i_item_id, i_manufact_id, i_category), household_demographics(hd_demo_sk, hd_dep_count), web_sales(ws_item_sk), customer_demographics(cd_demo_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover join keys without considering filter conditions, especially when the workload involves complex filtering on multiple columns.\"}"], ["train_workload_random_49_4q", " [household_demographics(hd_demo_sk, hd_dep_count), date_dim(d_date_sk), item(i_color), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently filtered or joined in the workload. Focus on composite indexes that match the query patterns, especially on columns used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_49_4q", "[customer_demographics(cd_demo_sk), customer_address(ca_state, ca_gmt_offset), store(s_store_sk), date_dim(d_date_sk, d_year), item(i_manufact_id), item(i_item_id), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Avoid creating indexes that only partially cover the query conditions, especially when multiple tables are involved in joins. Prioritize composite indexes that include both join keys and frequently filtered columns.\"}"], ["train_workload_random_49_4q", "[customer_demographics(cd_demo_sk), customer_address(ca_state, ca_gmt_offset), store(s_store_sk), date_dim(d_date_sk, d_year), item(i_manufact_id), item(i_item_id), household_demographics(hd_demo_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. If an index is removed or replaced, verify that all critical join and filter columns are still indexed. In this case, ensure that indexes on 'date_dim(d_date_sk, d_year)' and 'customer_address(ca_state, ca_gmt_offset)' are maintained, as they are crucial for the workload's join and filter operations.\"}"], ["train_workload_random_49_4q", " [household_demographics(hd_demo_sk, hd_dep_count), date_dim(d_date_sk), item(i_color), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{\"rule\": \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently used in query filters or joins. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality. Remove or adjust indexes that do not align with the query patterns or that duplicate existing indexes, as they can lead to performance regressions.\"}"], ["train_workload_random_49_4q", " [household_demographics(hd_demo_sk, hd_dep_count), date_dim(d_date_sk), item(i_color), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries. Instead, prioritize single-column indexes on columns that are consistently used in WHERE clauses and join conditions, especially for large tables.\"}"], ["train_workload_random_49_4q", " [household_demographics(hd_demo_sk, hd_dep_count), date_dim(d_date_sk), item(i_color), web_sales(ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{rule: \"Prioritize indexing columns involved in join conditions and filters with high cardinality or frequent use across multiple queries. Avoid indexing columns with low cardinality or those that are not frequently used in join conditions or filters.\"}"], ["train_workload_random_49_4q", "[date_dim(d_date_sk, d_year), item(i_item_sk, i_item_id, i_manufact_id, i_category), household_demographics(hd_demo_sk, hd_dep_count), web_sales(ws_item_sk), customer_demographics(cd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes. Ensure that composite indexes are utilized effectively by including all necessary columns in the correct order to support the query workload.\"}"], ["train_workload_random_49_4q", "[date_dim(d_date_sk, d_year), item(i_item_sk, i_item_id, i_manufact_id, i_category), household_demographics(hd_demo_sk, hd_dep_count), web_sales(ws_item_sk), customer_demographics(cd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already part of composite indexes. Ensure composite indexes cover the most frequently queried columns together to optimize query performance.\"}"], ["train_workload_random_49_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure that all necessary columns used in join conditions and filters across multiple tables in the workload are indexed. Avoid removing indexes on columns that are frequently used in join conditions or where clauses, especially if they are part of composite keys or are used in multiple queries.\"}"], ["train_workload_random_49_4q", " [household_demographics(hd_demo_sk, hd_dep_count), date_dim(d_date_sk), item(i_color), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{\"rule\": \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently filtered or joined in the workload. Focus on indexing columns that are used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality and frequent use in the workload.\"}"], ["train_workload_random_49_4q", "[date_dim(d_date_sk, d_year), item(i_item_sk, i_item_id, i_manufact_id, i_category), household_demographics(hd_demo_sk, hd_dep_count), web_sales(ws_item_sk), customer_demographics(cd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already part of composite indexes. Ensure that composite indexes cover the most frequently queried columns together, rather than separately indexing individual columns that are often used in conjunction.\"}"], ["train_workload_random_49_4q", "[customer_demographics(cd_demo_sk), customer_address(ca_state, ca_gmt_offset), store(s_store_sk), date_dim(d_date_sk, d_year), item(i_manufact_id), item(i_item_id), household_demographics(hd_demo_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover a single aspect (e.g., only join keys or only filter conditions) without considering the full query context. For example, in the regression index, 'web_sales(ws_sold_date_sk)' and 'customer_address(ca_address_sk)' only partially cover the workload's needs, missing other critical columns like 'd_date_sk' and 'ca_gmt_offset' that are frequently used in joins and filters.\"}"], ["train_workload_random_49_4q", "[date_dim(d_date_sk, d_year), item(i_item_sk, i_item_id, i_manufact_id, i_category), household_demographics(hd_demo_sk, hd_dep_count), web_sales(ws_item_sk), customer_demographics(cd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already part of composite indexes. Ensure composite indexes cover the most frequently queried columns together to optimize query performance.\"}"], ["train_workload_random_49_4q", " [household_demographics(hd_demo_sk, hd_dep_count), date_dim(d_date_sk), item(i_color), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{\"rule\": \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently filtered or joined in the workload. Focus on indexing columns that are used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality and frequent use in the workload.\"}"], ["train_workload_random_49_4q", "[customer_demographics(cd_demo_sk), customer_address(ca_state, ca_gmt_offset), store(s_store_sk), date_dim(d_date_sk, d_year), item(i_manufact_id), item(i_item_id), household_demographics(hd_demo_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize indexing columns involved in joins and filters across multiple queries, such as 'date_dim(d_date_sk)', 'customer_address(ca_address_sk)', and 'item(i_item_sk)'. Avoid regression by not removing indexes that are frequently used in join conditions, even if they appear redundant.\"}"], ["train_workload_random_49_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure all join and filter columns in the workload are indexed. Specifically, check for missing indexes on columns used in joins and filters across multiple queries, such as 'customer_demographics.cd_demo_sk', 'catalog_sales.cs_sold_date_sk', 'date_dim.d_date_sk', 'store_sales.ss_sold_date_sk', and 'web_sales.ws_sold_date_sk'.\"}"], ["train_workload_random_49_4q", "[customer_demographics(cd_demo_sk), customer_address(ca_state, ca_gmt_offset), store(s_store_sk), date_dim(d_date_sk, d_year), item(i_manufact_id), item(i_item_id), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for filtering or joining conditions. Prioritize single-column indexes on columns frequently used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_49_4q", "[date_dim(d_date_sk, d_year), item(i_item_sk, i_item_id, i_manufact_id, i_category), household_demographics(hd_demo_sk, hd_dep_count), web_sales(ws_item_sk), customer_demographics(cd_demo_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Avoid indexes that only cover join conditions without considering filter conditions, especially for large tables.\"}"], ["train_workload_random_49_4q", " [household_demographics(hd_demo_sk, hd_dep_count), date_dim(d_date_sk), item(i_color), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are part of composite indexes. Prioritize composite indexes that cover multiple columns used together in query conditions, especially for large tables. Ensure indexes align with the most frequent query patterns and join conditions to optimize performance.\"}"], ["train_workload_random_49_4q", "[customer_demographics(cd_demo_sk), customer_address(ca_state, ca_gmt_offset), store(s_store_sk), date_dim(d_date_sk, d_year), item(i_manufact_id), item(i_item_id), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Avoid redundant indexes on columns already covered by composite indexes. Prioritize composite indexes that cover multiple columns used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_49_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure that all necessary columns used in join conditions and filters across multiple queries are indexed. Avoid removing indexes on columns that are frequently used in join conditions or as filters, especially if they are part of a composite key or are used in multiple queries within the workload.\"}"], ["train_workload_random_49_4q", " [household_demographics(hd_demo_sk, hd_dep_count), date_dim(d_date_sk), item(i_color), web_sales(ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently filtered or joined in the workload. Focus on composite indexes that match the query patterns, especially on columns used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_49_4q", "[customer_demographics(cd_demo_sk), customer_address(ca_state, ca_gmt_offset), store(s_store_sk), date_dim(d_date_sk, d_year), item(i_manufact_id), item(i_item_id), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates. Avoid redundant indexes on columns already covered by composite indexes. Prioritize composite indexes that cover multiple columns used in joins and filters, especially for high cardinality columns.\"}"], ["train_workload_random_49_4q", "[customer_demographics(cd_demo_sk), customer_address(ca_state, ca_gmt_offset), store(s_store_sk), date_dim(d_date_sk, d_year), item(i_manufact_id), item(i_item_id), household_demographics(hd_demo_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover a single aspect of the query, such as only the join or only the filter, as this can lead to regressions. For example, in the regression index, 'web_sales(ws_sold_date_sk)' and 'customer_address(ca_address_sk)' only partially cover the workload's needs, missing other critical columns like 'd_date_sk' and 'ca_gmt_offset' that are used in joins and filters.\"}"], ["train_workload_random_49_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure all join and filter columns in the workload are indexed. Specifically, check for missing indexes on columns used in joins and filters across multiple queries, such as 'customer_demographics.cd_demo_sk', 'catalog_sales.cs_sold_date_sk', 'date_dim.d_date_sk', 'store_sales.ss_sold_date_sk', and 'web_sales.ws_sold_date_sk'.\"}"], ["train_workload_random_49_4q", "[customer_demographics(cd_demo_sk), customer_address(ca_state, ca_gmt_offset), store(s_store_sk), date_dim(d_date_sk, d_year), item(i_manufact_id), item(i_item_id), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Avoid creating redundant indexes on columns already covered by existing indexes. Prioritize composite indexes that match the query patterns, especially for columns frequently used together in joins and filters.\"}"], ["train_workload_random_49_4q", "[customer_demographics(cd_demo_sk), customer_address(ca_state, ca_gmt_offset), store(s_store_sk), date_dim(d_date_sk, d_year), item(i_manufact_id), item(i_item_id), household_demographics(hd_demo_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize indexing columns involved in multiple queries and those used in join conditions across large tables. Avoid regression by maintaining indexes on columns frequently used in WHERE clauses and GROUP BY operations, especially when they are part of composite conditions.\"}"], ["train_workload_random_49_4q", "[date_dim(d_date_sk, d_year), item(i_item_sk, i_item_id, i_manufact_id, i_category), household_demographics(hd_demo_sk, hd_dep_count), web_sales(ws_item_sk), customer_demographics(cd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already part of composite indexes. Instead, focus on composite indexes that cover multiple columns used together in queries, especially those involved in joins and filters.\"}"], ["train_workload_random_49_4q", "[customer_demographics(cd_demo_sk), customer_address(ca_state, ca_gmt_offset), store(s_store_sk), date_dim(d_date_sk, d_year), item(i_manufact_id), item(i_item_id), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are not removed or replaced with less specific indexes. Maintain composite indexes on columns frequently used together in WHERE clauses, especially when filtering by multiple conditions.\"}"], ["train_workload_random_49_4q", " [household_demographics(hd_demo_sk, hd_dep_count), date_dim(d_date_sk), item(i_color), web_sales(ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{rule: \"Prioritize indexing columns involved in join conditions and filters with high cardinality or frequent usage across multiple queries. Avoid indexing columns with low cardinality or those that are not frequently used in join conditions or filters.\"}"], ["train_workload_random_49_4q", "[customer_demographics(cd_demo_sk), customer_address(ca_state, ca_gmt_offset), store(s_store_sk), date_dim(d_date_sk, d_year), item(i_manufact_id), item(i_item_id), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for filtering or joining conditions. Prioritize single-column indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_49_4q", "[date_dim(d_date_sk, d_year), item(i_item_sk, i_item_id, i_manufact_id, i_category), household_demographics(hd_demo_sk, hd_dep_count), web_sales(ws_item_sk), customer_demographics(cd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that composite indexes are used instead of single-column indexes when multiple columns are frequently queried together in WHERE clauses or JOIN conditions. This can be detected by analyzing query patterns and identifying columns that are often used together, then creating composite indexes for those column combinations.\"}"], ["train_workload_random_49_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{rule: \"Ensure that all tables involved in join operations have indexed columns used in the join conditions, especially for large tables. Avoid removing indexes on columns that are frequently used in WHERE clauses or join conditions across multiple queries.\"}"], ["train_workload_random_49_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure all join and filter columns in the workload are indexed. Specifically, check for missing indexes on columns used in joins and filters across multiple queries, such as 'customer_demographics.cd_demo_sk', 'catalog_sales.cs_sold_date_sk', 'date_dim.d_date_sk', 'store_sales.ss_sold_date_sk', and 'web_sales.ws_sold_date_sk'.\"}"], ["train_workload_random_49_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure all join and filter columns in the workload are indexed. Specifically, check for missing indexes on columns used in join conditions and WHERE clauses across all queries, such as 'customer_demographics.cd_demo_sk', 'catalog_sales.cs_sold_date_sk', 'date_dim.d_date_sk', 'store_sales.ss_sold_date_sk', and 'web_sales.ws_sold_date_sk'.\"}"], ["train_workload_random_49_4q", "[customer_demographics(cd_demo_sk), customer_address(ca_state, ca_gmt_offset), store(s_store_sk), date_dim(d_date_sk, d_year), item(i_manufact_id), item(i_item_id), household_demographics(hd_demo_sk)]", "[web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. If an index is removed or replaced, verify that all critical join and filter columns are still indexed. For example, if an index on 'date_dim(d_date_sk, d_year)' is removed, ensure that 'd_date_sk' and 'd_year' are still indexed separately or in combination with other columns.\"}"], ["train_workload_random_49_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C item.i_manufact_id), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure all join and filter columns in the workload are indexed. Specifically, check for missing indexes on columns used in joins and filters across multiple queries, such as 'customer_demographics.cd_demo_sk', 'catalog_sales.cs_sold_date_sk', 'date_dim.d_date_sk', 'store_sales.ss_sold_date_sk', and 'web_sales.ws_sold_date_sk'.\"}"]], "train_workload_random_50_8q": [["train_workload_random_50_8q", "[date_dim(d_date_sk, d_year, d_week_seq), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not used in join conditions or where clauses in the workload. Focus on indexing columns that are frequently used in joins, filters, or aggregations, especially those with high cardinality or those that are part of foreign key relationships.\"}"], ["train_workload_random_50_8q", "[date_dim(d_date_sk, d_year, d_week_seq), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not used in join conditions or where clauses in the workload queries. Focus on indexing columns that are frequently used in joins, filters, or aggregations to improve query performance.\"}"], ["train_workload_random_50_8q", "[date_dim(d_date_sk, d_year, d_week_seq), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or where clauses in the workload queries. Focus on indexing columns that are frequently used in join conditions, filtering, and grouping operations to prevent regression.\"}"], ["train_workload_random_50_8q", " [date_dim(d_date_sk), item(i_current_price), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query conditions involving equality or range filters on individual columns. Prioritize single-column indexes for columns frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_50_8q", "[date_dim(d_date_sk, d_year, d_week_seq), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or where clauses in the workload queries. Focus on indexing columns that are frequently used in join conditions, filtering, and grouping operations to prevent regression.\"}"], ["train_workload_random_50_8q", "[date_dim(d_date_sk), customer(c_customer_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_customer_sk), store(s_store_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store_returns(sr_item_sk), web_site(web_site_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating indexes on columns that are not frequently used in join or filter conditions across the workload. Prioritize indexing on columns that are used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality and frequent access patterns. Ensure that indexes cover the most critical parts of the queries to optimize performance.\"}"], ["train_workload_random_50_8q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries. Missing indexes on columns used in frequent joins or filters, such as 'store_sales.ss_ticket_number', 'store_returns.sr_returned_date_sk', 'web_returns.wr_returned_date_sk', and 'web_sales.ws_sold_date_sk', can lead to regressions. Additionally, composite indexes like 'date_dim.d_date_sk, date_dim.d_date' and 'item.i_item_sk, item.i_current_price' should be maintained to optimize multi-column conditions.\"}"], ["train_workload_random_50_8q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses for filtering by date range are indexed, especially when they are used in joins or subqueries. In this case, the missing index on catalog_sales.cs_sold_date_sk in the regression index selection could lead to performance degradation.\"}"], ["train_workload_random_50_8q", "[date_dim(d_date_sk, d_year, d_week_seq), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_50_8q", " [date_dim(d_date_sk), item(i_current_price), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or where clauses in the workload queries. Focus on indexing columns that are frequently used in join conditions, filtering, and sorting operations to prevent regression.\"}"], ["train_workload_random_50_8q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure all relevant tables involved in join operations have indexes on their join keys. In this case, the improvement index includes 'catalog_sales.cs_sold_date_sk', which is missing in the regression index. This index is crucial for optimizing queries involving 'catalog_sales' and 'date_dim' joins.\"}"], ["train_workload_random_50_8q", "[date_dim(d_date_sk, d_year, d_week_seq), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Ensure indexes are created on columns that improve query performance by reducing scan times and enhancing lookup efficiency.\"}"], ["train_workload_random_50_8q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure all relevant tables in the workload have indexes on columns used in join conditions and filters. Specifically, check for missing indexes on columns like 'catalog_sales.cs_sold_date_sk' which are present in the improvement index but missing in the regression index.\"}"], ["train_workload_random_50_8q", "[date_dim(d_date_sk, d_year, d_week_seq), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Ensure indexes are created on columns that improve query performance by reducing scan times and enhancing lookup efficiency.\"}"], ["train_workload_random_50_8q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables. Missing indexes on columns frequently used in joins or filters can lead to regressions.\"}"], ["train_workload_random_50_8q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure all relevant date columns used in WHERE clauses are indexed, especially when filtering by date ranges or specific dates, as missing indexes on such columns can lead to regressions in query performance.\"}"], ["train_workload_random_50_8q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Specifically, include indexes on columns used in join conditions across large tables and those used in frequent filter conditions. Avoid removing indexes that are part of composite keys used in multiple queries.\"}"], ["train_workload_random_50_8q", "[date_dim(d_date_sk), customer(c_customer_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_customer_sk), store(s_store_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store_returns(sr_item_sk), web_site(web_site_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_50_8q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all frequently joined columns, especially those used in WHERE clauses and JOIN conditions, are indexed. In this case, the missing index on catalog_sales.cs_sold_date_sk in the regression index selection should be added to prevent potential performance regressions.\"}"], ["train_workload_random_50_8q", "[date_dim(d_date_sk, d_year, d_week_seq), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Instead, focus on indexing columns that are frequently used in joins and where clauses, such as foreign keys and date columns used in date range queries.\"}"], ["train_workload_random_50_8q", "[date_dim(d_date_sk, d_year, d_week_seq), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating indexes on columns that are not used in join conditions or where clauses in the workload. Focus on indexing columns that are frequently used in joins, filters, or aggregations, such as foreign keys and date columns used in range queries.\"}"], ["train_workload_random_50_8q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses for filtering by date range are indexed, especially when they are used in joins or subqueries. Additionally, maintain indexes on columns frequently used in join conditions, such as item keys and ticket numbers, to prevent regression in query performance.\"}"], ["train_workload_random_50_8q", " [date_dim(d_date_sk), item(i_current_price), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Prioritize indexing columns that are frequently used in join conditions and filtering predicates, especially those involved in large tables or complex queries.\"}"], ["train_workload_random_50_8q", " [date_dim(d_date_sk), item(i_current_price), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Prioritize indexing columns that are frequently used in join conditions and filtering predicates, especially those involved in large table joins or subqueries. Ensure that indexes are not created on columns with low cardinality or those that are not used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_50_8q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries, especially for large tables. Missing indexes on columns frequently used in joins or filters can lead to regressions.\"}"], ["train_workload_random_50_8q", " [date_dim(d_date_sk), item(i_current_price), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of existing indexes or primary keys, especially if they are frequently used in join conditions. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions in SELECT statements to improve query performance.\"}"], ["train_workload_random_50_8q", "[date_dim(d_date_sk, d_year, d_week_seq), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially those with high cardinality or those that are part of large tables.\"}"], ["train_workload_random_50_8q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses for filtering by date range are indexed, especially when they are used in joins or subqueries. In this case, the missing index on catalog_sales.cs_sold_date_sk in the regression index selection could lead to performance degradation.\"}"], ["train_workload_random_50_8q", "[date_dim(d_date_sk, d_year, d_week_seq), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Ensure indexes are created on columns that improve query performance by reducing scan times and enhancing lookup efficiency.\"}"], ["train_workload_random_50_8q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses for filtering by date range are indexed, especially when they are used in joins or subqueries. In this case, the missing index on catalog_sales.cs_sold_date_sk in the regression index selection could lead to performance regression.\"}"], ["train_workload_random_50_8q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all frequently joined columns, especially those used in WHERE clauses and JOIN conditions, are indexed. In this case, the missing index on catalog_sales.cs_sold_date_sk in the regression index selection should be added to prevent potential performance regressions.\"}"], ["train_workload_random_50_8q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Ensure that all date-related columns used in WHERE clauses for filtering by date range are indexed, especially when they are used in joins or subqueries. Additionally, maintain indexes on columns frequently used in join conditions, such as item keys and ticket numbers, to prevent regression in query performance.\"}"], ["train_workload_random_50_8q", "[date_dim(d_date_sk), customer(c_customer_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_customer_sk), store(s_store_sk), web_returns(wr_item_sk), catalog_page(cp_catalog_page_sk), store_returns(sr_item_sk), web_site(web_site_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and have high cardinality to improve query performance.\"}"], ["train_workload_random_50_8q", "[date_dim(d_date_sk, d_year, d_week_seq), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Ensure indexes are created on columns with high cardinality and those involved in range queries or date-based filtering.\"}"]], "train_workload_random_54_8q": [["train_workload_random_54_8q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), item(i_item_sk), customer_demographics(cd_demo_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), store_sales(ss_item_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns frequently used in joins and filters across multiple queries, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_54_8q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), item(i_item_sk), customer_demographics(cd_demo_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), store_sales(ss_item_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for columns frequently used in WHERE clauses and JOIN conditions. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_54_8q", " [web_returns(wr_item_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), store_sales(ss_sold_date_sk), item(i_item_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes that only cover one aspect, such as only the join keys or only the filter conditions, as this can lead to regressions. Prioritize indexes that are used in multiple queries and cover both join and filter conditions to improve performance across the workload.\"}"], ["train_workload_random_54_8q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), item(i_item_sk), customer_demographics(cd_demo_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), store_sales(ss_item_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries. Avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_54_8q", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on date columns used in WHERE clauses, especially when filtering by date ranges, to prevent regressions in query performance.\"}"], ["train_workload_random_54_8q", " [date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already covered by existing single-column indexes, especially when the single-column indexes are frequently used in join conditions across multiple queries.\"}"], ["train_workload_random_54_8q", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on date columns are maintained, especially for tables frequently joined on date dimensions, as missing indexes on date columns can lead to regressions in query performance.\"}"], ["train_workload_random_54_8q", " [date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used in join conditions with other tables. Instead, focus on indexing columns that are used in WHERE clauses or are part of frequent join conditions across multiple queries.\"}"], ["train_workload_random_54_8q", " [date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually, especially when the workload involves frequent joins on those columns. Instead, focus on indexing columns that are frequently used in WHERE clauses or join conditions without existing indexes.\"}"], ["train_workload_random_54_8q", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters across multiple queries are consistently applied, especially for columns frequently used in WHERE clauses and JOIN operations. Avoid removing indexes that are used in multiple queries, such as date columns and foreign keys, unless they are proven to be redundant or less effective.\"}"], ["train_workload_random_54_8q", " [web_returns(wr_item_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), store_sales(ss_sold_date_sk), item(i_item_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, as this can lead to redundancy and potential performance regression.\"}"], ["train_workload_random_54_8q", " [web_returns(wr_item_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), store_sales(ss_sold_date_sk), item(i_item_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Prioritize indexing columns with high cardinality and those involved in filtering large datasets.\"}"], ["train_workload_random_54_8q", " [date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes with prefix 'I(C ' on columns that are already indexed in the improvement selection, especially if they are part of join conditions or frequently used in WHERE clauses. Instead, focus on optimizing existing indexes or creating composite indexes that align with the query patterns.\"}"], ["train_workload_random_54_8q", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters across multiple queries are consistently applied, especially for columns frequently used in WHERE clauses and JOIN conditions. Avoid removing indexes that are used in multiple queries, such as date_dim.d_date_sk, which is crucial for date filtering across various queries.\"}"], ["train_workload_random_54_8q", " [date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of existing indexes or primary keys, especially if they are frequently used in join conditions. Instead, focus on composite indexes that cover multiple columns used together in queries, particularly those involved in filtering and joining operations.\"}"], ["train_workload_random_54_8q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), item(i_item_sk), customer_demographics(cd_demo_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), store_sales(ss_item_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries. Instead, prefer single-column indexes on these columns to improve query performance and prevent regression.\"}"], ["train_workload_random_54_8q", " [date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already covered by existing single-column indexes, especially when the workload involves frequent joins on those columns. Instead, focus on optimizing single-column indexes that are frequently used in join conditions and where clauses.\"}"], ["train_workload_random_54_8q", "[date_dim(d_date_sk, d_date, d_year, d_week_seq), web_returns(wr_order_number, wr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), item(i_item_sk, i_manager_id), catalog_returns(cr_item_sk), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these are likely to be covered by existing indexes or constraints. Instead, focus on indexing columns that are used in WHERE clauses, GROUP BY, or ORDER BY operations, especially if they are not part of existing indexes.\"}"], ["train_workload_random_54_8q", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Ensure that all date-related columns used in WHERE clauses for filtering by date ranges are indexed, especially if they are used in multiple queries. Additionally, maintain indexes on columns that are frequently joined across tables, such as foreign keys, to prevent regression in query performance.\"}"], ["train_workload_random_54_8q", "[date_dim(d_date_sk, d_date, d_year, d_week_seq), web_returns(wr_order_number, wr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), item(i_item_sk, i_manager_id), catalog_returns(cr_item_sk), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index covering the same query patterns, as this can lead to redundant indexes and potential performance regressions.\"}"], ["train_workload_random_54_8q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), item(i_item_sk), customer_demographics(cd_demo_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), store_sales(ss_item_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries. Instead, use single-column indexes on these columns to improve query performance and prevent regression.\"}"], ["train_workload_random_54_8q", "[date_dim(d_date_sk, d_date, d_year, d_week_seq), web_returns(wr_order_number, wr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), item(i_item_sk, i_manager_id), catalog_returns(cr_item_sk), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating single-column indexes on columns that are frequently used in join conditions or filters with other columns. Instead, create composite indexes that include all columns involved in the join or filter conditions to improve query performance.\"}"], ["train_workload_random_54_8q", " [web_returns(wr_item_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), store(s_store_sk), date_dim(d_date_sk), store_sales(ss_sold_date_sk), item(i_item_sk), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_order_number), web_site(web_site_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes or indexes on foreign keys.\"}"], ["train_workload_random_54_8q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), item(i_item_sk), customer_demographics(cd_demo_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), store_sales(ss_item_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes solely on individual columns without considering their usage in joins and filters. Prioritize composite indexes that align with query patterns, especially for columns frequently used together in joins and where clauses.\"}"], ["train_workload_random_54_8q", " [date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used in join conditions with other tables. Instead, focus on indexing columns that are used in WHERE clauses or are part of frequent join conditions across multiple queries.\"}"], ["train_workload_random_54_8q", "[date_dim(d_date_sk, d_date, d_year, d_week_seq), web_returns(wr_order_number, wr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), item(i_item_sk, i_manager_id), catalog_returns(cr_item_sk), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be already optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses, GROUP BY, or ORDER BY operations, especially if they are not part of existing indexes or constraints.\"}"], ["train_workload_random_54_8q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), item(i_item_sk), customer_demographics(cd_demo_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), store_sales(ss_item_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes solely on individual columns that are not frequently used in joins or filters. Prioritize composite indexes that align with the query patterns, especially those involving multiple tables and conditions.\"}"], ["train_workload_random_54_8q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), item(i_item_sk), customer_demographics(cd_demo_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), store_sales(ss_item_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection, especially if they are primary keys or foreign keys. Prioritize indexing columns involved in joins and filters that are frequently used across multiple queries.\"}"], ["train_workload_random_54_8q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), item(i_item_sk), customer_demographics(cd_demo_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), store_sales(ss_item_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection, especially if they are primary keys or frequently used in joins. Prioritize indexing columns that are used in WHERE clauses and have high cardinality, and ensure indexes cover the most frequently queried columns across multiple queries.\"}"], ["train_workload_random_54_8q", "[date_dim(d_date_sk, d_date, d_year, d_week_seq), web_returns(wr_order_number, wr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), item(i_item_sk, i_manager_id), catalog_returns(cr_item_sk), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables or are part of foreign key relationships, as this can lead to redundant indexes and potential performance regressions. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially those involved in filtering large datasets.\"}"], ["train_workload_random_54_8q", " [date_dim(d_date_sk), customer(c_customer_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating redundant indexes on columns that are already covered by existing indexes. Specifically, if an index already exists on a combination of columns, do not create separate indexes on individual columns within that combination unless there is a specific query pattern that benefits from it. Additionally, ensure that indexes are aligned with the join and filter conditions in the workload to prevent unnecessary index creation.\"}"], ["train_workload_random_54_8q", "[date_dim(d_date_sk, d_date, d_year, d_week_seq), web_returns(wr_order_number, wr_item_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), item(i_item_sk, i_manager_id), catalog_returns(cr_item_sk), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be covered by existing indexes or constraints. Instead, focus on indexing columns that are used in WHERE clauses, GROUP BY, or ORDER BY operations, especially if they are not part of existing indexes.\"}"], ["train_workload_random_54_8q", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates used in the workload queries. Specifically, include indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as date_dim.d_date_sk and store_returns.sr_ticket_number, to prevent regression.\"}"], ["train_workload_random_54_8q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), web_returns(wr_item_sk), store_returns(sr_item_sk), item(i_item_sk), customer_demographics(cd_demo_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), store_sales(ss_item_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries. Instead, use single-column indexes on these columns to improve query performance and prevent regression.\"}"]], "train_workload_random_56_4q": [["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{rule: \"Avoid adding indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions, as they may not provide significant performance benefits and can lead to regression.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables and frequently queried columns. Avoid removing indexes on columns that are part of multi-column indexes used in complex queries, as this can lead to performance regressions.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns frequently used in WHERE clauses or JOIN conditions, especially for large tables.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently queried together, especially in join and filter conditions, to prevent regression. Avoid replacing composite indexes with single-column indexes when multiple columns are involved in the workload queries.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload, especially if they are not part of the primary filtering criteria. Focus on columns that are consistently used for filtering or joining, as seen in the improvement index selection.\"}"], ["train_workload_random_56_4q", "[catalog_sales(cs_sold_date_sk), item(i_item_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for high cardinality columns that are frequently filtered or joined on, as seen in the improvement index selection.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in range queries, such as date columns, unless they are part of a composite index that optimizes specific query patterns. Prioritize indexing columns that are used in join conditions and have high cardinality.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload, especially if they belong to tables with a large number of rows, as this can lead to unnecessary overhead and potential regression.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially in large tables.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{rule: \"Avoid adding indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions, as they may not significantly improve query performance and can lead to unnecessary overhead.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in join conditions or filters across multiple queries in the workload, especially if they belong to tables with a large number of rows, as they may lead to unnecessary overhead without significant performance benefits.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Prioritize single-column indexes for columns that are consistently used in filtering conditions, especially in large tables.\"}"], ["train_workload_random_56_4q", "[catalog_sales(cs_sold_date_sk), item(i_item_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are used in equality conditions with a small set of values, such as 'customer_address(ca_state)'. Instead, prioritize indexing columns that are frequently used in join conditions or have high cardinality, like 'catalog_sales(cs_sold_date_sk)' and 'item(i_item_sk)'.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates used in the workload queries. Specifically, include indexes on columns involved in multi-table joins and those frequently used in WHERE clauses to prevent regressions.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions, as they may lead to regression by increasing index size and complexity without improving query performance.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in range queries, such as date columns, unless they are part of a composite index that optimizes specific query patterns. Prioritize indexing columns that are used in join conditions and have high cardinality.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{rule: \"Avoid adding indexes on columns that are not part of the join or filter conditions in the workload queries, especially if they are not frequently queried or have high cardinality, as this can lead to regression by increasing the index maintenance overhead without significant query performance benefits.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{rule: \"Avoid adding indexes on columns with low cardinality or columns that are frequently used in range queries, such as date columns, unless they are part of a composite index that significantly improves query performance. Additionally, ensure that indexes align with the most frequently used join and filter conditions in the workload.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Specifically, include indexes on columns involved in multi-table joins and those frequently used in WHERE clauses, such as customer and item keys across sales tables.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in query predicates. Instead, focus on single-column indexes for columns that are consistently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{rule: \"Avoid adding indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions, as they may not provide significant performance benefits and can lead to regression.\"}"], ["train_workload_random_56_4q", "[catalog_sales(cs_sold_date_sk), item(i_item_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually, especially when the individual indexes are frequently used in the workload. Prioritize individual indexes on columns that are used in join conditions and filters across multiple queries.\"}"], ["train_workload_random_56_4q", "[catalog_sales(cs_sold_date_sk), item(i_item_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{rule: \"Avoid multi-column indexes that include columns with high cardinality or columns that are frequently used in range queries, as they can lead to inefficient index usage and increased maintenance overhead.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{rule: \"Avoid adding indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions, as they may not provide significant performance benefits and can lead to regression.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Specifically, include indexes on columns involved in multiple join conditions across different tables, such as customer keys and item keys, to prevent regression in query performance.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in query predicates or join conditions. Ensure indexes are aligned with the specific columns used in WHERE clauses, JOIN conditions, and GROUP BY clauses to prevent unnecessary complexity and potential performance regressions.\"}"], ["train_workload_random_56_4q", "[catalog_sales(cs_sold_date_sk), item(i_item_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are prioritized over columns used in filtering conditions, especially when the join involves large tables. Avoid indexing columns with low cardinality, such as state codes, unless they are frequently used in filtering conditions across multiple queries.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload. Specifically, include indexes on columns involved in multiple join conditions across different tables, such as customer_sk and item_sk, to prevent regression.\"}"], ["train_workload_random_56_4q", "[catalog_sales(cs_sold_date_sk), item(i_item_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions, as they may lead to regression by increasing index size and complexity without significant performance benefits.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in range queries, such as date columns, unless they are part of a composite index that optimizes specific query patterns. Prioritize indexing columns that are used in join conditions and have high cardinality.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in join conditions or filters across multiple queries in the workload, especially if they belong to tables with a large number of rows, as this can lead to unnecessary overhead and potential regressions.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions, as they may lead to unnecessary index bloat and regression in query performance. Instead, focus on single-column indexes or composite indexes that match the query patterns.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{rule: \"Ensure multi-column indexes are used for columns frequently involved in join conditions and filters across multiple tables, especially when dealing with large datasets. Avoid single-column indexes when multi-column indexes can optimize query performance by reducing the need for multiple index lookups.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{\"rule\": \"Avoid adding indexes on columns that are not part of the join or filter conditions in the workload queries, especially if they are not frequently queried or have low selectivity, as they can lead to unnecessary overhead and potential regressions.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{rule: \"Avoid adding indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions, as they may not provide significant performance benefits and can lead to regression.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload. Avoid removing indexes that support multiple queries, especially those involving large tables or complex joins.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions, as this can lead to regression by increasing index size and complexity without improving query performance.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{rule: \"Ensure multi-column indexes are used for columns frequently involved in join conditions across multiple tables, especially when filtering conditions are applied on these columns. Avoid single-column indexes when multi-column indexes can optimize the query performance by reducing the number of lookups and improving join efficiency.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload, especially if they are not part of the primary filtering criteria. Focus on indexing columns that are consistently used for filtering or joining, and ensure that indexes do not overlap excessively with existing ones unless they significantly improve query performance.\"}"], ["train_workload_random_56_4q", "[catalog_sales(cs_sold_date_sk), item(i_item_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions, as they may lead to regression by increasing index size and complexity without significant performance benefits.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{rule: \"Ensure multi-column indexes are used for columns frequently involved in join conditions and filters across multiple tables, especially when dealing with large datasets. Avoid single-column indexes when multi-column indexes can optimize query performance by covering more conditions.\"}"], ["train_workload_random_56_4q", "[catalog_sales(cs_sold_date_sk), item(i_item_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves multiple tables with join conditions on these columns. Instead, prioritize individual indexes on columns frequently used in join conditions and filters across different queries.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{\"rule\": \"Ensure that composite indexes in the regression selection cover all columns used in join conditions and filters, especially for large tables. Avoid redundant indexes that do not align with the query workload's join and filter patterns.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in range queries, such as date columns, unless they are part of a composite index that optimizes specific query patterns. Prioritize indexing columns that are used in join conditions and have high cardinality.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Specifically, include indexes on columns involved in multi-table joins and those frequently used in WHERE clauses, such as customer and item keys across sales tables, and date keys for filtering by date ranges.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns frequently used in WHERE clauses or JOIN conditions, especially for large tables.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", "[customer_demographics(cd_demo_sk), date_dim(d_date_sk), item(i_manufact_id), date_dim(d_date), customer_address(ca_state)]", "{rule: \"Ensure multi-column indexes are used for columns frequently involved in join conditions across multiple tables, especially when filtering conditions are applied on these columns. Avoid single-column indexes when multi-column indexes can optimize the query performance by reducing the number of lookups and improving the join efficiency.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_ship_customer_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_sales.ss_ticket_number), I(C web_sales.ws_bill_customer_sk), I(C catalog_sales.cs_item_sk,C catalog_sales.cs_bill_customer_sk)]", "[I(C customer_demographics.cd_demo_sk), I(C catalog_sales.cs_item_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. In this case, maintain indexes on 'store_sales.ss_ticket_number' and 'web_sales.ws_bill_customer_sk' as they are critical for join operations in the workload.\"}"], ["train_workload_random_56_4q", "[I(C customer_demographics.cd_demo_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year)]", " [date_dim(d_date_sk, d_date, d_year, d_moy), customer_demographics(cd_demo_sk), customer_address(ca_state), item(i_current_price, i_manufact_id), store_returns(sr_item_sk, sr_customer_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions, as they may lead to unnecessary index bloat and regression in query performance. Instead, focus on single-column indexes or composite indexes that match the query patterns.\"}"]], "train_workload_random_62_4q": [["train_workload_random_62_4q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date), Store_returns(sr_item_sk, sr_ticket_number), Catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the workload involves joins on these columns. Instead, focus on indexing columns that are frequently used in WHERE clauses and join conditions without existing indexes.\"}"], ["train_workload_random_62_4q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date), Store_returns(sr_item_sk, sr_ticket_number), Catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the workload involves frequent joins on those columns. Instead, focus on indexing columns that are frequently used in WHERE clauses and join conditions without existing indexes.\"}"], ["train_workload_random_62_4q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date), Store_returns(sr_item_sk, sr_ticket_number), Catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index in the improving selection, especially if they are frequently used in join conditions. Instead, focus on creating composite indexes that match the join conditions and filtering criteria in the workload.\"}"], ["train_workload_random_62_4q", " [promotion(p_promo_sk), date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, especially if they are frequently used in join conditions or where clauses. Instead, ensure that individual indexes are utilized effectively to cover the query patterns.\"}"], ["train_workload_random_62_4q", "[item(i_item_sk), date_dim(d_week_seq, d_date), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), store(s_store_id), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already covered by single-column indexes in the improvement selection, especially if the workload does not show a need for composite access patterns. Prioritize single-column indexes on frequently joined or filtered columns.\"}"], ["train_workload_random_62_4q", " [promotion(p_promo_sk), date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially if they are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently used in filtering conditions and have moderate to low cardinality, as well as those involved in JOIN operations across large tables.\"}"], ["train_workload_random_62_4q", " [promotion(p_promo_sk), date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating composite indexes (I(C ...)) on columns that are already part of foreign key relationships or are frequently used in joins, as these are better optimized with single-column indexes on the join keys.\"}"], ["train_workload_random_62_4q", " [promotion(p_promo_sk), date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes on foreign keys or frequently joined columns are sufficient. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially for large tables.\"}"], ["train_workload_random_62_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes for columns frequently used together in joins and filters, such as date and item-related columns, to prevent regression.\"}"], ["train_workload_random_62_4q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number), store(s_store_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns involved in join conditions or filters. Prioritize single-column indexes on frequently joined or filtered columns to prevent unnecessary complexity and potential performance regressions.\"}"], ["train_workload_random_62_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Ensure that all date-related columns used in WHERE clauses for filtering by date range are indexed, especially when they are used in joins or have high cardinality. Additionally, maintain indexes on columns frequently used in join conditions and those with high cardinality that appear in WHERE clauses, such as price or other numeric filters.\"}"], ["train_workload_random_62_4q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number), store(s_store_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Prioritize single-column indexes on frequently joined or filtered columns, especially those involved in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_62_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes for columns frequently used together in join conditions and filters, such as date and item-related columns, to prevent regression.\"}"], ["train_workload_random_62_4q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number), store(s_store_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns involved in join conditions or filters. Prioritize single-column indexes on frequently joined or filtered columns to prevent regression.\"}"], ["train_workload_random_62_4q", "[item(i_item_sk), date_dim(d_week_seq, d_date), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), store(s_store_id), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, as this can lead to redundancy and potential performance regression.\"}"], ["train_workload_random_62_4q", "[item(i_item_sk), date_dim(d_week_seq, d_date), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), store(s_store_id), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, as this can lead to redundancy and potential performance regression.\"}"], ["train_workload_random_62_4q", "[item(i_item_sk), date_dim(d_week_seq, d_date), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), store(s_store_id), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes with prefix 'I(C ' as they may indicate unnecessary or redundant indexes on columns already covered by other indexes. Instead, focus on indexes that directly improve query performance by targeting frequently joined or filtered columns.\"}"], ["train_workload_random_62_4q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number), store(s_store_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid dropping indexes on columns that are part of join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_62_4q", " [promotion(p_promo_sk), date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, as this can lead to redundancy and potential performance regression. Instead, focus on ensuring that the individual indexes are utilized effectively in query plans.\"}"], ["train_workload_random_62_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses for filtering by date ranges are indexed, especially if they are used in joins or have high cardinality. Additionally, maintain indexes on columns frequently used in join conditions and those with high cardinality that appear in WHERE clauses, such as price filters.\"}"], ["train_workload_random_62_4q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date), Store_returns(sr_item_sk, sr_ticket_number), Catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition or are frequently used in join conditions across multiple queries, as this can lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in WHERE clauses or are part of aggregations, especially if they are not already indexed and are frequently queried.\"}"], ["train_workload_random_62_4q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number), store(s_store_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid creating unnecessary composite indexes that do not align with the query patterns, as they may lead to regression by not optimizing the most critical join paths.\"}"], ["train_workload_random_62_4q", "[item(i_item_sk), date_dim(d_week_seq, d_date), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), store(s_store_id), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, as this can lead to redundancy and potential performance regression.\"}"], ["train_workload_random_62_4q", " [promotion(p_promo_sk), date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already part of foreign key relationships or are frequently used in join conditions. Instead, prioritize single-column indexes on these columns to optimize join performance and query execution.\"}"], ["train_workload_random_62_4q", "[item(i_item_sk), date_dim(d_week_seq, d_date), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), store(s_store_id), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables with similar join conditions, especially when the workload involves multiple joins across these tables. Prioritize indexes on columns that are frequently used in WHERE clauses and GROUP BY operations, and ensure that indexes are not redundant across tables with similar data relationships.\"}"], ["train_workload_random_62_4q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number), store(s_store_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns involved in join conditions or filters. Prioritize single-column indexes on frequently joined or filtered columns to prevent unnecessary complexity and potential performance regressions.\"}"], ["train_workload_random_62_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses for filtering by date range are indexed, especially when they are used in joins or have high cardinality. Additionally, maintain indexes on columns frequently used in join conditions and those with high cardinality that appear in WHERE clauses, such as price filters.\"}"], ["train_workload_random_62_4q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date), Store_returns(sr_item_sk, sr_ticket_number), Catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition or are frequently used in join operations across multiple queries, as these columns are likely to be covered by existing indexes or primary keys. Instead, focus on indexing columns that are used in WHERE clauses or as part of filtering conditions to improve query performance.\"}"], ["train_workload_random_62_4q", " [promotion(p_promo_sk), date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating composite indexes (I(C ...)) on columns that are already part of foreign key relationships or are frequently used in joins, as these are better optimized with single-column indexes on the join keys.\"}"], ["train_workload_random_62_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes for columns frequently used together in join conditions and filters, such as date and item-related columns. Avoid removing indexes that support high cardinality columns used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_62_4q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number), catalog_returns(cr_order_number), web_returns(wr_order_number), store(s_store_id)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns frequently used in join conditions or filters.\"}"], ["train_workload_random_62_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes for columns frequently used together in joins and filters, such as date and item-related columns, to prevent regression.\"}"], ["train_workload_random_62_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes for columns frequently used together in joins and filters, such as date and item-related columns, to prevent regression.\"}"], ["train_workload_random_62_4q", " [Promotion(p_promo_sk), Item(i_item_sk), Date_dim(d_date), Store_returns(sr_item_sk, sr_ticket_number), Catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used in join conditions across multiple queries. Instead, focus on indexing columns that are used in WHERE clauses, especially those with high cardinality, and ensure that composite indexes cover the most common join conditions and filtering criteria.\"}"]], "train_workload_random_66_6q": [["train_workload_random_66_6q", "[store_sales(ss_item_sk, ss_sold_date_sk), store_returns(sr_item_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Avoid redundant indexes on columns already covered by existing indexes. Prioritize indexes on columns involved in frequent joins and filters, especially for large tables.\"}"], ["train_workload_random_66_6q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Prioritize indexes on columns with high cardinality and those involved in WHERE clauses and JOIN operations. Avoid single-column indexes when multi-column indexes can optimize query performance better.\"}"], ["train_workload_random_66_6q", "[store_sales(ss_item_sk, ss_sold_date_sk), store_returns(sr_item_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries. Prioritize indexes on columns frequently used in joins and filters, especially for large tables. Avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_66_6q", "[customer_address(ca_gmt_offset), date_dim(d_date_sk), household_demographics(hd_dep_count), item(i_item_sk), store(s_store_sk), web_returns(wr_order_number), date_dim(d_year), catalog_returns(cr_item_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes cover the join and filter conditions in the workload queries. Avoid redundant indexes on the same column and prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_66_6q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when they involve large tables. Avoid using single-column indexes when multi-column indexes can better optimize query performance by covering more query conditions.\"}"], ["train_workload_random_66_6q", " [household_demographics(hd_dep_count), item(i_item_id, i_color), date_dim(d_date), promotion(p_promo_sk), store(s_store_sk), time_dim(t_hour), customer_address(ca_gmt_offset)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes cover the join and filter conditions used in the workload queries. Avoid creating redundant indexes on columns that are already covered by existing indexes. Prioritize composite indexes that match the query patterns, especially for columns frequently used together in joins and filters.\"}"], ["train_workload_random_66_6q", " [household_demographics(hd_dep_count), item(i_item_id, i_color), date_dim(d_date), promotion(p_promo_sk), store(s_store_sk), time_dim(t_hour), customer_address(ca_gmt_offset)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover columns used in join conditions and filters, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_66_6q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included, especially when they are frequently used in the workload. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve query performance by reducing the need for additional lookups.\"}"], ["train_workload_random_66_6q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses for filtering by date ranges are indexed to prevent regressions in query performance. Additionally, maintain indexes on columns used in JOIN conditions, especially for large tables, to avoid performance degradation.\"}"], ["train_workload_random_66_6q", "[store_sales(ss_item_sk, ss_sold_date_sk), store_returns(sr_item_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Avoid creating indexes that only cover a subset of the columns used in joins or filters, as this can lead to regressions. Specifically, ensure that indexes on foreign key columns are present for all tables involved in joins, and that indexes on columns used in WHERE clauses are comprehensive and not partial.\"}"], ["train_workload_random_66_6q", " [household_demographics(hd_dep_count), item(i_item_id, i_color), date_dim(d_date), promotion(p_promo_sk), store(s_store_sk), time_dim(t_hour), customer_address(ca_gmt_offset)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and ensure composite indexes cover multiple columns when they are used together in queries.\"}"], ["train_workload_random_66_6q", "[store_sales(ss_item_sk, ss_sold_date_sk), store_returns(sr_item_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Avoid redundant indexes on columns already covered by existing indexes. Prioritize indexes on columns involved in frequent joins and filters across multiple queries.\"}"], ["train_workload_random_66_6q", " [household_demographics(hd_dep_count), item(i_item_id, i_color), date_dim(d_date), promotion(p_promo_sk), store(s_store_sk), time_dim(t_hour), customer_address(ca_gmt_offset)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover columns used in join conditions and filters across multiple queries. Avoid redundant indexes on columns already covered by composite indexes. Prioritize indexes on columns with high cardinality and frequent use in WHERE clauses.\"}"], ["train_workload_random_66_6q", "[store_sales(ss_item_sk, ss_sold_date_sk), store_returns(sr_item_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in JOIN conditions and WHERE clauses, especially those with high cardinality and those involved in range queries or aggregations.\"}"], ["train_workload_random_66_6q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses for filtering by date ranges are indexed, especially when they are used in joins or subqueries. Additionally, maintain indexes on columns frequently used in join conditions across large tables to prevent regression in query performance.\"}"], ["train_workload_random_66_6q", "[store_sales(ss_item_sk, ss_sold_date_sk), store_returns(sr_item_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes cover join and filter columns used in the workload queries. Avoid creating indexes that only cover columns not used in joins or filters, as they may not provide performance benefits and could lead to regressions.\"}"], ["train_workload_random_66_6q", "[store_sales(ss_item_sk, ss_sold_date_sk), store_returns(sr_item_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses with range conditions or equality checks, as these are critical for query performance.\"}"], ["train_workload_random_66_6q", "[customer_address(ca_gmt_offset), date_dim(d_date_sk), household_demographics(hd_dep_count), item(i_item_sk), store(s_store_sk), web_returns(wr_order_number), date_dim(d_year), catalog_returns(cr_item_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables or are part of foreign key relationships, as this can lead to redundancy and potential performance regressions. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially those involved in filtering large datasets.\"}"], ["train_workload_random_66_6q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on date columns used in date range filters and on columns involved in join conditions across large tables.\"}"], ["train_workload_random_66_6q", "[store_sales(ss_item_sk, ss_sold_date_sk), store_returns(sr_item_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in join conditions or filters. Prioritize indexing columns that are used in join conditions and filters across multiple queries, especially those with high cardinality and those involved in range queries or aggregations.\"}"], ["train_workload_random_66_6q", "[store_sales(ss_item_sk, ss_sold_date_sk), store_returns(sr_item_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes that only cover filter conditions without considering join conditions, especially when the join conditions involve large tables or are frequently used in the workload.\"}"], ["train_workload_random_66_6q", "[customer_address(ca_gmt_offset), date_dim(d_date_sk), household_demographics(hd_dep_count), item(i_item_sk), store(s_store_sk), web_returns(wr_order_number), date_dim(d_year), catalog_returns(cr_item_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{\"rule\": \"Ensure that indexes cover all join and filter conditions in the workload. Avoid redundant indexes on the same column and ensure that indexes are not missing for frequently joined or filtered columns, especially those with high cardinality or used in WHERE clauses.\"}"], ["train_workload_random_66_6q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included, especially for large tables. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve performance by reducing the need for sorting and additional lookups.\"}"], ["train_workload_random_66_6q", "[store_sales(ss_item_sk, ss_sold_date_sk), store_returns(sr_item_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize indexes on columns frequently used in joins and filters across multiple queries, such as date keys and item keys, to prevent regression in query performance.\"}"], ["train_workload_random_66_6q", " [household_demographics(hd_dep_count), item(i_item_id, i_color), date_dim(d_date), promotion(p_promo_sk), store(s_store_sk), time_dim(t_hour), customer_address(ca_gmt_offset)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across multiple queries. Avoid redundant indexes on columns already covered by composite indexes. Prioritize indexes on columns with high cardinality and frequent use in filtering or joining operations.\"}"], ["train_workload_random_66_6q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Prioritize indexes on columns with high cardinality and those involved in date range filters.\"}"], ["train_workload_random_66_6q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses for filtering by date ranges are indexed, especially when they are used in joins or subqueries. Additionally, maintain indexes on columns frequently used in join conditions across large tables to prevent regression in query performance.\"}"], ["train_workload_random_66_6q", "[customer_address(ca_gmt_offset), date_dim(d_date_sk), household_demographics(hd_dep_count), item(i_item_sk), store(s_store_sk), web_returns(wr_order_number), date_dim(d_year), catalog_returns(cr_item_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes cover the join and filter conditions in the workload queries. Avoid redundant indexes on the same column and prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_66_6q", " [household_demographics(hd_dep_count), item(i_item_id, i_color), date_dim(d_date), promotion(p_promo_sk), store(s_store_sk), time_dim(t_hour), customer_address(ca_gmt_offset)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across all queries in the workload. Prioritize indexes on columns with high cardinality and those frequently used in filtering and joining operations.\"}"], ["train_workload_random_66_6q", "[customer_address(ca_gmt_offset), date_dim(d_date_sk), household_demographics(hd_dep_count), item(i_item_sk), store(s_store_sk), web_returns(wr_order_number), date_dim(d_year), catalog_returns(cr_item_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes, especially when the existing indexes are on primary key or foreign key columns that are frequently used in joins and filters. Ensure that indexes are aligned with the query patterns, focusing on columns used in WHERE clauses, JOIN conditions, and GROUP BY clauses.\"}"], ["train_workload_random_66_6q", " [household_demographics(hd_dep_count), item(i_item_id, i_color), date_dim(d_date), promotion(p_promo_sk), store(s_store_sk), time_dim(t_hour), customer_address(ca_gmt_offset)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes cover the join and filter conditions used in the workload queries. Avoid redundant indexes on columns that are already covered by existing indexes or are not frequently used in join or filter conditions.\"}"], ["train_workload_random_66_6q", "[store_sales(ss_item_sk, ss_sold_date_sk), store_returns(sr_item_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Prioritize indexing columns involved in join conditions and filtering criteria over those used solely for filtering, especially when dealing with large tables. Ensure that indexes on columns used in join conditions are present to optimize query performance.\"}"], ["train_workload_random_66_6q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses for filtering by date range are indexed, especially when they are used in joins or subqueries. Additionally, ensure that columns used in join conditions, such as order numbers or ticket numbers, are indexed to prevent regression in query performance.\"}"], ["train_workload_random_66_6q", "[store_sales(ss_item_sk, ss_sold_date_sk), store_returns(sr_item_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes cover the join and filter conditions in the workload queries. Avoid creating indexes that only cover a single column when multiple columns are frequently used together in joins or filters. Prioritize composite indexes that match the query patterns, especially for large tables with high cardinality columns.\"}"], ["train_workload_random_66_6q", "[customer_address(ca_gmt_offset), date_dim(d_date_sk), household_demographics(hd_dep_count), item(i_item_sk), store(s_store_sk), web_returns(wr_order_number), date_dim(d_year), catalog_returns(cr_item_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in join or filter conditions across multiple queries. Prioritize single-column indexes on columns that are consistently used in WHERE clauses or JOIN conditions across the workload.\"}"], ["train_workload_random_66_6q", "[customer_address(ca_gmt_offset), date_dim(d_date_sk), household_demographics(hd_dep_count), item(i_item_sk), store(s_store_sk), web_returns(wr_order_number), date_dim(d_year), catalog_returns(cr_item_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes cover join and filter columns used in the workload queries, especially for large tables. Avoid redundant indexes on the same column and ensure indexes are not missing for frequently joined or filtered columns like date_dim(d_date_sk), store(s_store_sk), and promotion(p_promo_sk).\"}"], ["train_workload_random_66_6q", " [household_demographics(hd_dep_count), item(i_item_id, i_color), date_dim(d_date), promotion(p_promo_sk), store(s_store_sk), time_dim(t_hour), customer_address(ca_gmt_offset)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_66_6q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in the workload queries. Prioritize composite indexes over single-column indexes when the workload involves complex queries with multiple conditions on the same table.\"}"], ["train_workload_random_66_6q", "[customer_address(ca_gmt_offset), date_dim(d_date_sk), household_demographics(hd_dep_count), item(i_item_sk), store(s_store_sk), web_returns(wr_order_number), date_dim(d_year), catalog_returns(cr_item_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes. Ensure indexes are aligned with the workload's join and filter conditions, focusing on columns frequently used in WHERE clauses and JOIN operations. Prioritize composite indexes over single-column indexes when multiple columns are involved in query conditions.\"}"], ["train_workload_random_66_6q", "[store_sales(ss_item_sk, ss_sold_date_sk), store_returns(sr_item_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes cover the join and filter conditions in the workload queries. Avoid creating indexes that only cover a single column when multiple columns are frequently used together in joins or filters. Prioritize composite indexes that match the query patterns, especially for large tables with high cardinality columns.\"}"], ["train_workload_random_66_6q", "[store_sales(ss_item_sk, ss_sold_date_sk), store_returns(sr_item_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in join conditions or filters. Prioritize indexing columns that are used in join conditions, filters, and have high cardinality, especially in large tables.\"}"], ["train_workload_random_66_6q", " [household_demographics(hd_dep_count), item(i_item_id, i_color), date_dim(d_date), promotion(p_promo_sk), store(s_store_sk), time_dim(t_hour), customer_address(ca_gmt_offset)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes cover the join and filter conditions used in the workload queries. Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently used in join or filter conditions.\"}"], ["train_workload_random_66_6q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on date columns used in date range filters and on columns involved in join conditions across large tables.\"}"], ["train_workload_random_66_6q", " [household_demographics(hd_dep_count), item(i_item_id, i_color), date_dim(d_date), promotion(p_promo_sk), store(s_store_sk), time_dim(t_hour), customer_address(ca_gmt_offset)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and filters with high cardinality are included. Avoid removing indexes on columns that are frequently used in WHERE clauses or JOIN conditions across multiple queries, such as item(i_item_id) and household_demographics(hd_dep_count).\"}"], ["train_workload_random_66_6q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on date columns used in date range filters and on columns involved in join conditions across large tables.\"}"], ["train_workload_random_66_6q", "[store_sales(ss_item_sk, ss_sold_date_sk), store_returns(sr_item_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes that only cover a single column when multiple columns are frequently used together in queries, especially in join operations. Prioritize indexes on columns that are used in WHERE clauses and JOIN conditions across multiple queries in the workload.\"}"], ["train_workload_random_66_6q", "[store_sales(ss_item_sk, ss_sold_date_sk), store_returns(sr_item_sk), date_dim(d_date_sk), item(i_item_sk), web_sales(ws_item_sk), web_returns(wr_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Prioritize indexing columns involved in join conditions and filters with high cardinality, especially for large tables. Avoid indexing columns with low cardinality or those used in less frequent queries.\"}"], ["train_workload_random_66_6q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns used in date range filters and join conditions across large tables, such as date_dim.d_date_sk, store_sales.ss_sold_date_sk, catalog_sales.cs_sold_date_sk, web_sales.ws_sold_date_sk, and store_returns.sr_ticket_number, to prevent regression.\"}"], ["train_workload_random_66_6q", " [household_demographics(hd_dep_count), item(i_item_id, i_color), date_dim(d_date), promotion(p_promo_sk), store(s_store_sk), time_dim(t_hour), customer_address(ca_gmt_offset)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_66_6q", "[customer_address(ca_gmt_offset), date_dim(d_date_sk), household_demographics(hd_dep_count), item(i_item_sk), store(s_store_sk), web_returns(wr_order_number), date_dim(d_year), catalog_returns(cr_item_sk), promotion(p_promo_sk), web_site(web_site_sk), store(s_store_id)]", "[store(s_store_sk), promotion(p_promo_sk), date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk), time_dim(t_hour), customer_address(ca_address_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, and avoid removing indexes on columns frequently used in WHERE clauses for filtering, especially those involving date ranges or specific attributes like 'd_date_sk', 'ca_gmt_offset', and 'hd_dep_count'.\"}"], ["train_workload_random_66_6q", " [household_demographics(hd_dep_count), item(i_item_id, i_color), date_dim(d_date), promotion(p_promo_sk), store(s_store_sk), time_dim(t_hour), customer_address(ca_gmt_offset)]", "[I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure indexes cover columns used in join conditions and filters, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"]], "train_workload_random_71_3q": [["train_workload_random_71_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Ensure all date columns used in WHERE clauses are indexed, especially when they are used in join conditions or have filtering conditions applied to them.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk), promotion(p_promo_sk), date_dim(d_week_seq), item(i_item_sk), customer(c_customer_sk), item(i_item_id), date_dim(d_year), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), store(s_gmt_offset), customer_demographics(cd_marital_status)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for tables with high row counts and frequently queried columns. Prioritize indexes on date columns used in joins and filters, and ensure coverage for columns involved in multiple queries across different tables.\"}"], ["train_workload_random_71_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Ensure all date-related columns used in WHERE clauses are indexed, especially when they are used in join conditions or filters across multiple tables.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk, d_year), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), item(i_item_id, i_item_sk), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already covered by single-column indexes in the improvement set, especially when the workload involves frequent joins on these columns. Instead, focus on single-column indexes that align with the join conditions and filtering criteria in the workload.\"}"], ["train_workload_random_71_3q", " [customer_demographics(cd_marital_status), item(i_item_id), promotion(p_promo_sk), customer_address(ca_address_sk), date_dim(d_date_sk), store(s_gmt_offset), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for columns frequently used in WHERE clauses and JOIN conditions across multiple queries. Prioritize indexes on columns with high cardinality and those involved in complex joins or subqueries.\"}"], ["train_workload_random_71_3q", " [Item(i_item_sk, i_item_id), Promotion(p_promo_sk), Date_dim(d_date_sk, d_moy), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_buy_potential)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in query predicates. Instead, focus on creating single-column indexes on columns that are frequently used in WHERE clauses or JOIN conditions, especially those with high cardinality or those that are part of foreign key relationships.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk), promotion(p_promo_sk), date_dim(d_week_seq), item(i_item_sk), customer(c_customer_sk), item(i_item_id), date_dim(d_year), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), store(s_gmt_offset), customer_demographics(cd_marital_status)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes on frequently joined or filtered columns (e.g., foreign keys, date columns) are available and beneficial for the workload.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk, d_year), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), item(i_item_id, i_item_sk), promotion(p_promo_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included, especially when they are frequently used in the workload. Avoid redundant indexes on the same table unless they cover different query patterns or columns.\"}"], ["train_workload_random_71_3q", " [customer_demographics(cd_marital_status), item(i_item_id), promotion(p_promo_sk), customer_address(ca_address_sk), date_dim(d_date_sk), store(s_gmt_offset), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Ensure that indexes cover the join and filter conditions in the workload queries. Avoid creating indexes that do not align with the query patterns, such as those missing critical join keys or filter columns used in WHERE clauses. Prioritize indexes on columns frequently used in joins and filters, especially those with high cardinality or those involved in range queries.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk, d_year), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), item(i_item_id, i_item_sk), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, as this can lead to redundancy and potential performance regression.\"}"], ["train_workload_random_71_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Prioritize composite indexes on columns frequently used together in joins and filters, especially when they span multiple tables. Avoid redundant indexes that do not contribute to query performance improvement.\"}"], ["train_workload_random_71_3q", " [Item(i_item_sk, i_item_id), Promotion(p_promo_sk), Date_dim(d_date_sk, d_moy), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_buy_potential)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included in the index selection to prevent regression. Avoid redundant indexes on columns that are already covered by composite indexes.\"}"], ["train_workload_random_71_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Ensure all date-related columns used in WHERE clauses are indexed, especially when they are used in join conditions or have filtering conditions applied to them.\"}"], ["train_workload_random_71_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially when they span multiple tables. Avoid redundant indexes that do not improve query performance or cover critical query paths.\"}"], ["train_workload_random_71_3q", " [Item(i_item_sk, i_item_id), Promotion(p_promo_sk), Date_dim(d_date_sk, d_moy), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_buy_potential)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection, especially if they are primary keys or foreign keys. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that indexes cover the most selective columns to optimize query performance.\"}"], ["train_workload_random_71_3q", " [customer_demographics(cd_marital_status), item(i_item_id), promotion(p_promo_sk), customer_address(ca_address_sk), date_dim(d_date_sk), store(s_gmt_offset), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns frequently used in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns with high cardinality and those involved in filtering or joining operations.\"}"], ["train_workload_random_71_3q", " [customer_demographics(cd_marital_status), item(i_item_id), promotion(p_promo_sk), customer_address(ca_address_sk), date_dim(d_date_sk), store(s_gmt_offset), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{rule: \"Ensure that all join keys and frequently filtered columns in the workload are indexed. Avoid removing indexes on columns that are used in join conditions or where clauses across multiple queries, such as date_dim(d_date_sk) and promotion(p_promo_sk).\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk, d_year), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), item(i_item_id, i_item_sk), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid using composite indexes with only one column from a table when the workload involves multiple tables with join conditions. Instead, prioritize single-column indexes on frequently joined columns across different tables to improve query performance.\"}"], ["train_workload_random_71_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Ensure all date-related columns used in WHERE clauses or JOIN conditions are indexed, especially when filtering or joining on date ranges or specific date values.\"}"], ["train_workload_random_71_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially when they span multiple tables. Avoid redundant indexes that do not align with query patterns, such as those missing key join conditions or filter criteria.\"}"], ["train_workload_random_71_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses or JOIN conditions, such as 'cs_sold_date_sk', are indexed to prevent regressions in query performance.\"}"], ["train_workload_random_71_3q", " [customer_demographics(cd_marital_status), item(i_item_id), promotion(p_promo_sk), customer_address(ca_address_sk), date_dim(d_date_sk), store(s_gmt_offset), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and have high cardinality to improve query performance.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk), promotion(p_promo_sk), date_dim(d_week_seq), item(i_item_sk), customer(c_customer_sk), item(i_item_id), date_dim(d_year), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), store(s_gmt_offset), customer_demographics(cd_marital_status)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and where clauses, especially those with high cardinality or frequently filtered, are maintained. Avoid removing indexes on date columns and foreign keys that are critical for query performance, such as date_dim(d_date_sk) and promotion(p_promo_sk), which are used in multiple queries for filtering and joining.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk, d_year), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), item(i_item_id, i_item_sk), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid using composite indexes with only one column from a table when multiple columns are frequently used in joins or filters. Instead, create composite indexes that include all relevant columns used together in queries to improve performance.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk, d_year), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), item(i_item_id, i_item_sk), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves multiple joins on these columns. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions separately to improve query performance.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk, d_year), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), item(i_item_id, i_item_sk), promotion(p_promo_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid redundant indexes on the same table with overlapping columns unless they serve distinct query patterns. Prioritize indexes that align with the most frequently used join keys and filter conditions in the workload.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk), promotion(p_promo_sk), date_dim(d_week_seq), item(i_item_sk), customer(c_customer_sk), item(i_item_id), date_dim(d_year), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), store(s_gmt_offset), customer_demographics(cd_marital_status)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk, d_year), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), item(i_item_id, i_item_sk), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for the workload. Prioritize single-column indexes on frequently joined or filtered columns, especially primary keys or foreign keys, to prevent unnecessary complexity and potential performance regressions.\"}"], ["train_workload_random_71_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{rule: \"Ensure that all necessary join keys and frequently filtered columns are indexed, especially those used in WHERE clauses and JOIN conditions. Avoid removing indexes on columns that are used in multiple queries across the workload, such as 'date_dim.d_date_sk' and 'catalog_returns.cr_order_number', as these are critical for query performance.\"}"], ["train_workload_random_71_3q", " [Item(i_item_sk, i_item_id), Promotion(p_promo_sk), Date_dim(d_date_sk, d_moy), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_buy_potential)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection, especially if they are primary keys or foreign keys, as this can lead to redundancy and potential performance regression.\"}"], ["train_workload_random_71_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses or JOIN conditions, such as date_sk columns, are indexed to prevent regressions in query performance.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk, d_year), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), item(i_item_id, i_item_sk), promotion(p_promo_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{rule: \"Avoid creating separate indexes on columns that are frequently used together in join conditions or filters. Instead, create composite indexes that cover multiple columns used in the same query to improve performance. For example, if a query frequently joins on 'date_dim(d_date_sk)' and filters on 'date_dim(d_year)', a composite index on both columns would be more efficient than separate indexes.\"}"], ["train_workload_random_71_3q", " [customer_demographics(cd_marital_status), item(i_item_id), promotion(p_promo_sk), customer_address(ca_address_sk), date_dim(d_date_sk), store(s_gmt_offset), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_71_3q", " [customer_demographics(cd_marital_status), item(i_item_id), promotion(p_promo_sk), customer_address(ca_address_sk), date_dim(d_date_sk), store(s_gmt_offset), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and have high cardinality to improve query performance.\"}"], ["train_workload_random_71_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{\"rule\": \"Ensure that all necessary join keys and frequently filtered columns are indexed. Avoid removing indexes on columns that are used in join conditions or where clauses across multiple queries, such as 'date_dim.d_date_sk' and 'catalog_returns.cr_order_number', as this can lead to performance regressions.\"}"], ["train_workload_random_71_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Ensure all date-related columns used in WHERE clauses or JOIN conditions are indexed, especially when filtering or joining on date ranges or specific date values.\"}"], ["train_workload_random_71_3q", " [customer_demographics(cd_marital_status), item(i_item_id), promotion(p_promo_sk), customer_address(ca_address_sk), date_dim(d_date_sk), store(s_gmt_offset), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid creating indexes with prefix 'I(C ' as they may indicate unnecessary or redundant indexes on columns already covered by more efficient indexes in the improvement set.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk), promotion(p_promo_sk), date_dim(d_week_seq), item(i_item_sk), customer(c_customer_sk), item(i_item_id), date_dim(d_year), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), store(s_gmt_offset), customer_demographics(cd_marital_status)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize indexing columns involved in multiple queries and those used in WHERE clauses, JOIN conditions, and GROUP BY clauses. Avoid omitting indexes on columns that are frequently used across different queries, such as date columns and foreign keys.\"}"], ["train_workload_random_71_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Ensure all date-related columns used in WHERE clauses or JOIN conditions are indexed, especially when filtering or joining on date ranges or specific date values.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk, d_year), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), item(i_item_id, i_item_sk), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid creating indexes with the 'I(C ...)' pattern, as they may lead to regression. Instead, focus on indexes that directly target frequently joined or filtered columns, especially those involved in WHERE clauses and JOIN conditions, as seen in the improvement index selection.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk), promotion(p_promo_sk), date_dim(d_week_seq), item(i_item_sk), customer(c_customer_sk), item(i_item_id), date_dim(d_year), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), store(s_gmt_offset), customer_demographics(cd_marital_status)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize indexing columns involved in multiple queries and those used in WHERE clauses for filtering, such as date columns and foreign keys. Avoid omitting indexes on columns that are frequently used in join conditions across different queries.\"}"], ["train_workload_random_71_3q", " [Item(i_item_sk, i_item_id), Promotion(p_promo_sk), Date_dim(d_date_sk, d_moy), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_buy_potential)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already covered by single-column indexes in the improvement selection, especially when the workload involves frequent joins and filters on those columns.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk), promotion(p_promo_sk), date_dim(d_week_seq), item(i_item_sk), customer(c_customer_sk), item(i_item_id), date_dim(d_year), household_demographics(hd_buy_potential), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), store(s_gmt_offset), customer_demographics(cd_marital_status)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes on frequently joined or filtered columns (e.g., foreign keys, date columns) are more effective. Prioritize indexes on columns involved in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_71_3q", " [Item(i_item_sk, i_item_id), Promotion(p_promo_sk), Date_dim(d_date_sk, d_moy), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_buy_potential)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for columns involved in multiple queries or large tables. Prioritize indexes on columns with high cardinality and those frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_71_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses or JOIN conditions, such as 'cs_sold_date_sk' and 'd_date_sk', have corresponding indexes to prevent regression in query performance.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk, d_year), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), item(i_item_id, i_item_sk), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance.\"}"], ["train_workload_random_71_3q", " [Item(i_item_sk, i_item_id), Promotion(p_promo_sk), Date_dim(d_date_sk, d_moy), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_buy_potential)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize indexes on columns involved in multiple queries, especially those with high cardinality and frequent use in WHERE clauses. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_71_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Ensure all date-related columns used in WHERE clauses are indexed, especially when they are used in join conditions or filtering by specific date ranges.\"}"], ["train_workload_random_71_3q", " [Item(i_item_sk, i_item_id), Promotion(p_promo_sk), Date_dim(d_date_sk, d_moy), Customer_address(ca_address_sk), Customer(c_customer_sk), Household_demographics(hd_buy_potential)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are part of foreign key relationships, especially when the workload involves complex joins and aggregations. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions that are not already indexed, and ensure that indexes are not redundant or overlapping with existing ones.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk, d_year), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), item(i_item_id, i_item_sk), promotion(p_promo_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_id), customer(c_customer_sk), store(s_gmt_offset)]", "{rule: \"Avoid creating multiple indexes on the same table with overlapping columns unless necessary. Prioritize indexes that cover the most frequently joined or filtered columns across multiple queries.\"}"], ["train_workload_random_71_3q", "[date_dim(d_date_sk, d_year), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), item(i_item_id, i_item_sk), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and have high cardinality. Ensure indexes are aligned with the workload's query patterns, focusing on columns that are frequently filtered or joined.\"}"]], "train_workload_random_72_5q": [["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining operations across multiple queries.\"}"], ["train_workload_random_72_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating separate indexes on columns that are frequently joined together in queries. Instead, create composite indexes on these columns to improve query performance. For example, instead of separate indexes on catalog_returns(cr_order_number) and catalog_returns(cr_item_sk), create a composite index on (cr_item_sk, cr_order_number).\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Ensure that all date-related columns used in WHERE clauses for filtering by date range, such as 'cs_sold_date_sk', 'ss_sold_date_sk', 'ws_sold_date_sk', and 'd_date_sk', are indexed to prevent regression in query performance.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining operations across multiple queries.\"}"], ["train_workload_random_72_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating multiple indexes on the same table for columns that are frequently joined together, as it can lead to regression. Instead, create composite indexes for these columns to optimize join operations.\"}"], ["train_workload_random_72_5q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), household_demographics(hd_buy_potential), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk), store(s_store_sk), web_site(web_site_sk), date_dim(d_year), store_returns(sr_item_sk), customer(c_customer_sk), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), catalog_returns(cr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are part of foreign key relationships, especially when they are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently filtered or joined in queries, and ensure that indexes are not redundant with existing ones.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes on date columns used in WHERE clauses, especially those involving date ranges, are composite indexes including both the date and its surrogate key. Additionally, maintain indexes on surrogate keys of dimension tables that are frequently joined in queries.\"}"], ["train_workload_random_72_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already part of a foreign key relationship or are frequently used in join conditions, as they may lead to unnecessary complexity and potential performance regressions. Instead, focus on single-column indexes that directly support the most common query patterns, such as filtering and joining.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or GROUP BY operations, as these are critical for query performance. Prioritize maintaining single-column indexes on primary keys and foreign keys over multi-column indexes unless the multi-column index is specifically optimized for a frequent query pattern.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid indexing columns with low cardinality or columns that are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses with high cardinality and columns that are frequently used in GROUP BY or ORDER BY clauses.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Ensure that all date-related columns used in WHERE clauses for filtering by date ranges, such as 'd_date_sk', 'cs_sold_date_sk', 'ss_sold_date_sk', and 'ws_sold_date_sk', have indexes to prevent regression in query performance. Additionally, maintain indexes on columns frequently used in JOIN conditions, such as 'i_item_sk', 'cs_order_number', and 'sr_ticket_number', to optimize join operations.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions with large tables unless they are also used in filtering conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Ensure that all date-related columns used in WHERE clauses for filtering by date range, such as 'cs_sold_date_sk', 'ss_sold_date_sk', 'ws_sold_date_sk', and 'd_date_sk', are indexed to prevent regression in query performance. Additionally, maintain indexes on primary key columns and frequently joined columns like 'c_customer_sk' and 'ws_item_sk' to optimize join operations.\"}"], ["train_workload_random_72_5q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), household_demographics(hd_buy_potential), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk), store(s_store_sk), web_site(web_site_sk), date_dim(d_year), store_returns(sr_item_sk), customer(c_customer_sk), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), catalog_returns(cr_item_sk)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless the composite index significantly improves query performance. Prioritize single-column indexes for frequently joined or filtered columns, especially in large tables.\"}"], ["train_workload_random_72_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating separate indexes on columns that are frequently joined together in queries, such as (cs_item_sk, cr_item_sk) or (wr_order_number, wr_item_sk). Instead, consider composite indexes on these pairs to optimize join operations and prevent regression.\"}"], ["train_workload_random_72_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used in join conditions with other columns. Instead, focus on creating composite indexes that cover multiple columns used together in queries, especially those involved in join operations and filtering conditions.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining operations across multiple queries.\"}"], ["train_workload_random_72_5q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), household_demographics(hd_buy_potential), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk), store(s_store_sk), web_site(web_site_sk), date_dim(d_year), store_returns(sr_item_sk), customer(c_customer_sk), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), catalog_returns(cr_item_sk)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions, especially for large tables. Prioritize indexing on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as date_dim(d_date_sk), item(i_item_sk), and promotion(p_promo_sk). Avoid redundant indexes on columns already covered by other indexes, and consider the selectivity and size of the tables when choosing indexes.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on columns frequently used in WHERE clauses, especially those involving date ranges or joins, are maintained. Avoid removing indexes on primary key or foreign key columns that are frequently used in joins or filters, such as date_dim.d_date_sk and catalog_sales.cs_sold_date_sk.\"}"], ["train_workload_random_72_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{\"rule\": \"Avoid creating indexes on columns that are not used in join conditions or where clauses in the workload queries, as they may lead to unnecessary overhead without improving query performance. Focus on indexing columns that are frequently used in join conditions, filtering, or sorting operations.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes on date columns are created using the surrogate key (e.g., d_date_sk) rather than the actual date (e.g., d_date) to avoid performance regressions. Additionally, prioritize composite indexes on frequently joined columns across tables, especially when they are used in WHERE clauses and JOIN conditions, to maintain query performance.\"}"], ["train_workload_random_72_5q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), household_demographics(hd_buy_potential), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk), store(s_store_sk), web_site(web_site_sk), date_dim(d_year), store_returns(sr_item_sk), customer(c_customer_sk), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), catalog_returns(cr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement set, especially if they are part of composite indexes or frequently used in join conditions. Prioritize indexing columns that are used in WHERE clauses, GROUP BY, and ORDER BY operations, and ensure that indexes cover the most selective columns to optimize query performance.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining operations across multiple queries.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that all indexed columns in the regression index are used in join or filter conditions in the workload queries. Remove indexes on columns that are not used in such conditions to avoid unnecessary overhead.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on columns frequently used in WHERE clauses, such as date columns (e.g., cs_sold_date_sk, d_date_sk), are maintained to prevent regression. Additionally, maintain indexes on primary key columns (e.g., customer_sk) that are used in joins to optimize query performance.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_72_5q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), household_demographics(hd_buy_potential), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk), store(s_store_sk), web_site(web_site_sk), date_dim(d_year), store_returns(sr_item_sk), customer(c_customer_sk), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), catalog_returns(cr_item_sk)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries, especially for large tables. Avoid redundant indexes and prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions. Consider the cardinality and selectivity of columns when choosing indexes.\"}"], ["train_workload_random_72_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already part of a join condition or are frequently used in WHERE clauses, as they may lead to regression by increasing index maintenance overhead without significant query performance improvement. Instead, focus on single-column indexes for such columns.\"}"], ["train_workload_random_72_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns that are not used in join conditions or where clauses in the workload queries, as they may lead to unnecessary overhead without improving query performance. Focus on indexing columns that are frequently used in joins and filters.\"}"], ["train_workload_random_72_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as they may lead to redundant indexing and potential performance regressions. Focus on indexing columns that are used in filtering conditions and are not already indexed by primary or foreign keys.\"}"], ["train_workload_random_72_5q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), household_demographics(hd_buy_potential), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk), store(s_store_sk), web_site(web_site_sk), date_dim(d_year), store_returns(sr_item_sk), customer(c_customer_sk), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), catalog_returns(cr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns with prefix 'I(C ' indicating they are part of a composite index, as they may lead to regression by not aligning with the workload's query patterns. Instead, focus on individual columns frequently used in WHERE clauses or JOIN conditions, as seen in the improvement index selection.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns.\"}"], ["train_workload_random_72_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating separate indexes on columns that are already part of a composite index in the improvement selection, as this can lead to redundancy and potential regression in performance. Focus on maintaining composite indexes that align with the join and filter conditions in the workload.\"}"], ["train_workload_random_72_5q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), household_demographics(hd_buy_potential), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk), store(s_store_sk), web_site(web_site_sk), date_dim(d_year), store_returns(sr_item_sk), customer(c_customer_sk), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), catalog_returns(cr_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already covered by existing indexes or are part of foreign key relationships, especially if they are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently filtered or joined in queries, and ensure that indexes are not redundant with existing ones.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining operations across multiple queries.\"}"], ["train_workload_random_72_5q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), household_demographics(hd_buy_potential), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk), store(s_store_sk), web_site(web_site_sk), date_dim(d_year), store_returns(sr_item_sk), customer(c_customer_sk), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), catalog_returns(cr_item_sk)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid redundant indexes on columns that are already covered by other indexes in the workload. Prioritize indexing columns involved in join conditions and filters that are frequently used across multiple queries. Ensure indexes are created on columns with high cardinality and those that significantly impact query performance, such as those used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_72_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used in join conditions with other columns. Instead, focus on creating composite indexes that cover multiple columns used together in queries, especially those involved in join operations and filtering conditions.\"}"], ["train_workload_random_72_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Focus on columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Additionally, prioritize indexes on columns with high cardinality and those that are part of composite keys used in joins.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions with high cardinality columns. Prioritize indexing columns that are used in WHERE clauses, have high cardinality, and are frequently involved in join operations.\"}"], ["train_workload_random_72_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index covering the same query patterns, as this can lead to redundant indexes and potential regressions. Instead, focus on composite indexes that cover multiple columns used together in join or filter conditions.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_72_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be already optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions that are not covered by existing indexes.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns used in WHERE clauses and JOIN conditions across multiple queries, especially for columns with high cardinality or frequently used in filtering operations. Avoid removing indexes that are used in multiple queries, such as date columns or primary keys, unless they are proven to be redundant.\"}"], ["train_workload_random_72_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be already optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions that are not covered by existing indexes.\"}"], ["train_workload_random_72_5q", "[promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk), household_demographics(hd_buy_potential), date_dim(d_week_seq), catalog_page(cp_catalog_page_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), customer_demographics(cd_demo_sk), store(s_store_sk), web_site(web_site_sk), date_dim(d_year), store_returns(sr_item_sk), customer(c_customer_sk), web_sales(ws_item_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status), catalog_returns(cr_item_sk)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables when they are used in join conditions across multiple tables. Prioritize indexing columns that are frequently used in WHERE clauses and GROUP BY operations, especially if they are not already indexed in other tables.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all primary key columns used in join conditions are indexed, especially when they are frequently used in the workload. In this case, the regression index selection missed indexing 'customer.c_customer_sk' and 'catalog_sales.cs_sold_date_sk', which are crucial for the workload's performance.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_date, d_week_seq, d_year), customer_demographics(cd_marital_status, cd_demo_sk), customer_address(ca_state, ca_address_sk), web_returns(wr_item_sk, wr_order_number), customer(c_customer_sk), store(s_store_id), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on primary keys and foreign keys that are consistently used across multiple queries.\"}"], ["train_workload_random_72_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number)]", "[catalog_sales(cs_item_sk), date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), item(i_item_id), item(i_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these are likely to be covered by existing indexes or constraints. Focus on indexing columns that are used in filtering conditions and are not part of existing indexes.\"}"], ["train_workload_random_72_5q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns used in WHERE clauses and JOIN conditions across multiple queries, especially for high cardinality columns like date keys and customer keys. Avoid removing indexes on such columns unless they are proven to be redundant or not beneficial for the workload.\"}"]], "train_workload_random_73_8q": [["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure all tables involved in join operations have indexes on their join keys. In this case, the regression index selection is missing an index on 'catalog_sales.cs_sold_date_sk', which is crucial for optimizing queries involving joins with 'date_dim' on 'cs_sold_date_sk'. Add this index to prevent potential regressions.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as they may lead to redundant indexing and potential performance regressions. Prioritize indexing columns that are used in WHERE clauses, GROUP BY, and ORDER BY operations, especially if they are not part of existing indexes or foreign key constraints.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily filtered or joined in the workload queries, especially if they are part of large tables. Instead, prioritize indexing columns that are frequently used in WHERE clauses or JOIN conditions across multiple queries, particularly those involving smaller tables or those with high cardinality.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used in join conditions across multiple queries. Instead, prioritize indexing columns that are used in WHERE clauses and GROUP BY operations, especially if they are used in multiple queries. Additionally, ensure that indexes cover the most selective columns to optimize query performance.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes with only one column when a single-column index already exists for that column, as it may lead to redundancy and potential performance regression.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition with another indexed column, especially if the join condition is frequently used in the workload. Prioritize indexing columns that are used in WHERE clauses and GROUP BY operations without existing indexes.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are maintained, especially for high cardinality columns and those frequently used in WHERE clauses. Avoid removing indexes on columns that are part of foreign key relationships or are frequently used in subqueries and aggregations.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries. Prioritize indexing columns involved in frequent joins and filters, especially those with high cardinality or used in range queries. Avoid redundant indexes and ensure indexes are not missing for critical join conditions.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions with large tables, unless they are also used in filtering conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily filtered or joined in the workload, as they may not provide additional performance benefits. Instead, focus on indexing columns that are frequently used in WHERE clauses or JOIN conditions but are not already indexed, especially if they are used in multiple queries across the workload.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently used in the workload. Consider the size of the tables and the frequency of the columns in the workload when selecting indexes.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure all tables involved in join operations have indexes on their join keys. In this case, the regression index selection is missing an index on 'catalog_sales.cs_sold_date_sk', which is crucial for efficient query execution involving date-based filtering and joins.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes on columns used in join conditions and filters, especially for large tables. Prioritize composite indexes for columns frequently used together in join conditions and filters. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index unless the composite index is not used in the workload. Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are maintained, especially for large tables. Avoid dropping indexes on columns frequently used in WHERE clauses or as join keys, such as date_dim(d_date_sk), item(i_item_id, i_item_sk), and customer_address(ca_address_sk).\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions with large tables, unless they are also used in filtering conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, especially when they are part of smaller tables or dimensions.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering conditions are consistently applied across all tables involved in the workload. Prioritize indexing on columns that are frequently used in join operations and have high cardinality, such as primary keys or unique identifiers, to optimize query performance and prevent regression.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure indexes cover join and filter conditions. Avoid indexes that only partially cover join conditions or that do not include frequently filtered columns. Prioritize composite indexes that cover both join and filter conditions in queries.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns frequently used in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns with high cardinality and those involved in filtering or joining operations.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions with large tables unless they are also used in filtering conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and filtering predicates are consistently applied across all tables involved in the workload. Prioritize indexing on columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or those involved in complex queries with multiple joins and subqueries.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index unless the workload specifically benefits from single-column access patterns. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns frequently used in WHERE clauses or JOIN conditions. Prioritize single-column indexes for columns with high cardinality or frequent filtering.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are consistently applied across all related tables in the workload. Avoid removing indexes on columns that are frequently used in join conditions, such as item_sk and order_number, as this can lead to performance regressions.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions but have high cardinality, as they may lead to performance regressions. Prioritize indexing columns that are used in WHERE clauses with high cardinality and columns that are frequently used in join conditions with low cardinality.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in join conditions, especially when they are part of large tables or frequently joined tables, such as 'item_sk' in sales and returns tables.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or as part of join conditions, as this can lead to performance regressions.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid multi-column indexes when single-column indexes suffice for join conditions and filtering. Prioritize single-column indexes on frequently joined and filtered columns across large tables.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions with large tables unless they are also used in filtering conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, especially in smaller tables, to improve query performance.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. If an index is removed or replaced, verify that all critical join and filter columns are still indexed. Specifically, maintain indexes on columns frequently used in joins and filters across large tables, such as 'order_number' and 'item_sk' in sales and returns tables, and 'date_sk' in date_dim.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns frequently used in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns with high cardinality and those involved in filtering or joining operations.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are consistently applied across all tables involved in the workload. Avoid removing indexes on columns that are frequently used in join conditions or as filters in WHERE clauses, especially when they are part of large tables or tables with high cardinality.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are prioritized over indexes on columns used in filtering conditions. Additionally, avoid redundant indexes on columns that are already covered by composite indexes.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses, GROUP BY, and ORDER BY operations, especially if they are involved in filtering large datasets. Consider the workload patterns and ensure indexes support the most common query paths efficiently.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure all tables involved in join operations have indexes on their join keys. Specifically, check for missing indexes on columns used in join conditions across all queries in the workload.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid multi-column indexes when single-column indexes suffice for query conditions. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions individually, especially when they are used across multiple queries.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are prioritized, especially for large tables. Avoid redundant indexes on columns that are already covered by composite indexes. Consider the selectivity and frequency of use of columns in WHERE clauses when choosing indexes.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently used in the workload. For example, maintain indexes on columns like 'item_sk' and 'order_number' in tables with high row counts, such as 'store_sales', 'catalog_sales', and 'web_sales', to prevent regression.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all fact tables involved in the workload have indexes on their date keys, as missing such indexes can lead to regressions in query performance. Specifically, verify that indexes on columns like 'cs_sold_date_sk' in 'catalog_sales' are not omitted.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Ensure that composite indexes in the regression selection do not include columns that are not frequently queried together in the workload. Consider splitting composite indexes into individual indexes if the columns are used independently in different queries.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes on columns used in join conditions and filters, especially for large tables. Prioritize composite indexes for columns frequently used together in join conditions and filters to optimize query performance.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. If an index is removed or replaced, verify that all critical join and filter columns are still indexed. Specifically, maintain indexes on columns frequently used in joins and filters across large tables, such as 'order_number' and 'item_sk' in sales and returns tables, and 'date_sk' in date_dim.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are maintained, especially for large tables. Avoid dropping indexes on columns frequently used in WHERE clauses or as join keys, such as date_dim(d_date_sk), item(i_item_id, i_item_sk), and customer_address(ca_address_sk).\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid multi-column indexes when single-column indexes suffice for join conditions and filtering. Prioritize single-column indexes on frequently joined and filtered columns across large tables.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions with large tables unless they are also used in filtering conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, especially in smaller tables.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure all tables involved in join operations have indexes on their join keys. In the regression index selection, the index on 'catalog_sales.cs_sold_date_sk' is missing, which is crucial for efficient join operations with 'date_dim'.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are consistently applied across all related tables in the workload. Prioritize indexing on columns that are frequently used in WHERE clauses and join conditions, especially those with high cardinality or involved in range queries. Avoid redundant indexes on columns that are already covered by composite indexes.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns are prioritized. Avoid redundant indexes on columns that are already covered by existing indexes or are not frequently used in filtering or joining operations.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in join conditions, such as item_sk and order_number, which are critical for performance in large tables like store_returns and web_returns.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes with only one column when a single-column index is sufficient. Ensure that indexes cover the most frequently queried columns and join conditions, especially for large tables. Prioritize indexing columns used in WHERE clauses and JOIN conditions over those used in SELECT or ORDER BY clauses. Consider the data distribution and query patterns to avoid redundant or less beneficial indexes.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid multi-column indexes when single-column indexes suffice for join conditions and filtering. Prioritize single-column indexes on frequently joined and filtered columns across large tables.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions with large tables unless they are also used in filtering conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in join conditions, especially when they are part of large tables or frequently queried tables. Consider the workload's use of date ranges and ensure indexes support date filtering efficiently.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes with prefix 'I(C' on columns that are already indexed in the improvement set, especially if they are part of foreign key relationships or frequently used in joins. Instead, focus on optimizing existing indexes or creating composite indexes that align with the workload's query patterns.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or as join keys, such as item(i_item_id, i_item_sk) and promotion(p_promo_sk), as these are critical for query performance.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions with large tables unless they are also used in filtering conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid indexes that only partially cover join conditions or filter predicates, as they may lead to regressions.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure all tables involved in join operations have indexes on their join keys. Specifically, check for missing indexes on columns used in join conditions across all queries in the workload.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or as join keys, such as item(i_item_id, i_item_sk) and promotion(p_promo_sk), as these are critical for query performance.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and where clauses are consistently applied across all tables involved in the queries. Prioritize indexing on columns that are frequently used in join conditions and filters, especially those with high cardinality or those that are part of large tables. Avoid redundant indexes on columns that are already covered by composite indexes or those that do not significantly contribute to query performance improvements.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together. Consider the workload's most common join and filter patterns when selecting indexes.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or as join keys, as this can lead to performance regressions.\"}"], ["train_workload_random_73_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), item(i_item_sk), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "```json\n{\n  \"rule\": \"Ensure that composite indexes in the regression selection do not replace single-column indexes that are frequently used in join conditions or where clauses. Maintain single-column indexes for columns that are used independently in multiple queries, such as date_dim(d_date_sk) and item(i_item_sk), to prevent regression in query performance.\"\n}\n```"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", "[date_dim(d_date_sk), customer_address(ca_state), promotion(p_promo_sk), item(i_item_sk), web_sales(ws_item_sk), store_returns(sr_ticket_number), store(s_store_sk), store_sales(ss_item_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns in WHERE clauses are prioritized. Avoid redundant indexes on columns that are already covered by existing indexes or are not frequently used in filtering or joining operations.\"}"], ["train_workload_random_73_8q", "[date_dim(d_date_sk), item(i_item_id, i_item_sk), customer_address(ca_state), web_returns(wr_return_amt, wr_order_number), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), date_dim(d_year), catalog_returns(cr_item_sk), store(s_store_sk)]", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk), web_returns(wr_item_sk, wr_order_number)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in join conditions, such as item_sk and order_number, as seen in the regression index selection where indexes on store_returns(sr_item_sk) and web_returns(wr_item_sk, wr_order_number) were added but not on catalog_returns(cr_item_sk).\"}"]], "train_workload_random_74_7q": [["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions in the workload. Instead, focus on indexing columns that are frequently filtered or joined, especially those with high cardinality, to improve query performance.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{\"rule\": \"Ensure that multi-column indexes in the regression selection do not omit critical columns from the improvement selection that are frequently used in join conditions or filters, such as 'store_sales(ss_sold_date_sk, ss_item_sk)' and 'catalog_sales(cs_sold_date_sk, cs_item_sk)'. Additionally, avoid replacing single-column indexes with multi-column indexes that do not cover all necessary query patterns, as seen with 'item(i_item_sk)' being replaced by 'item(i_item_sk, i_manager_id, i_manufact_id)'.\"}"], ["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained or added, especially when they are frequently used in the workload queries. Avoid removing indexes on columns that are used in join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{rule: \"Avoid creating multi-column indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Prioritize single-column indexes on columns that are consistently used in filtering or joining operations across the workload.\"}"], ["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are involved in frequent JOINs or WHERE conditions, especially those with high cardinality.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{rule: \"Avoid creating multi-column indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Focus on single-column indexes for columns that are consistently used in filtering or joining operations.\"}"], ["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or high correlation with other indexed columns, especially when they are not frequently used in WHERE clauses or JOIN conditions in the workload.\"}"], ["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in the workload. Focus on single-column indexes for columns that are consistently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, for tables involved in multiple queries, such as 'date_dim', 'item', 'customer_address', and 'store_sales', ensure indexes are created on columns frequently used in joins and filters, like 'd_date_sk', 'i_item_sk', 'ca_address_sk', and 'ss_sold_date_sk'. Avoid regression by maintaining indexes that support the most complex queries in the workload.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{\"rule\": \"Avoid creating multi-column indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Focus on single-column indexes for columns that are consistently used in filtering or joining operations, especially in high-frequency tables.\"}"], ["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or high correlation with other indexed columns, especially when they are not frequently used in WHERE clauses or JOIN conditions in the workload.\"}"], ["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in the workload queries. Focus on single-column indexes for high cardinality columns that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained or added, especially when they are frequently used in the workload queries. Avoid removing indexes on columns that are part of join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{\"rule\": \"Ensure that multi-column indexes do not include columns that are not frequently used together in WHERE clauses or JOIN conditions across the workload. Prioritize single-column indexes on columns that are consistently used in WHERE clauses or JOIN conditions, especially for large tables.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that indexes cover all frequently joined and filtered columns in the workload. Avoid removing indexes on columns that are part of frequent joins or filters, especially in large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{\"rule\": \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions across multiple queries. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in join conditions or filters in the workload. Instead, prioritize indexing columns that are frequently used in join conditions, filters, or aggregations, especially those with high cardinality.\"}"], ["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{rule: \"Avoid creating composite indexes that include columns not used together in query predicates. Focus on single-column indexes for frequently filtered columns and ensure indexes align with join conditions and filter criteria in the workload.\"}"], ["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions in the workload. Prioritize indexing columns that are involved in frequent filtering, joining, or aggregation operations, especially those with high cardinality.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{\"rule\": \"Ensure that multi-column indexes do not include columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses across multiple queries in the workload.\"}"], ["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, especially those involved in JOIN operations across large tables.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{\"rule\": \"Ensure that multi-column indexes do not include columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially those with high cardinality, such as primary keys or foreign keys. Avoid creating multi-column indexes that include columns with low cardinality or that are not used together in the workload.\"}"], ["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained or added, especially when they are frequently used in the workload queries. Avoid removing indexes on columns that are part of join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in the workload. Focus on single-column indexes for columns that are consistently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{\"rule\": \"Ensure that indexes cover all frequently joined and filtered columns in the workload. Avoid removing indexes on columns that are used in join conditions or where clauses across multiple queries, especially if they are part of large tables or frequently queried tables.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{\"rule\": \"Ensure that multi-column indexes do not omit frequently joined columns or columns used in WHERE clauses across multiple queries. Specifically, maintain indexes on columns that are frequently used together in joins or filters, such as (cs_sold_date_sk, cs_item_sk) and (ws_sold_date_sk, ws_item_sk), to prevent regression in query performance.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that all tables involved in join operations and filtering conditions in the workload have appropriate indexes on the columns used in these operations. Specifically, avoid removing indexes on columns that are frequently used in join conditions or where clauses, as seen with the missing indexes on 'date_dim(d_date_sk)', 'store(s_store_sk)', 'item(i_item_sk)', 'promotion(p_promo_sk)', 'web_site(web_site_sk)', 'catalog_page(cp_catalog_page_sk)', 'customer(c_customer_sk)', 'customer_address(ca_address_sk)', 'catalog_sales(cs_sold_date_sk, cs_item_sk)', 'web_returns(wr_item_sk)', 'web_sales(ws_sold_date_sk, ws_item_sk)', 'catalog_returns(cr_item_sk)', 'store_sales(ss_sold_date_sk, ss_item_sk)' in the regression index selection.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{\"rule\": \"Ensure that multi-column indexes do not include columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently used in WHERE clauses, JOIN conditions, or GROUP BY clauses across multiple queries.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that all foreign key columns used in join conditions across multiple queries are indexed. Avoid removing indexes on columns that are frequently used in join conditions, especially when they are part of large tables or are used in multiple queries.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{\"rule\": \"Ensure that multi-column indexes do not omit frequently joined columns or columns used in WHERE clauses. Avoid creating multi-column indexes that do not align with the query patterns, especially when the workload involves complex joins and filters across multiple tables. Prioritize single-column indexes on primary keys and foreign keys that are frequently used in joins and WHERE clauses.\"}"], ["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained or added, especially when they are frequently used in the workload queries. Avoid removing indexes on columns that are used in join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_74_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{\"rule\": \"Avoid creating composite indexes that include columns not frequently used together in the workload. Focus on single-column indexes for columns that are consistently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[store_returns(sr_cdemo_sk), customer_demographics(cd_demo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, for queries involving multiple tables, indexes should be created on columns used in join conditions and frequently used filter conditions across all tables involved in the query.\"}"], ["train_workload_random_74_7q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), web_returns(wr_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), store_sales(ss_sold_date_sk, ss_item_sk), store_returns(sr_cdemo_sk)]", "[item(i_item_sk, i_manager_id, i_manufact_id), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), store_returns(sr_cdemo_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_week_seq), web_site(web_site_sk), store(s_store_id)]", "{rule: \"Avoid creating multi-column indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Focus on single-column indexes for columns that are consistently used in filtering or joining operations.\"}"]], "train_workload_random_75_8q": [["train_workload_random_75_8q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by not optimizing for specific query patterns. Instead, focus on single-column indexes for join keys and filter conditions that are consistently used across the workload.\"}"], ["train_workload_random_75_8q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join involves large tables. Instead, prioritize indexing columns that are used in filtering conditions and have high cardinality, as well as columns that are part of the primary key or foreign key relationships.\"}"], ["train_workload_random_75_8q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), household_demographics(hd_dep_count), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_item_sk), store(s_store_id), store(s_store_sk), web_site(web_site_sk), promotion(p_promo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes cover both join keys and frequently filtered columns. Avoid creating indexes that only cover one aspect, such as join keys without considering filtering columns, as this can lead to regressions in query performance.\"}"], ["train_workload_random_75_8q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), household_demographics(hd_dep_count), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_item_sk), store(s_store_id), store(s_store_sk), web_site(web_site_sk), promotion(p_promo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes with only one column from a table when multiple columns from the same table are frequently used together in queries. Instead, create composite indexes that include all frequently queried columns from the same table to optimize query performance.\"}"], ["train_workload_random_75_8q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), household_demographics(hd_dep_count), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_item_sk), store(s_store_id), store(s_store_sk), web_site(web_site_sk), promotion(p_promo_sk)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included, especially when they are frequently used in the workload. Additionally, consider composite indexes for columns that are often queried together, such as (wr_order_number, wr_item_sk) and (cr_item_sk, cr_order_number), to optimize query performance.\"}"], ["train_workload_random_75_8q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), household_demographics(hd_dep_count), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_item_sk), store(s_store_id), store(s_store_sk), web_site(web_site_sk), promotion(p_promo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "```json\n{\n  \"rule\": \"Avoid creating composite indexes with only one column from each table when multiple columns from the same table are frequently used together in queries. Instead, create composite indexes that include all relevant columns from the same table that are used together in the workload.\"\n}\n```"], ["train_workload_random_75_8q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses with high cardinality or are part of complex expressions that are not optimized by default.\"}"], ["train_workload_random_75_8q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), household_demographics(hd_dep_count), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_item_sk), store(s_store_id), store(s_store_sk), web_site(web_site_sk), promotion(p_promo_sk)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included, especially when they are frequently used in the workload. Additionally, consider composite indexes for columns that are often queried together, such as (i_item_sk, i_item_id) and (wr_order_number, wr_item_sk), to optimize query performance.\"}"], ["train_workload_random_75_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in join or filter conditions across the workload, such as 'customer_demographics.cd_demo_sk', unless there is a clear performance benefit observed in specific queries.\"}"], ["train_workload_random_75_8q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), store_returns(sr_ticket_number), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_ticket_number), web_sales(ws_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually and frequently used in join conditions or filters. Instead, prioritize single-column indexes on columns that are consistently used across multiple queries, especially those involved in joins and filters, such as date keys and foreign keys.\"}"], ["train_workload_random_75_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when they appear together in multiple queries. Avoid using single-column indexes when multi-column indexes can better optimize the workload.\"}"], ["train_workload_random_75_8q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by not optimizing for specific query patterns. Instead, focus on single-column indexes for join keys and filter conditions that are consistently used across the workload.\"}"], ["train_workload_random_75_8q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in the workload. Instead, focus on single-column indexes for columns that are frequently used in WHERE clauses or JOIN conditions, especially those with high cardinality.\"}"], ["train_workload_random_75_8q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality to improve query performance.\"}"], ["train_workload_random_75_8q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are foreign keys or primary keys. Instead, focus on indexing columns that are used in filtering conditions (WHERE clauses) and have high cardinality, as these can significantly improve query performance. Additionally, ensure that indexes are created on columns that are part of the most frequent and performance-critical queries.\"}"], ["train_workload_random_75_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in join or filter conditions across multiple queries in the workload, especially if they belong to tables with a large number of rows. In this case, the index on customer_demographics.cd_demo_sk may be a regression as it is not prominently used in the workload compared to other columns.\"}"], ["train_workload_random_75_8q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), household_demographics(hd_dep_count), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_item_sk), store(s_store_id), store(s_store_sk), web_site(web_site_sk), promotion(p_promo_sk)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes for columns frequently used together in joins and filters, such as (i_item_sk, i_item_id) for the item table, and (wr_order_number, wr_item_sk) for the web_returns table. Additionally, prioritize indexes on columns with high cardinality and those involved in range queries or aggregations, like ca_state in customer_address and hd_dep_count in household_demographics.\"}"], ["train_workload_random_75_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in join or filter conditions across the workload, such as 'customer_demographics.cd_demo_sk', unless there is a clear performance benefit observed in specific queries.\"}"], ["train_workload_random_75_8q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), store_returns(sr_ticket_number), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_ticket_number), web_sales(ws_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating composite indexes (I(C ...)) on columns that are already covered by single-column indexes in the improvement selection, especially if they are frequently used in join conditions or WHERE clauses. Instead, prioritize single-column indexes on primary key or foreign key columns that are frequently used in joins or filters.\"}"], ["train_workload_random_75_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and filtering criteria, especially for large tables. Prioritize composite indexes for columns frequently used together in queries, such as (wr_item_sk, wr_order_number) in web_returns, to optimize performance.\"}"], ["train_workload_random_75_8q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), household_demographics(hd_dep_count), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_item_sk), store(s_store_id), store(s_store_sk), web_site(web_site_sk), promotion(p_promo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes that only cover one aspect, such as only join keys or only filter columns, as this can lead to regressions in query performance.\"}"], ["train_workload_random_75_8q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by not optimizing for specific query patterns. Instead, focus on single-column indexes for join keys and filter conditions that are consistently used across the workload.\"}"], ["train_workload_random_75_8q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), household_demographics(hd_dep_count), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_item_sk), store(s_store_id), store(s_store_sk), web_site(web_site_sk), promotion(p_promo_sk)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included, especially when they are frequently used in the workload. Additionally, consider composite indexes for columns that are often queried together, such as (i_item_sk, i_item_id) and (wr_order_number, wr_item_sk), to optimize query performance.\"}"], ["train_workload_random_75_8q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), store_returns(sr_ticket_number), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_ticket_number), web_sales(ws_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually and are frequently used in join conditions across multiple queries. Instead, prioritize individual indexes on columns that are consistently used in WHERE clauses and join conditions, especially those involving large tables.\"}"], ["train_workload_random_75_8q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in the workload queries. Instead, focus on single-column indexes for columns that are frequently used in WHERE clauses or JOIN conditions, especially those with high cardinality.\"}"], ["train_workload_random_75_8q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), store_returns(sr_ticket_number), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_ticket_number), web_sales(ws_item_sk)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables and frequently joined tables. Avoid removing indexes on columns that are frequently used in WHERE clauses and join conditions across multiple queries, such as 'store_sales(ss_ticket_number)', 'web_sales(ws_item_sk)', and 'catalog_page(cp_catalog_page_sk)'. Additionally, prioritize indexing on columns that are part of UNION operations and subqueries to optimize performance.\"}"], ["train_workload_random_75_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in join or filter conditions across multiple queries in the workload, especially if they belong to tables with a large number of rows, as this can lead to unnecessary overhead without significant performance benefits.\"}"], ["train_workload_random_75_8q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), store_returns(sr_ticket_number), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_ticket_number), web_sales(ws_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually and are frequently used in join conditions or filters. Instead, prioritize single-column indexes on columns that are used in WHERE clauses and JOIN conditions across multiple queries, especially those with high cardinality and frequent access patterns.\"}"], ["train_workload_random_75_8q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), household_demographics(hd_dep_count), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_item_sk), store(s_store_id), store(s_store_sk), web_site(web_site_sk), promotion(p_promo_sk)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included, especially when they are frequently used in the workload. Additionally, prioritize composite indexes that cover both the join and filter conditions to optimize query performance.\"}"], ["train_workload_random_75_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in join conditions or filters across multiple queries in the workload, such as customer_demographics.cd_demo_sk, unless they are critical for specific query performance improvements.\"}"], ["train_workload_random_75_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in join or filter conditions across the workload, such as 'customer_demographics.cd_demo_sk', unless there is a clear performance benefit observed in specific queries.\"}"], ["train_workload_random_75_8q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), household_demographics(hd_dep_count), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_item_sk), store(s_store_id), store(s_store_sk), web_site(web_site_sk), promotion(p_promo_sk)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions across all tables involved in the queries. Avoid removing indexes that are used in multiple queries, especially those involving large tables or frequent joins.\"}"], ["train_workload_random_75_8q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), store_returns(sr_ticket_number), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_ticket_number), web_sales(ws_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the workload involves frequent joins and filters on those individual columns. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that indexes are aligned with the query patterns to prevent regression.\"}"], ["train_workload_random_75_8q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), store_returns(sr_ticket_number), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_ticket_number), web_sales(ws_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the workload involves frequent joins and filters on those individual columns. Instead, focus on indexing the most frequently joined or filtered columns individually to prevent regression.\"}"], ["train_workload_random_75_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in WHERE clauses across multiple queries. Instead, prioritize single-column indexes for such columns to optimize query performance.\"}"], ["train_workload_random_75_8q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries, especially when these columns are part of foreign key relationships. Instead, prioritize single-column indexes on primary key columns and columns used in WHERE clauses for filtering, as seen in the improvement index selection.\"}"], ["train_workload_random_75_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in join or filter conditions across the workload, especially if they are not part of the improvement index set. In this case, the addition of an index on customer_demographics.cd_demo_sk in the regression index set should be reconsidered, as it is not prominently featured in the workload queries.\"}"], ["train_workload_random_75_8q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), store_returns(sr_ticket_number), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_ticket_number), web_sales(ws_item_sk)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and frequently filtered columns in large tables are prioritized. Avoid removing indexes on columns that are part of join conditions across multiple queries, especially when they involve large tables or are used in subqueries. Maintain indexes on columns that are used in WHERE clauses with high cardinality and are part of frequent filtering conditions.\"}"], ["train_workload_random_75_8q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as these columns are likely to benefit more from being part of a composite index with other columns involved in the join. Instead, prioritize indexing columns that are used in filtering conditions or aggregations, especially if they are part of large tables or have high cardinality.\"}"], ["train_workload_random_75_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in join or filter conditions across the workload, such as 'customer_demographics.cd_demo_sk', unless there is a clear performance benefit observed.\"}"], ["train_workload_random_75_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently queried together in the workload. Instead, focus on single-column indexes for columns that are frequently used in WHERE clauses or JOIN conditions, especially those with high cardinality.\"}"], ["train_workload_random_75_8q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), household_demographics(hd_dep_count), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_item_sk), store(s_store_id), store(s_store_sk), web_site(web_site_sk), promotion(p_promo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually, especially if they are frequently used in join conditions or filters across multiple queries. Instead, focus on indexing columns that are used in WHERE clauses and JOIN conditions, ensuring that the indexes align with the query patterns and workload requirements.\"}"], ["train_workload_random_75_8q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), store_returns(sr_ticket_number), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_ticket_number), web_sales(ws_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually and are frequently used in join conditions across multiple queries. Instead, prioritize single-column indexes on foreign key columns and columns used in WHERE clauses to optimize query performance.\"}"], ["train_workload_random_75_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in join conditions across multiple queries. Instead, prioritize single-column indexes for such columns to optimize join performance.\"}"], ["train_workload_random_75_8q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by not optimizing for specific query patterns. Instead, focus on single-column indexes for join keys and filter conditions that are consistently used across the workload.\"}"], ["train_workload_random_75_8q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in join or filter conditions across the workload, as they may not provide significant performance benefits and could lead to regression. Specifically, ensure that indexes are aligned with the most common join and filter conditions in the workload.\"}"], ["train_workload_random_75_8q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in joins across multiple tables, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or GROUP BY operations that are not part of existing foreign key relationships.\"}"], ["train_workload_random_75_8q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), household_demographics(hd_dep_count), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_item_sk), store(s_store_id), store(s_store_sk), web_site(web_site_sk), promotion(p_promo_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns involved in joins and filters. Prioritize single-column indexes on frequently joined and filtered columns across large tables.\"}"], ["train_workload_random_75_8q", "[date_dim(d_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), store_returns(sr_ticket_number), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_demo_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_ticket_number), web_sales(ws_item_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the workload involves frequent joins and filters on those individual columns. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that indexes are aligned with the query patterns to prevent regression.\"}"], ["train_workload_random_75_8q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), household_demographics(hd_dep_count), web_returns(wr_order_number, wr_item_sk), catalog_returns(cr_item_sk), store(s_store_id), store(s_store_sk), web_site(web_site_sk), promotion(p_promo_sk)]", "[item(i_item_sk), date_dim(d_date_sk), household_demographics(hd_demo_sk), catalog_returns(cr_order_number), store(s_store_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions that are frequently accessed together, such as customer_address(ca_state) and customer_demographics(cd_demo_sk) for demographic filtering, and store(s_store_id) for store-specific aggregations. Additionally, consider composite indexes for columns that are often queried together, like item(i_item_sk, i_item_id) and web_returns(wr_order_number, wr_item_sk), to optimize query performance.\"}"], ["train_workload_random_75_8q", " [store(s_store_sk), household_demographics(hd_demo_sk), date_dim(d_date_sk), customer_address(ca_state), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used as foreign keys or are part of join conditions across multiple tables. Instead, prioritize single-column indexes on these columns to optimize join performance and query execution speed.\"}"]], "train_workload_random_76_10q": [["train_workload_random_76_10q", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns with low cardinality or columns that are not frequently used in join conditions or filters. In this case, the regression index added on customer_demographics.cd_demo_sk may not be beneficial as it is not frequently used in the workload queries compared to date_dim.d_date_sk, which is used in multiple join conditions and filters.\"}"], ["train_workload_random_76_10q", "[date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_manager_id), date_dim(d_month_seq), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), date_dim(d_year), web_site(web_site_sk), date_dim(d_week_seq)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date keys and foreign keys, to prevent regressions.\"}"], ["train_workload_random_76_10q", "[date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_manager_id), date_dim(d_month_seq), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), date_dim(d_year), web_site(web_site_sk), date_dim(d_week_seq)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes with prefix 'I(C' as they may indicate unnecessary or redundant indexes on columns already covered by other indexes. Instead, focus on indexes that align with query join conditions and filtering criteria, such as those in the improvement index list.\"}"], ["train_workload_random_76_10q", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes if composite indexes can better serve the workload.\"}"], ["train_workload_random_76_10q", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in join or filter conditions across the workload, such as customer_demographics.cd_demo_sk, unless they are critical for specific query performance improvements.\"}"], ["train_workload_random_76_10q", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize single-column indexes on foreign keys and columns frequently used in WHERE clauses. Avoid multi-column indexes unless they directly match query patterns.\"}"], ["train_workload_random_76_10q", "[date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_manager_id), date_dim(d_month_seq), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), date_dim(d_year), web_site(web_site_sk), date_dim(d_week_seq)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are involved in JOINs, WHERE conditions, and have high cardinality to improve query performance.\"}"], ["train_workload_random_76_10q", "[date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_manager_id), date_dim(d_month_seq), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), date_dim(d_year), web_site(web_site_sk), date_dim(d_week_seq)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date keys and foreign keys. Avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_76_10q", "[date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_manager_id), date_dim(d_month_seq), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), date_dim(d_year), web_site(web_site_sk), date_dim(d_week_seq)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns involved in joins or filters. Prioritize single-column indexes on frequently joined or filtered columns across multiple queries.\"}"], ["train_workload_random_76_10q", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure that all join conditions in the workload queries have corresponding indexes in the regression index selection. Specifically, check for missing composite indexes on columns frequently used together in join conditions, such as (sr_item_sk, sr_ticket_number) in store_returns, which is present in the improvement index but missing in the regression index.\"}"], ["train_workload_random_76_10q", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on frequently joined columns, especially those used in date filtering and large table joins, such as date_dim.d_date_sk, are not removed or omitted in regression index selection.\"}"], ["train_workload_random_76_10q", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize single-column indexes on foreign keys and columns frequently used in WHERE clauses. Avoid multi-column indexes unless they directly match query patterns.\"}"], ["train_workload_random_76_10q", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance.\"}"], ["train_workload_random_76_10q", "[date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_manager_id), date_dim(d_month_seq), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), date_dim(d_year), web_site(web_site_sk), date_dim(d_week_seq)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Specifically, include indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date_dim(d_date_sk), store_returns(sr_ticket_number), and customer_demographics(cd_demo_sk). Avoid removing indexes that are used in multiple queries, like date_dim(d_date_sk) and item(i_item_sk), as they are critical for performance across the workload.\"}"], ["train_workload_random_76_10q", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance.\"}"], ["train_workload_random_76_10q", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure indexes cover join conditions and filtering columns. Prioritize composite indexes for columns frequently used together in joins, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_76_10q", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance.\"}"], ["train_workload_random_76_10q", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join involves large tables. Instead, prioritize indexing columns that are used in WHERE clauses or as foreign keys in smaller tables to improve query performance.\"}"], ["train_workload_random_76_10q", "[date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_manager_id), date_dim(d_month_seq), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), date_dim(d_year), web_site(web_site_sk), date_dim(d_week_seq)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns involved in joins or filters. Prioritize single-column indexes on frequently joined or filtered columns across multiple queries.\"}"], ["train_workload_random_76_10q", "[date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_manager_id), date_dim(d_month_seq), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), date_dim(d_year), web_site(web_site_sk), date_dim(d_week_seq)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date keys and foreign keys. Avoid removing indexes that support these conditions, even if they seem redundant, as they can significantly impact query performance.\"}"], ["train_workload_random_76_10q", "[date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_manager_id), date_dim(d_month_seq), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), date_dim(d_year), web_site(web_site_sk), date_dim(d_week_seq)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes that only cover a single column when multiple columns are frequently used together in queries. Prioritize composite indexes that align with the query patterns, especially for large tables and complex queries involving multiple joins and conditions.\"}"], ["train_workload_random_76_10q", "[date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_manager_id), date_dim(d_month_seq), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), date_dim(d_year), web_site(web_site_sk), date_dim(d_week_seq)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "```json\n{\n    \"rule\": \"Ensure that indexes cover all join and filter conditions in the workload. Specifically, include indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date_dim(d_date_sk), store_sales(ss_ticket_number, ss_item_sk), and store_returns(sr_ticket_number, sr_item_sk). Avoid removing indexes that are used in multiple queries, especially those involving large tables or complex joins.\"\n}\n```"], ["train_workload_random_76_10q", "[date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_manager_id), date_dim(d_month_seq), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), date_dim(d_year), web_site(web_site_sk), date_dim(d_week_seq)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes with prefix 'I(C' as they may lead to regression. Instead, focus on indexing columns that are frequently used in joins and filters, such as foreign keys and date columns, as seen in the improvement index selection.\"}"], ["train_workload_random_76_10q", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across large tables, especially when the join involves multiple tables with high row counts. Instead, prioritize indexing columns that are used in WHERE clauses and are part of smaller tables or have high cardinality, as these can significantly improve query performance without the overhead of maintaining large indexes.\"}"], ["train_workload_random_76_10q", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in filtering or joining operations in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations to improve query performance.\"}"], ["train_workload_random_76_10q", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across large tables, especially when the join involves multiple tables with large row counts. Instead, prioritize indexing columns that are used in WHERE clauses or as foreign keys in smaller tables to improve query performance without causing regression.\"}"], ["train_workload_random_76_10q", "[date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_manager_id), date_dim(d_month_seq), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), date_dim(d_year), web_site(web_site_sk), date_dim(d_week_seq)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes with prefix 'I(C' on columns that are already indexed in the improvement set, especially if they are part of foreign key relationships or frequently used in joins. Instead, focus on indexing columns that are part of filtering conditions or aggregations in the workload.\"}"], ["train_workload_random_76_10q", "[date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_manager_id), date_dim(d_month_seq), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), date_dim(d_year), web_site(web_site_sk), date_dim(d_week_seq)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_76_10q", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_76_10q", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across large tables, especially when the join involves multiple tables with high row counts. Instead, prioritize indexing columns that are used in WHERE clauses or as foreign keys in smaller tables to improve query performance without causing regression.\"}"], ["train_workload_random_76_10q", "[customer(c_customer_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in filtering or joining operations in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, or are part of aggregations. Prioritize indexing columns with high cardinality and those that are used in multiple queries across the workload.\"}"], ["train_workload_random_76_10q", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure that composite indexes are used for join conditions involving multiple columns, especially when the workload involves frequent joins on those columns. Avoid replacing composite indexes with single-column indexes if the workload heavily relies on multi-column joins.\"}"], ["train_workload_random_76_10q", "[date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_manager_id), date_dim(d_month_seq), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), date_dim(d_year), web_site(web_site_sk), date_dim(d_week_seq)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid redundant single-column indexes when composite indexes can serve the same purpose.\"}"], ["train_workload_random_76_10q", "[date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_demo_sk), customer(c_customer_sk), customer_address(ca_state), item(i_item_sk), web_returns(wr_order_number, wr_item_sk), item(i_manager_id), date_dim(d_month_seq), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), date_dim(d_year), web_site(web_site_sk), date_dim(d_week_seq)]", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date keys and foreign keys. Avoid redundant indexes on columns already covered by existing indexes.\"}"]], "train_workload_random_78_5q": [["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed in other tables or queries. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Ensure indexes are not overlapping or unnecessary, focusing on optimizing query performance by reducing scan times and improving join efficiency.\"}"], ["train_workload_random_78_5q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_order_number), web_returns(wr_item_sk)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Ensure that indexes on date columns use the surrogate key (e.g., d_date_sk) instead of the actual date (e.g., d_date) to optimize joins and filters. Prioritize indexing on columns frequently used in joins and filters across multiple queries, such as surrogate keys and foreign keys, to prevent regression.\"}"], ["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes, especially when the existing indexes are more specific to the workload. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and ensure they align with the query patterns in the workload.\"}"], ["train_workload_random_78_5q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_order_number), web_returns(wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that already have an index, especially when the existing index is more comprehensive or covers more columns. Ensure that indexes are aligned with the query patterns and avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_78_5q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_order_number), web_returns(wr_item_sk)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Ensure indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Prioritize integer and date columns over character columns for indexing, as they are more likely to be used in filtering and joining operations. Avoid redundant indexes on columns already covered by other indexes.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed or have similar indexes in other tables. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality and those involved in filtering large datasets.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed in other tables or contexts. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially if they are part of large tables or have high cardinality.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join involves large tables. Instead, prioritize indexing columns that are used in filtering conditions or are part of smaller tables to improve query performance.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed or have similar indexes in the workload. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially for large tables. Ensure indexes are aligned with the workload's filtering and joining patterns to prevent unnecessary overhead.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, as it may lead to redundancy and potential performance regression. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality and those that are not already covered by existing indexes.\"}"], ["train_workload_random_78_5q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_order_number), web_returns(wr_item_sk)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid replacing indexes on frequently joined columns with indexes on less frequently used columns. Prioritize maintaining indexes on columns that are used in WHERE clauses and JOIN conditions across multiple queries, especially those with high cardinality and frequent use in the workload.\"}"], ["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed in other tables or queries. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Prioritize indexes on columns with high cardinality and those that are part of complex query conditions.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed or have similar indexes, especially when they are frequently used in join conditions across multiple queries. Focus on indexing columns that are used in WHERE clauses with specific filters or are part of GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid indexing columns with low cardinality or columns that are frequently used in join conditions across multiple tables, as they may lead to regression in query performance. Focus on indexing columns that are used in WHERE clauses with high cardinality and columns that are frequently filtered or sorted.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{\"rule\": \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, as it may lead to redundancy and potential performance regression. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality and those that are not already covered by existing indexes.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed or have similar indexes in other tables. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join involves large tables. Instead, focus on indexing columns that are used in filtering conditions or aggregations, and ensure that the indexes align with the most selective conditions in the workload.\"}"], ["train_workload_random_78_5q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_order_number), web_returns(wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included in the regression index selection, especially for large tables. Avoid redundant indexes on the same column with different names or aliases.\"}"], ["train_workload_random_78_5q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_order_number), web_returns(wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that already have indexes, especially when the existing indexes are more comprehensive or cover multiple columns. Prioritize indexes that align with the workload's join and filter conditions, and ensure they are not overly specific to a single query pattern unless necessary.\"}"], ["train_workload_random_78_5q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_order_number), web_returns(wr_item_sk)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid indexing columns that are not directly used in join conditions or filtering criteria in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance. Additionally, prioritize indexing columns from tables with larger row counts to improve query efficiency.\"}"], ["train_workload_random_78_5q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_order_number), web_returns(wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that already have indexes in the improvement selection. Ensure indexes are not overlapping or duplicating existing indexes, especially on primary key or frequently joined columns.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are frequently used in join conditions across multiple queries. Focus on indexing columns that are used in WHERE clauses with high selectivity and are not already indexed.\"}"], ["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid indexing columns with low cardinality or columns that are frequently used in join conditions across multiple tables, as they may lead to regression in query performance. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, especially in large tables.\"}"], ["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed in other tables or queries. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Prioritize indexes on columns with high cardinality and those that are used in range queries or sorting operations.\"}"], ["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed in other tables or queries. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Ensure indexes are not overlapping or unnecessary, focusing on optimizing query performance by reducing scan times and improving lookup efficiency.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join involves large tables. Instead, focus on indexing columns that are used in filtering conditions and have high selectivity.\"}"], ["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already individually indexed and frequently used in WHERE clauses, especially when the workload involves large tables and joins. Instead, prioritize single-column indexes on frequently filtered columns to prevent regression.\"}"], ["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed in other tables or queries. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Prioritize indexes on columns with high cardinality and those involved in range queries or sorting operations.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in join or filter conditions across the workload. Prioritize indexing columns that are consistently used in WHERE clauses, JOIN conditions, or GROUP BY clauses, especially those with high cardinality or those involved in large tables.\"}"], ["train_workload_random_78_5q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_order_number), web_returns(wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included in the regression index selection, especially for large tables. Avoid redundant indexes on the same column with different names or aliases.\"}"], ["train_workload_random_78_5q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_order_number), web_returns(wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that already have an index, especially when the existing index is more comprehensive or covers more columns. Ensure that indexes are not created on columns that are already part of a composite index that serves the same purpose.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join involves large tables. Instead, prioritize indexing columns that are used in filtering conditions and have high selectivity, such as date columns or columns with unique values.\"}"], ["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed in other tables or queries. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Prioritize indexes on columns with high cardinality and those that are used in filtering conditions to improve query performance.\"}"], ["train_workload_random_78_5q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_order_number), web_returns(wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that already have indexes, especially when the existing indexes are more comprehensive or cover multiple columns. Prioritize indexes that align with the workload's join and filter conditions, and ensure they are not overly specific to a single query pattern unless necessary.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions in the workload, especially if they are not part of any filtering criteria. Prioritize indexing columns that are used in WHERE clauses with specific conditions or are part of JOIN conditions to improve query performance.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, as it may lead to redundancy and potential performance regression. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed or have similar indexes, especially when they are frequently used in join conditions across multiple queries. Focus on composite indexes that cover multiple columns used together in WHERE clauses or JOIN conditions to improve query performance.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions in the workload, especially if they are not part of any filtering or joining logic. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already individually indexed and frequently used in WHERE clauses, especially when the individual indexes are on large tables with high cardinality columns.\"}"], ["train_workload_random_78_5q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_order_number), web_returns(wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that already have indexes, especially when the existing indexes are more comprehensive or cover multiple columns. Prioritize indexes that align with the workload's join and filter conditions, and ensure they are not overly specific to a single query pattern unless necessary.\"}"], ["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid indexing columns with low cardinality or columns that are frequently used in join conditions across multiple tables, as they may lead to regression in query performance. Focus on indexing columns that are used in WHERE clauses with high cardinality and columns that are frequently filtered or sorted.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed or have similar indexes, especially when they are frequently used in join conditions across multiple queries. Focus on indexing columns that are used in WHERE clauses with high selectivity and are not already covered by existing indexes.\"}"], ["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already individually indexed and frequently used in WHERE clauses, as this can lead to regression by increasing index maintenance overhead without significant query performance benefits.\"}"], ["train_workload_random_78_5q", " [customer_address(ca_gmt_offset), date_dim(d_date), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Focus on columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant composite indexes on columns that are already indexed individually, especially when the workload involves frequent joins and filters on those columns. Instead, focus on indexing columns that are frequently used in WHERE clauses and join conditions to improve query performance.\"}"], ["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed in other tables or queries. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Prioritize indexing columns with high cardinality and those involved in range queries or sorting operations.\"}"], ["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance. Remove indexes on columns that are not part of these operations, especially if they are not used in the workload queries.\"}"], ["train_workload_random_78_5q", "[store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed in other tables or queries, especially when the workload involves joins on these columns. Focus on indexing columns that are frequently used in WHERE clauses and join conditions across multiple queries.\"}"], ["train_workload_random_78_5q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_order_number), web_returns(wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that already have an index, especially when the existing index is more comprehensive or covers multiple columns. Prioritize indexes that align with the workload's join and filter conditions, ensuring they optimize query performance without unnecessary duplication.\"}"], ["train_workload_random_78_5q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_order_number), web_returns(wr_item_sk)]", "[date_dim(d_date), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), promotion(p_promo_sk), catalog_returns(cr_item_sk), item(i_item_sk), web_returns(wr_item_sk), item(i_item_id), web_site(web_site_sk)]", "{rule: \"Avoid indexing columns that are not directly used in join conditions or filtering predicates in the workload queries. Prioritize indexing columns that are frequently used in join conditions and filtering predicates, especially those with high cardinality or those involved in range queries.\"}"], ["train_workload_random_78_5q", "[date_dim(d_date_sk, d_year), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_order_number), web_returns(wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on the same column across different tables or with different index types, as it can lead to regression by increasing maintenance overhead without significant performance gain. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that the index type aligns with the query patterns.\"}"]], "train_workload_random_79_8q": [["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially date columns and foreign keys, to prevent regression in query performance.\"}"], ["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on date columns used in WHERE clauses, especially those involving date ranges or intervals, are maintained to prevent regression. Additionally, maintain indexes on columns used in JOIN conditions, particularly when joining large tables.\"}"], ["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality or columns that are frequently used in join conditions separately. Instead, focus on single-column indexes for such columns to improve query performance and reduce regression risks.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date_sk, d_year, d_date, d_week_seq), store(s_store_sk, s_store_id, s_gmt_offset), customer_demographics(cd_demo_sk), item(i_item_sk, i_item_id), customer_address(ca_gmt_offset, ca_address_sk), web_returns(wr_item_sk, wr_order_number), web_site(web_site_sk, web_site_id), catalog_returns(cr_item_sk), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes with only one column when the workload involves multiple joins and filters on multiple columns. Instead, create composite indexes that cover the columns involved in joins and filters to improve query performance.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date_sk, d_year, d_date, d_week_seq), store(s_store_sk, s_store_id, s_gmt_offset), customer_demographics(cd_demo_sk), item(i_item_sk, i_item_id), customer_address(ca_gmt_offset, ca_address_sk), web_returns(wr_item_sk, wr_order_number), web_site(web_site_sk, web_site_id), catalog_returns(cr_item_sk), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of composite indexes in the improvement set, as this can lead to redundancy and potential regression in query performance. Instead, focus on optimizing composite indexes that cover multiple columns used in the workload queries.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already covered by single-column indexes in the improvement set, especially when the workload involves frequent joins and filters on those columns. Prioritize single-column indexes on frequently joined and filtered columns across multiple tables.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number, cr_returned_date_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk), catalog_returns(cr_item_sk), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{\"rule\": \"Avoid creating composite indexes that include columns with high cardinality and low selectivity, such as primary keys or foreign keys, unless they are frequently used together in query filters. Instead, focus on indexing columns that are frequently used in WHERE clauses and have high selectivity to improve query performance.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number, cr_returned_date_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk), catalog_returns(cr_item_sk), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be covered by existing indexes or constraints. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions in SELECT statements to improve query performance.\"}"], ["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on date columns used in WHERE clauses, especially for large tables, to prevent regressions in query performance.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already part of foreign key relationships or are frequently used in joins across multiple tables, as these columns benefit more from individual indexes that optimize join operations.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{rule: \"Avoid creating composite indexes with multiple columns from the same table when single-column indexes on foreign keys or frequently filtered columns can suffice. Prioritize indexes on columns that are used in join conditions and filters across multiple queries.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date_sk, d_year, d_date, d_week_seq), store(s_store_sk, s_store_id, s_gmt_offset), customer_demographics(cd_demo_sk), item(i_item_sk, i_item_id), customer_address(ca_gmt_offset, ca_address_sk), web_returns(wr_item_sk, wr_order_number), web_site(web_site_sk, web_site_id), catalog_returns(cr_item_sk), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of composite indexes in the improvement set, as this can lead to redundancy and potential performance regression. Instead, focus on ensuring that composite indexes cover the necessary columns for query optimization.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number, cr_returned_date_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk), catalog_returns(cr_item_sk), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection, especially if they are part of composite indexes. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently used in filtering conditions and have moderate to low cardinality, ensuring they improve query performance by reducing scan times and enhancing join operations.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the workload involves multiple tables with similar join conditions. Instead, focus on indexing columns that are frequently used in WHERE clauses and join conditions across different queries.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Instead, focus on indexing columns that are frequently used in joins and where clauses, such as foreign keys and columns with high selectivity.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in join or filter conditions across multiple queries. Instead, focus on indexing columns that are consistently used in join conditions or as filters, especially those that are part of large tables or have high cardinality, such as foreign keys and date columns.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already part of foreign key relationships or are frequently used in join conditions, as these may lead to redundant indexing and potential performance regressions. Instead, focus on single-column indexes for such columns to optimize query performance.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{rule: \"Avoid creating composite indexes with more than three columns unless they are frequently used together in WHERE clauses or JOIN conditions across multiple queries. Focus on indexing columns that are used in filtering conditions and joins, especially those with high cardinality or those that are part of foreign key relationships.\"}"], ["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on date columns used in WHERE clauses, especially for large tables, to prevent regressions in query performance.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date_sk, d_year, d_date, d_week_seq), store(s_store_sk, s_store_id, s_gmt_offset), customer_demographics(cd_demo_sk), item(i_item_sk, i_item_id), customer_address(ca_gmt_offset, ca_address_sk), web_returns(wr_item_sk, wr_order_number), web_site(web_site_sk, web_site_id), catalog_returns(cr_item_sk), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating single-column indexes on columns that are already part of multi-column indexes in the improvement set, especially when the workload involves complex joins and aggregations. Instead, focus on multi-column indexes that align with the query patterns and join conditions.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date_sk, d_year, d_date, d_week_seq), store(s_store_sk, s_store_id, s_gmt_offset), customer_demographics(cd_demo_sk), item(i_item_sk, i_item_id), customer_address(ca_gmt_offset, ca_address_sk), web_returns(wr_item_sk, wr_order_number), web_site(web_site_sk, web_site_id), catalog_returns(cr_item_sk), customer(c_customer_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by not fully optimizing the join operations. Instead, create individual indexes on such columns to improve join performance.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number, cr_returned_date_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk), catalog_returns(cr_item_sk), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{\"rule\": \"Avoid creating composite indexes that include columns with high cardinality and low selectivity, such as primary keys or foreign keys, unless they are frequently used together in query filters. Instead, focus on indexing columns that are frequently used in WHERE clauses and have high selectivity to improve query performance.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date_sk, d_year, d_date, d_week_seq), store(s_store_sk, s_store_id, s_gmt_offset), customer_demographics(cd_demo_sk), item(i_item_sk, i_item_id), customer_address(ca_gmt_offset, ca_address_sk), web_returns(wr_item_sk, wr_order_number), web_site(web_site_sk, web_site_id), catalog_returns(cr_item_sk), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of composite indexes in the improvement set, especially if they are frequently used in joins or filters across multiple queries. Instead, focus on enhancing existing composite indexes to cover additional query patterns or optimizing query structure to leverage existing indexes effectively.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions that are not inherently optimized.\"}"], ["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns are not removed. Specifically, maintain indexes on date columns used in range queries, and on columns used in join conditions across large tables, such as store_sales.ss_sold_date_sk, store_sales.ss_store_sk, store_returns.sr_returned_date_sk, and web_sales.ws_sold_date_sk.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number, cr_returned_date_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk), catalog_returns(cr_item_sk), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality and columns that are frequently used in join conditions. Instead, focus on single-column indexes for columns that are frequently used in WHERE clauses and join conditions, especially for large tables.\"}"], ["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Ensure that all date-related columns used in WHERE clauses, such as date_sk columns, have indexes to prevent regressions in query performance. Additionally, maintain indexes on columns frequently used in JOIN conditions, such as item_sk and customer_sk, to optimize query execution.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date_sk, d_year, d_date, d_week_seq), store(s_store_sk, s_store_id, s_gmt_offset), customer_demographics(cd_demo_sk), item(i_item_sk, i_item_id), customer_address(ca_gmt_offset, ca_address_sk), web_returns(wr_item_sk, wr_order_number), web_site(web_site_sk, web_site_id), catalog_returns(cr_item_sk), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes cover both join keys and frequently filtered columns. Avoid creating indexes that only cover a single column when multiple columns are frequently used together in joins or filters.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already covered by single-column indexes in the improvement set, especially when the workload involves frequent joins and filters on these columns. Instead, prioritize single-column indexes that align with the join and filter conditions in the workload.\"}"], ["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality and low selectivity together, as they may lead to regression by increasing index size and reducing performance. Instead, focus on single-column indexes or composite indexes with columns that are frequently used together in WHERE clauses and have high selectivity.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Instead, focus on indexing columns that are frequently used in joins and where clauses, such as foreign keys and columns with high selectivity, to improve query performance.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already indexed or have unique constraints. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality. Ensure that indexes align with the query patterns and workload requirements, focusing on columns that improve query performance by reducing scan operations.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date_sk, d_year, d_date, d_week_seq), store(s_store_sk, s_store_id, s_gmt_offset), customer_demographics(cd_demo_sk), item(i_item_sk, i_item_id), customer_address(ca_gmt_offset, ca_address_sk), web_returns(wr_item_sk, wr_order_number), web_site(web_site_sk, web_site_id), catalog_returns(cr_item_sk), customer(c_customer_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating single-column indexes on columns that are frequently used together in join conditions or filters. Instead, create composite indexes that cover these columns to improve query performance and prevent regression.\"}"], ["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining operations.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number, cr_returned_date_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk), catalog_returns(cr_item_sk), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses, especially those with high cardinality, and ensure that indexes are aligned with the workload's query patterns, such as date range filters and join conditions.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number, cr_returned_date_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk), catalog_returns(cr_item_sk), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes solely on individual columns without considering their usage in joins and filters. Prioritize composite indexes that align with query patterns, especially for large tables and frequently joined columns.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already covered by single-column indexes in the improvement set, especially when the workload involves frequent joins and filters on these columns. Prioritize single-column indexes that align with the join and filter conditions in the workload.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{rule: \"Avoid creating composite indexes with too many columns on large tables, as they can lead to performance regressions. Instead, focus on single-column indexes or smaller composite indexes on frequently filtered columns.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date_sk, d_year, d_date, d_week_seq), store(s_store_sk, s_store_id, s_gmt_offset), customer_demographics(cd_demo_sk), item(i_item_sk, i_item_id), customer_address(ca_gmt_offset, ca_address_sk), web_returns(wr_item_sk, wr_order_number), web_site(web_site_sk, web_site_id), catalog_returns(cr_item_sk), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index, especially if the composite index covers multiple columns used in the workload. Prioritize composite indexes that cover multiple columns used together in queries over single-column indexes.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number, cr_returned_date_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk), catalog_returns(cr_item_sk), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index in the improvement selection, as it may lead to regression by not fully utilizing the composite index's benefits.\"}"], ["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on frequently joined and filtered columns, especially those involving date and sales tables, are not removed. Specifically, maintain indexes on columns like 'store_returns.sr_returned_date_sk', 'web_sales.ws_item_sk', 'web_sales.ws_sold_date_sk', and composite indexes such as 'store_sales.ss_sold_date_sk, store_sales.ss_store_sk' to prevent regression.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number, cr_returned_date_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk), catalog_returns(cr_item_sk), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality and low selectivity, such as customer or item identifiers, unless they are frequently used together in query filters. Instead, focus on indexing columns that are frequently used in join conditions and have high selectivity.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date_sk, d_year, d_date, d_week_seq), store(s_store_sk, s_store_id, s_gmt_offset), customer_demographics(cd_demo_sk), item(i_item_sk, i_item_id), customer_address(ca_gmt_offset, ca_address_sk), web_returns(wr_item_sk, wr_order_number), web_site(web_site_sk, web_site_id), catalog_returns(cr_item_sk), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection, especially if they are part of composite indexes. Prioritize composite indexes that cover multiple columns used in join conditions and filters over single-column indexes.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions that are not covered by existing indexes.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number, cr_returned_date_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk), catalog_returns(cr_item_sk), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually, especially when the workload involves frequent joins on those columns. Instead, focus on indexing columns that are frequently used in WHERE clauses and join conditions, ensuring that each table's primary key or unique identifier is indexed to optimize query performance.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number, cr_returned_date_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk), catalog_returns(cr_item_sk), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used together in join conditions across multiple queries, as this can lead to regression by increasing the complexity and maintenance overhead. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, which can improve query performance without causing regression.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Instead, focus on indexing columns that are frequently used in joins and where clauses, such as foreign keys and columns with high selectivity.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number, cr_returned_date_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk), catalog_returns(cr_item_sk), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes solely on individual columns without considering their usage in joins and filters. Prioritize composite indexes that align with query patterns, especially for large tables with frequent joins and filters.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions or filters. Instead, prioritize indexing columns that are used in join conditions and filters with high selectivity, and consider composite indexes for columns that are often queried together.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number, cr_returned_date_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk), catalog_returns(cr_item_sk), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used together in join conditions across multiple queries, as this can lead to regression by increasing the complexity and size of the index unnecessarily. Instead, focus on indexing columns that are used in filtering conditions or are part of smaller tables to improve query performance without causing regression.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number, cr_returned_date_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk), catalog_returns(cr_item_sk), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes solely on individual columns without considering their usage in joins and filters. Prioritize composite indexes that align with query patterns, especially for large tables with frequent joins and filters.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number, cr_returned_date_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk), catalog_returns(cr_item_sk), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions, especially for large tables. Avoid creating indexes that only cover a single column when multi-column indexes can better optimize the query performance. Prioritize indexes on foreign keys and columns frequently used in WHERE clauses.\"}"], ["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns involved in join conditions and date filtering are maintained. Specifically, avoid removing indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date keys and item keys, which are critical for query performance.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{rule: \"Avoid creating composite indexes with multiple columns from the same table when single-column indexes on foreign key columns can suffice. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across different tables.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date_sk, d_year, d_date, d_week_seq), store(s_store_sk, s_store_id, s_gmt_offset), customer_demographics(cd_demo_sk), item(i_item_sk, i_item_id), customer_address(ca_gmt_offset, ca_address_sk), web_returns(wr_item_sk, wr_order_number), web_site(web_site_sk, web_site_id), catalog_returns(cr_item_sk), customer(c_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes with a prefix 'I(C ' indicating a composite index on a single column, especially when the column is already indexed individually or when the column is part of a foreign key relationship. Instead, focus on multi-column indexes that align with the query's join and filter conditions, ensuring they cover the most frequently queried columns together.\"}"], ["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving date and item identifiers. Prioritize composite indexes that cover multiple columns used together in these conditions.\"}"], ["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and date filters are not removed, especially for large tables. For example, maintain indexes on 'store_returns.sr_returned_date_sk', 'web_sales.ws_item_sk', 'web_sales.ws_sold_date_sk', and composite indexes like 'store_sales.ss_sold_date_sk, store_sales.ss_store_sk' to prevent regression.\"}"], ["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining operations, and consider composite indexes only for columns that are frequently used together in multiple queries.\"}"], ["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Ensure that all date-related columns used in WHERE clauses, such as date_sk columns, have indexes to prevent regressions in query performance. Additionally, maintain indexes on columns frequently used in JOIN conditions, such as item_sk and customer_sk, to optimize query execution.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite key or foreign key relationship, as these are likely to be covered by existing indexes. Instead, focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, or GROUP BY operations, especially those with high cardinality or those involved in filtering large datasets.\"}"], ["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns involved in join conditions and date filtering are maintained. Specifically, avoid removing indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date keys and item keys, which are critical for query performance.\"}"], ["train_workload_random_79_8q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number, cr_returned_date_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), web_returns(wr_item_sk, wr_order_number, wr_returned_date_sk), catalog_returns(cr_item_sk), store_returns(sr_returned_date_sk), store_returns(sr_ticket_number)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{\"rule\": \"Avoid creating composite indexes that include columns with high cardinality and low selectivity, such as primary keys or foreign keys, unless they are frequently used together in query filters. Instead, focus on indexing columns that are frequently used in WHERE clauses and have high selectivity to improve query performance.\"}"], ["train_workload_random_79_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables. Prioritize indexes on date columns and foreign keys that are involved in filtering and joining operations.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used in join conditions across multiple queries. Instead, focus on indexing columns that are used in WHERE clauses with high selectivity or are part of foreign key relationships to improve query performance.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the individual indexes are frequently used in join conditions across multiple queries.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk, ss_customer_sk, ss_addr_sk), store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk), item(i_item_sk, i_item_id), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_bill_addr_sk), web_sales(ws_sold_date_sk, ws_item_sk, ws_promo_sk, ws_bill_addr_sk)]", "{rule: \"Avoid creating composite indexes with multiple columns from the same table when single-column indexes on foreign keys or frequently filtered columns can suffice. Focus on indexing columns that are used in join conditions and where clauses across different tables to optimize query performance.\"}"], ["train_workload_random_79_8q", " [customer_address(ca_gmt_offset), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions that are not directly optimized by existing indexes.\"}"]], "train_workload_random_80_7q": [["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Ensure that the index selection prioritizes columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries. Avoid indexes that only cover columns used in SELECT or ORDER BY clauses unless they are also heavily involved in filtering or joining operations.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are part of a composite index that includes frequently filtered columns. Avoid removing composite indexes that combine join keys with high cardinality filter columns, as this can lead to performance regressions in complex queries with multiple joins and filters.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index that includes the primary key or a highly selective column, as this can lead to redundant indexes and potential regressions. Focus on composite indexes that cover multiple columns used together in WHERE clauses, especially those involving joins and filters on large tables.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already part of a foreign key relationship or are frequently used in join conditions, as they may lead to regression by increasing index maintenance overhead and not providing significant performance benefits over single-column indexes.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Ensure that the index selection includes composite indexes that cover both the join keys and the filtering conditions used in the workload queries. Avoid selecting indexes that only cover primary keys or single columns without considering the query patterns, especially when the workload involves complex joins and filtering on multiple columns.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of multiple join conditions across different queries.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on individual columns that are already part of a composite index in the improvement selection, as this can lead to redundancy and potential regression in query performance.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes in the improvement selection. Focus on maintaining composite indexes that align with the query's join and filter conditions, especially for high cardinality columns.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Ensure that the index selection prioritizes columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries. Avoid indexes that only cover columns used in SELECT or ORDER BY clauses unless they are also heavily involved in filtering or joining operations.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Prioritize composite indexes that cover multiple columns involved in join conditions and filters, especially for tables with high row counts. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Prioritize composite indexes that cover multiple columns used in join conditions and filters, especially for high cardinality columns. Avoid single-column indexes on columns that are frequently used together in queries, as they may lead to regression by not optimizing the join and filter operations effectively.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes in the improvement selection. Focus on maintaining composite indexes that align with the query's join and filter conditions, as seen in the improvement index selection.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Prioritize composite indexes that include columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially when they involve filtering by specific attributes or date ranges. Avoid indexes that only cover columns used for ordering or selection without filtering, as they may not significantly improve query performance.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure that composite indexes are created on columns that are frequently joined together across multiple queries, especially when they involve large tables. Avoid creating separate indexes on individual columns that are often used together in join conditions, as this can lead to regression in query performance.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on individual columns that are already part of a composite index covering the same query patterns, as this can lead to redundant indexes and potential regressions. Focus on composite indexes that cover multiple columns used together in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index covering the same query conditions. Prioritize composite indexes that cover multiple columns used together in WHERE clauses, especially for columns frequently joined or filtered together across multiple queries.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Ensure that the index includes all columns used in join conditions and filters, especially those with high cardinality or frequently queried, to prevent regression. Avoid redundant indexes that do not cover all necessary columns for the workload.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Prioritize composite indexes that cover multiple columns involved in join conditions and filters, especially when they span across multiple tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Prioritize composite indexes that cover multiple columns used in join conditions and filters, especially for columns frequently appearing together in queries. Avoid single-column indexes when multiple columns are consistently used together in the workload.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already part of foreign key relationships or are frequently used in join conditions, as they may lead to regression by increasing index maintenance overhead and not providing significant query performance benefits.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are prioritized over indexes on columns used for filtering or ordering. Specifically, prioritize indexes on columns that are frequently used in join conditions across multiple queries, such as 'i_item_sk' in 'item', 'd_date_sk' in 'date_dim', and 's_store_sk' in 'store', to prevent regression in query performance.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Prioritize composite indexes that cover multiple columns involved in join conditions and filters, especially when they span across different tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other columns that are frequently used together in queries. Prioritize composite indexes that cover multiple columns used in join conditions and filters, especially when they span multiple tables. Ensure indexes are created on columns with high cardinality and those involved in frequent filtering or sorting operations.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes. Ensure composite indexes are utilized effectively by analyzing query patterns and column usage in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Prioritize composite indexes that include columns used in WHERE clauses with equality conditions and JOIN conditions over those used in SELECT or GROUP BY clauses. Ensure indexes cover multiple tables involved in JOINs to optimize query performance.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions across multiple queries, as these columns are likely to be involved in existing indexes or constraints. Instead, focus on indexing columns that are used in filtering conditions or aggregations, especially if they are not part of a foreign key relationship.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating separate indexes on individual columns that are already part of a composite index in the improvement selection, as this can lead to regression by increasing index maintenance overhead and not leveraging the benefits of composite indexing.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already part of a composite index covering the same query conditions. Prioritize composite indexes that cover multiple columns used together in WHERE clauses or JOIN conditions to optimize query performance and reduce unnecessary index overhead.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins are prioritized over indexes on columns used for filtering or ordering. Specifically, prioritize indexes on columns that are frequently used in join conditions across multiple queries, such as 'i_item_sk' in 'item', 'd_date_sk' in 'date_dim', and 's_store_sk' in 'store'.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure that composite indexes are created on columns that are frequently joined together across multiple queries, especially when they involve large tables. Avoid creating separate indexes on individual columns that are often used together in join conditions, as this can lead to regression in query performance.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on individual columns that are already part of a composite index covering the same columns in the same order, as this can lead to regression by increasing index maintenance overhead without providing additional query performance benefits.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes. Ensure composite indexes are utilized effectively by analyzing query patterns and column usage in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Ensure that the index includes all columns used in join conditions and filters, especially those with high cardinality or frequently queried, to prevent regression. For example, include 'i_category' in the index for the 'item' table and 'd_year' for the 'date_dim' table, as they are used in filtering and grouping operations.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Prioritize composite indexes that cover multiple columns involved in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index that covers the same query conditions. Prioritize composite indexes that cover multiple columns used together in WHERE clauses, especially for columns frequently joined or filtered together.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes. Ensure composite indexes are utilized effectively by analyzing query patterns and column usage in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Ensure that the index includes columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries. Avoid creating indexes that only cover primary key columns or columns that are already indexed by default, as these may not provide additional performance benefits. Prioritize indexing on columns that are used in filtering and joining operations, especially those with high cardinality or those involved in range queries.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure that the regression index selection includes composite indexes that cover both filtering and join conditions, especially for columns frequently used together in WHERE and JOIN clauses, such as (i_category, i_item_sk) and (d_year, d_date_sk). Avoid single-column indexes when multi-column indexes can better optimize the query workload.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on individual columns that are already part of a composite index covering the same columns in the same order, as this can lead to redundancy and potential regression in query performance.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already part of a foreign key relationship or are frequently used in join conditions, as they may lead to regression by increasing index maintenance overhead and not providing significant query performance benefits.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with a more selective column. Instead, focus on creating composite indexes that include both the selective and frequently queried columns together.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Prioritize composite indexes that cover multiple columns involved in join conditions and filters, especially when they span across different tables. Ensure indexes include columns frequently used in WHERE clauses and JOIN conditions to optimize query performance. Avoid redundant single-column indexes when composite indexes can serve the same purpose more efficiently.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Prioritize composite indexes that cover multiple columns involved in join conditions and filters, especially for columns frequently used together in queries. Avoid single-column indexes when multiple columns are consistently queried together, as composite indexes can significantly improve query performance by reducing the need for multiple index lookups.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index covering the same query conditions, especially when the composite index is more selective and relevant to the workload.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Ensure that the index selection includes composite indexes that cover both the join keys and the filtering conditions used in the workload queries. Avoid selecting indexes that only cover primary keys or single columns without considering the query patterns, such as frequent joins and filters on specific columns.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Prioritize composite indexes that cover multiple columns involved in join conditions and filters, especially when they span across tables with high row counts. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index that covers the same query conditions. Prioritize composite indexes that cover multiple columns used together in WHERE clauses, especially when they are frequently joined or filtered together in the workload.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes. Ensure composite indexes are utilized effectively by analyzing query patterns and column usage in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index in the improvement selection, as it may lead to redundancy and regression in performance. Instead, focus on maintaining composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions across multiple queries, as these are likely to be covered by existing indexes or constraints. Instead, focus on indexing columns that are used in filtering conditions or aggregations, especially those with high cardinality or those that are not part of existing indexes.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating separate indexes on individual columns that are already part of a composite index in the improvement selection, as this can lead to regression by increasing index maintenance overhead and not leveraging the composite index's benefits.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes in the improvement selection. Ensure that indexes are aligned with the query patterns, focusing on join and filter conditions, and avoid indexing columns that are not frequently used in these conditions.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with a more selective column. Instead, focus on creating composite indexes that include both the selective and frequently queried columns together.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these are likely to be covered by existing indexes. Instead, focus on indexing columns that are used in WHERE clauses with high selectivity or are part of GROUP BY or ORDER BY clauses to improve query performance.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Prioritize composite indexes that cover multiple columns involved in join conditions and filters, especially for columns frequently used together in queries. Avoid single-column indexes when composite indexes can provide better coverage and performance.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes in the improvement selection. Focus on maintaining composite indexes that align with the query's join and filter conditions, as seen in the improvement index selection.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Ensure that the index selection includes composite indexes that cover both the join keys and the filtering conditions used in the workload queries. Avoid selecting indexes that only cover primary keys or single columns without considering the query patterns and join conditions.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Ensure that composite indexes are created on columns that are frequently joined together across multiple queries, especially when they involve large tables. Avoid creating single-column indexes on columns that are already part of a composite index that covers the same queries.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index covering the same query conditions, especially when the composite index includes multiple columns that are frequently used together in the workload.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions across multiple queries, as these columns are likely to be optimized by the database engine's existing mechanisms. Instead, focus on indexing columns that are used in filtering conditions or aggregations, especially if they are not part of a foreign key relationship.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with a more selective column. Instead, focus on creating composite indexes that include both the selective and frequently queried columns together.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Prioritize composite indexes that cover multiple columns involved in join conditions and filters, especially when they span across different tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index that efficiently covers multiple columns used together in queries. Prioritize composite indexes that cover multiple columns used in join conditions and filters, especially when they span across multiple tables in the workload.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially those involved in joins and filters, to improve query performance and reduce unnecessary index overhead.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_item_id), date_dim(d_date_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other columns that are frequently used together in queries. Instead, focus on creating composite indexes that cover multiple columns used in WHERE clauses or JOIN conditions to improve query performance.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), customer_address(ca_address_sk), item(i_item_id)]", "{rule: \"Prioritize composite indexes that cover multiple columns involved in join conditions and filters, especially for tables with high row counts. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[date_dim(d_year), item(i_item_sk), store(s_store_sk), item(i_item_id), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), date_dim(d_date_sk), web_sales(ws_promo_sk), customer_demographics(cd_demo_sk), date_dim(d_dom), catalog_sales(cs_bill_addr_sk), web_sales(ws_item_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other columns that are frequently used together in queries. Prioritize composite indexes that cover multiple columns used in join conditions and filters across multiple queries.\"}"], ["train_workload_random_80_7q", " [Item(i_category, i_item_sk), Date_dim(d_year, d_date_sk), Customer_address(ca_gmt_offset)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing composite indexes. Focus on composite indexes that cover multiple columns used together in queries, especially those involved in joins and filters.\"}"]], "train_workload_random_81_10q": [["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and filters, especially for large tables. Prioritize indexes on foreign key columns and columns frequently used in WHERE clauses. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and where clauses are consistently applied across all related tables in the workload. Avoid removing indexes on primary key or frequently joined columns, such as order numbers and item keys, as these are critical for query performance.\"}"], ["train_workload_random_81_10q", " [date_dim(d_date_sk, d_date, d_year), item(i_item_id, i_item_sk), promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), customer(c_customer_sk), household_demographics(hd_demo_sk)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "{rule: \"Prioritize indexing on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those with high cardinality and involved in filtering large datasets. Avoid indexing columns with low cardinality or those primarily used in ORDER BY or GROUP BY clauses unless they are also heavily used in filtering conditions.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables, to prevent regression in query performance.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or GROUP BY operations, as these are critical for query performance.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those with high cardinality and those involved in equality conditions. Avoid over-indexing columns that are used in less frequent or less impactful operations, such as those involved in range conditions or those with low cardinality.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and filters, especially for large tables. Prioritize indexing primary keys and foreign keys used in joins, and columns frequently used in WHERE clauses for filtering. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Ensure indexes on columns involved in join conditions and frequently filtered columns, especially those with high cardinality or used in multiple queries. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are prioritized, especially those that are used in WHERE clauses and JOIN conditions across multiple queries. Avoid redundant indexes on columns that are already covered by composite indexes or are not frequently filtered or joined on.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained or added, especially for large tables, to prevent regression in query performance. Additionally, prioritize indexing on columns frequently used in WHERE clauses and GROUP BY operations.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or GROUP BY operations, as these are critical for query performance.\"}"], ["train_workload_random_81_10q", " [date_dim(d_date_sk, d_date, d_year), item(i_item_id, i_item_sk), promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), customer(c_customer_sk), household_demographics(hd_demo_sk)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating multiple indexes on the same table with overlapping columns unless necessary. Prioritize indexing on primary key columns and frequently joined columns. Remove redundant indexes that do not significantly contribute to query performance.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in join conditions and filters across multiple queries, especially those involving large tables. Prioritize composite indexes on columns that are used together in join conditions, and avoid redundant indexes on columns that are already covered by composite indexes.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and where clauses are consistently maintained across all tables involved in the workload. Specifically, prioritize maintaining indexes on primary key and foreign key columns, as well as columns frequently used in filtering conditions, to prevent regression in query performance.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions or filters with equality checks. Instead, focus on indexing columns that are frequently used in join conditions and have a high impact on query performance, such as foreign keys and columns with high selectivity.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for columns frequently used in WHERE clauses and JOIN conditions. Prioritize composite indexes on columns that are used together in multiple queries, and avoid missing indexes on columns with high cardinality that are used in filtering or joining.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Ensure that indexes on columns used in join conditions and where clauses are consistently maintained across both improving and regression index selections, especially for frequently joined tables and columns with high cardinality.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions or where clauses with equality checks. Instead, focus on indexing columns that are frequently used in join conditions and have a high impact on query performance, such as foreign keys and columns with high selectivity.\"}"], ["train_workload_random_81_10q", " [date_dim(d_date_sk, d_date, d_year), item(i_item_id, i_item_sk), promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), customer(c_customer_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure that indexes cover all join and filter columns used in the workload queries. Avoid creating indexes on columns that are not frequently used in joins or filters, as seen in the regression index selection where unnecessary indexes on catalog_returns(cr_item_sk), web_site(web_site_sk), and web_returns(wr_item_sk) were added, which do not align with the workload's frequent join and filter patterns.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Ensure indexes on columns involved in join conditions and frequently filtered columns, especially those with high cardinality or used in multiple queries. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid indexing columns that are used in less frequent or less impactful conditions, such as those with low cardinality or those involved in complex expressions that are not directly filtered or joined.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables, to prevent regression in query performance.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or GROUP BY operations, as these are critical for query performance. Additionally, prioritize indexing on columns involved in ORDER BY clauses to optimize sorting operations.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "{rule: \"Prioritize indexing columns involved in join conditions and filtering criteria over those used in aggregation or ordering. Ensure indexes cover the most frequently joined columns across tables, especially those with high cardinality and large row counts. Avoid redundant indexes on columns already covered by existing indexes in the improvement set.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in join conditions and filters across multiple queries, especially those involving large tables. Prioritize composite indexes on columns that are used together in join conditions, and avoid redundant indexes on columns that are already covered by composite indexes.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Ensure indexes on columns involved in join conditions and frequently filtered columns in WHERE clauses, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date columns or columns with many unique values, unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently used in filtering conditions and have moderate cardinality, such as foreign keys or columns used in JOINs.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Prioritize composite indexes on columns that are used together in queries, and avoid indexes on columns with low cardinality or those not involved in filtering or joining operations.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Ensure that indexes on columns used in join conditions and where clauses are consistently maintained across both improving and regression index selections, especially for frequently joined tables and columns with high cardinality.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "{rule: \"Prioritize indexing on columns frequently used in join conditions and filters across multiple queries, especially those with high cardinality and involved in complex joins. Avoid indexing columns with low cardinality or those primarily used in aggregation without filtering.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables, to prevent regression in query performance.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or GROUP BY operations, as these are critical for query performance.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in filtering conditions and have a significant impact on query performance.\"}"], ["train_workload_random_81_10q", " [date_dim(d_date_sk, d_date, d_year), item(i_item_id, i_item_sk), promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), customer(c_customer_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{\"rule\": \"Ensure that indexes cover all join keys and frequently filtered columns in the workload. Avoid creating indexes on columns that are not used in joins or filters, as seen in the regression index selection with unnecessary indexes on catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), and warehouse(w_warehouse_sk). Prioritize indexes on columns that are consistently used across multiple queries, such as date_dim(d_date_sk, d_date, d_year) and item(i_item_id, i_item_sk), as seen in the improvement index selection.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Ensure indexes on columns used in join conditions and filters across multiple queries, especially those involving large tables or frequent joins. Prioritize columns that are consistently used in WHERE clauses and JOIN conditions, such as primary keys or foreign keys, and avoid redundant indexes on columns with low cardinality or those not frequently used in filtering or joining.\"}"], ["train_workload_random_81_10q", " [date_dim(d_date_sk, d_date, d_year), item(i_item_id, i_item_sk), promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), customer(c_customer_sk), household_demographics(hd_demo_sk)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating multiple indexes on the same table with overlapping columns, especially when the columns are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing on primary key columns and columns with high cardinality that are frequently used in filtering or joining operations.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in join conditions and filters across multiple queries, especially those involving large tables. Prioritize composite indexes on columns with high cardinality and those appearing in WHERE clauses with equality conditions.\"}"], ["train_workload_random_81_10q", " [date_dim(d_date_sk, d_date, d_year), item(i_item_id, i_item_sk), promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), customer(c_customer_sk), household_demographics(hd_demo_sk)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in filtering, joining, or sorting operations, especially those with high cardinality.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid indexing columns that are used in less frequent or less impactful conditions, such as those with low cardinality or those involved in complex expressions that are not directly filtered or joined.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and filtering criteria, especially for large tables. Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions. Avoid indexes on columns with low cardinality or those not directly involved in query optimization.\"}"], ["train_workload_random_81_10q", " [date_dim(d_date_sk, d_date, d_year), item(i_item_id, i_item_sk), promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), customer(c_customer_sk), household_demographics(hd_demo_sk)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in filtering, joining, and sorting operations, especially those with high cardinality.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date columns or columns with many unique values, unless they are frequently used in WHERE clauses with equality conditions. Instead, focus on indexing columns that are frequently joined or filtered with equality conditions, especially foreign keys and primary keys.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and filters, especially for large tables. Prioritize composite indexes on columns frequently used together in queries, such as date keys and item keys, to optimize query performance and prevent regressions.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Ensure indexes on columns involved in join conditions and filtering criteria, especially for large tables. Prioritize columns used in WHERE clauses and JOIN conditions over those used in GROUP BY or ORDER BY clauses. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date columns or columns with many unique values, unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently used in filtering conditions and have moderate cardinality, such as foreign keys or columns used in JOINs.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in join conditions and filters across multiple queries, especially those involving large tables. Prioritize composite indexes on columns with high cardinality and those used in WHERE clauses with equality conditions. Avoid indexes on columns with low cardinality or those primarily used in ORDER BY clauses unless necessary for performance.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Ensure indexes on columns involved in join conditions and frequently used in WHERE clauses, especially for large tables. Prioritize indexes on primary keys and foreign keys, and avoid redundant indexes on columns with low cardinality or those already covered by composite indexes.\"}"], ["train_workload_random_81_10q", " [date_dim(d_date_sk, d_date, d_year), item(i_item_id, i_item_sk), promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), customer(c_customer_sk), household_demographics(hd_demo_sk)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "```json\n{\n    \"rule\": \"Ensure that indexes on date columns used in WHERE clauses are consistent and cover all necessary date-related columns. Avoid redundant indexes on columns that are already covered by composite indexes. Prioritize indexes on columns frequently used in JOIN and WHERE clauses, especially those with high cardinality.\"\n}\n```"], ["train_workload_random_81_10q", " [date_dim(d_date_sk, d_date, d_year), item(i_item_id, i_item_sk), promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), customer(c_customer_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), household_demographics(hd_demo_sk), item(i_item_id), store(s_store_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), web_returns(wr_item_sk), warehouse(w_warehouse_sk)]", "{rule: \"Ensure indexes cover all join conditions and filtering criteria in the workload queries. Prioritize composite indexes that include both primary keys and frequently filtered columns, especially for tables with high row counts or frequent joins. Avoid indexes that only cover single columns unless they are heavily filtered or joined in the workload.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_order_number), catalog_returns(cr_item_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), item(i_item_sk), item(i_item_id), web_returns(wr_order_number), web_returns(wr_item_sk), customer(c_customer_sk), catalog_returns(cr_returned_date_sk), catalog_returns(cr_returning_customer_sk), customer_demographics(cd_marital_status)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or GROUP BY operations, as these are critical for query performance. Additionally, prioritize indexing on columns with high cardinality and those involved in filtering and sorting operations.\"}"], ["train_workload_random_81_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[promotion(p_promo_sk), date_dim(d_date), store(s_store_sk), item(i_item_sk), date_dim(d_year), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_customer_sk), household_demographics(hd_buy_potential), date_dim(d_dom), customer_demographics(cd_demo_sk), catalog_sales(cs_sold_date_sk)]*, item(i_item_id), web_sales(ws_sold_date_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_marital_status), store_returns(sr_return_amt), web_returns(wr_return_amt), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and have high selectivity.\"}"]], "train_workload_random_83_9q": [["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across large tables, especially when they are already indexed in the improvement set. Prioritize indexing columns that are used in filtering conditions and are not already indexed in the improvement set.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and are not already indexed in the improvement selection.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Focus on indexing columns that are used in filtering conditions and are not already indexed in the improvement selection.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves joins or filters on these columns. Instead, focus on indexing columns that are frequently used in join conditions or filters across multiple queries, as seen in the improvement index selection.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and have high cardinality to improve query performance.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent updates, such as 'item_id' and 'address_sk', unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns involved in JOINs and WHERE clauses with equality conditions, especially if they are foreign keys or have low cardinality.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid redundant indexes on columns that are already covered by existing indexes or are frequently used in join conditions across multiple queries. Prioritize indexes on columns involved in filtering conditions and those that significantly reduce query execution time.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves joins and filters on these columns. Instead, focus on indexing columns that are frequently used in join conditions and filters, as seen in the improvement index selection.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'item(i_item_sk)' and 'promotion(p_promo_sk)', unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are used in filtering conditions and have a significant impact on query performance, like 'date_dim(d_date_sk, d_date)' and 'store_returns(sr_item_sk, sr_ticket_number)'.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across large tables, as they may lead to performance regressions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, especially in large tables.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and have high cardinality, as seen in the improvement index selection.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves joins or filters on those columns. Instead, prioritize single-column indexes that align with the join conditions and filter criteria in the workload.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across large tables, especially when the join involves multiple columns. Instead, prioritize indexing columns that are used in filtering conditions or are part of smaller tables to improve query performance without causing regression.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and have high cardinality, as seen in the improvement index selection.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join conditions involve large tables. Instead, focus on indexing columns that are used in filtering conditions or are part of smaller tables to improve query performance.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves frequent joins or filters on those columns. Instead, prioritize single-column indexes that align with the join and filter conditions in the workload.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing the overhead of maintaining the index. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, which can improve query performance without significant maintenance cost.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions with other tables, especially if they are already indexed in the improving index selection. Prioritize indexing columns that are used in filtering conditions and have high cardinality to improve query performance.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement set. Focus on indexing columns that are used in filtering conditions and are not part of existing indexes to prevent redundancy and potential regression.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually or are part of foreign key relationships, as this can lead to regression by increasing index maintenance overhead without significant query performance benefits.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and have high cardinality to improve query performance.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'customer_address(ca_city)' and 'item(i_item_id)', unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are used in JOINs and have a high impact on query performance, such as 'store_returns(sr_item_sk, sr_ticket_number)' and 'catalog_returns(cr_item_sk)'.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date_dim(d_date) and date_dim(d_year), as they may not significantly improve query performance and can lead to regression. Instead, focus on indexing columns that are frequently used in join conditions and have high selectivity, such as item(i_item_sk) and promotion(p_promo_sk).\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves joins or filters on these columns. Instead, focus on indexing columns that are frequently used in join conditions or filters across multiple queries, as seen in the improvement index selection.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'item(i_item_sk)' and 'promotion(p_promo_sk)', when they are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered or joined, like 'date_dim(d_date_sk, d_date)' and 'store_returns(sr_item_sk, sr_ticket_number)', which are more likely to improve query performance.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent joins across multiple tables, especially when they are already covered by existing indexes. Prioritize indexing columns that are frequently used in WHERE clauses and have lower cardinality to improve query performance.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid redundant indexes on columns that are already covered by existing indexes, especially when they are frequently used in joins or filters. Prioritize indexing columns that are used in join conditions and filters across multiple queries, and ensure that indexes are not duplicated across different tables unless necessary for specific query patterns.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the individual indexes are frequently used in join conditions or where clauses. Instead, focus on optimizing the existing individual indexes or creating new indexes that align with the most common query patterns.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'item(i_item_sk)' and 'promotion(p_promo_sk)', unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are used in JOINs and have a high impact on query performance, such as 'date_dim(d_date_sk, d_date)' and 'store_returns(sr_item_sk, sr_ticket_number)'.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'customer_address(ca_city)' and 'item(i_item_id)', as they may lead to performance regressions. Instead, focus on indexing columns that are frequently used in join conditions and have a high impact on query performance, such as 'date_dim(d_date_sk)' and 'store_returns(sr_item_sk, sr_ticket_number)'.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Avoid creating indexes on columns that are already indexed in the improvement selection, especially if they are frequently used in joins or where clauses, as this can lead to redundant indexing and potential performance regressions. Focus on indexing columns that are not covered in the improvement selection but are critical for query performance.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the workload involves joins or filters on those columns. Instead, focus on indexing columns that are frequently used together in join conditions or where clauses to improve query performance.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and have high cardinality, as seen in the improvement index selection.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'customer_address(ca_city)' and 'item(i_item_id)', as they may lead to performance regressions. Instead, focus on indexing columns that are frequently used in join conditions and have high selectivity, such as 'store_returns(sr_item_sk, sr_ticket_number)' and 'catalog_returns(cr_item_sk)'.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently used in join or filter conditions. Focus on indexing columns that are used in join conditions and have high selectivity, such as foreign keys or columns with unique values. Remove indexes on columns that are frequently updated or have low selectivity to prevent performance degradation.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the workload involves frequent joins and filters on those columns. Instead, focus on indexing columns that are frequently used together in join conditions or where clauses, and ensure that the indexes align with the query patterns to prevent regression.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing the complexity and overhead of maintaining the index. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, which can significantly improve query performance without causing regression.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'customer_address(ca_city)' and 'item(i_item_id)', unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are used in JOINs and have a high impact on query performance, such as 'store_returns(sr_item_sk, sr_ticket_number)' and 'catalog_returns(cr_item_sk)'.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently used in join or filter conditions. Focus on indexing columns that are used in join conditions and have high selectivity, such as foreign keys and date columns used in range queries.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves frequent joins or filters on those columns. Instead, focus on indexing columns that are frequently used in join conditions or where clauses, as seen in the improvement index selection.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'item(i_item_sk)' and 'promotion(p_promo_sk)', when they are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently filtered or joined, such as 'date_dim(d_date_sk, d_date)' and 'store_returns(sr_item_sk, sr_ticket_number)', to improve query performance.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and have high cardinality to improve query performance.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently used in join or filter conditions. Focus on indexing columns that are frequently used in join conditions and have high selectivity, such as foreign keys and primary keys, to improve query performance. Remove indexes on columns that are not used in the workload or are already indexed in a more efficient manner.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the workload involves frequent joins and filters on those columns. Instead, focus on indexing columns that are frequently used together in join conditions or where clauses, and ensure that the indexes align with the query patterns to prevent regression.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'item(i_item_sk)' and 'promotion(p_promo_sk)', when they are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently used in filtering conditions and have a significant impact on query performance, such as 'date_dim(d_date_sk, d_date)' and 'store_returns(sr_item_sk, sr_ticket_number)'.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and are not already indexed in the improvement selection.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Avoid creating redundant indexes on columns that are already covered by existing indexes or are not frequently used in join or filter conditions. Focus on indexing columns that are used in join conditions and have high selectivity, such as foreign keys and primary keys, to improve query performance. Remove indexes on columns that are not used in the workload or are already indexed in a more efficient way.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing index maintenance overhead and reducing query performance. Instead, consider creating individual indexes on these columns or using covering indexes that include only the necessary columns for specific queries.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'item(i_item_sk)' and 'promotion(p_promo_sk)', unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are used in JOINs and have a high impact on query performance, like 'date_dim(d_date_sk, d_date)' and 'store_returns(sr_item_sk, sr_ticket_number)'.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across large tables, as they may lead to performance regressions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, especially in large tables.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Avoid creating indexes on columns that are already indexed in the improving index selection, especially if they are frequently used in joins or where clauses. Focus on indexing columns that are not covered by the improving index selection and are frequently used in filtering or joining operations in the workload.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries, especially when these columns are already indexed individually. Instead, focus on indexing columns that are used in filtering conditions and are not part of existing indexes.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing the overhead of maintaining the index. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, which can improve query performance without significant maintenance cost.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'customer_address(ca_city)' and 'item(i_item_id)', as they may lead to performance regressions. Instead, focus on indexing columns that are frequently used in join conditions and have high selectivity, such as 'store_returns(sr_item_sk, sr_ticket_number)' and 'catalog_returns(cr_item_sk)'.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid redundant indexes on columns that are already covered by existing indexes or are frequently used in join conditions. Prioritize indexing columns that are used in WHERE clauses and have high cardinality, especially in large tables. Consider the workload patterns and ensure indexes are aligned with the most frequent query conditions and join operations.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these are likely to be covered by existing indexes or constraints. Instead, focus on indexing columns that are used in WHERE clauses or are part of aggregations, especially if they are not part of existing indexes.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{\"rule\": \"Avoid creating indexes on columns that are frequently used in join conditions and have high cardinality, such as primary keys or foreign keys, unless they are part of a composite index that optimizes specific query patterns. Instead, focus on indexing columns that are used in WHERE clauses, especially those with filtering conditions, and ensure that indexes align with the query workload to prevent regression.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and have high cardinality, as seen in the improvement index selection.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as date_dim(d_date) and date_dim(d_year), as they may lead to regression by increasing maintenance overhead without significant query performance improvement. Instead, focus on indexing columns involved in join conditions and filtering with high selectivity, such as store_returns(sr_item_sk, sr_ticket_number) and catalog_returns(cr_item_sk).\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves multiple joins and filters on these columns. Instead, focus on indexing columns that are frequently used in join conditions and filters across different queries, as seen in the improvement index selection.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across large tables, especially when they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and are not already indexed in the improvement selection.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'customer_address(ca_city)' and 'item(i_item_id)', unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently used in JOINs and have high selectivity, such as 'store_returns(sr_item_sk, sr_ticket_number)' and 'catalog_returns(cr_item_sk)'.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{\"rule\": \"Avoid creating redundant indexes on columns that are already indexed or have low selectivity, especially if they are frequently used in joins or filters across multiple queries. Focus on indexing columns that are used in join conditions and have high selectivity to improve query performance.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves multiple tables with join conditions on these columns. Instead, focus on indexing columns that are frequently used in join conditions and filters across different tables, as seen in the improvement index selection.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[item(i_item_sk), date_dim(d_date, d_year), customer_demographics(cd_demo_sk), customer(c_current_addr_sk), customer_address(ca_city), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_returns(wr_item_sk)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'item(i_item_sk)' and 'promotion(p_promo_sk)', unless they are frequently used in join conditions or where clauses. Instead, focus on indexing columns that are used in join conditions and have a high impact on query performance, such as 'date_dim(d_date_sk, d_date)' and 'store_returns(sr_item_sk, sr_ticket_number)'.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_city), item(i_item_id), customer_address(ca_address_sk), item(i_manager_id), household_demographics(hd_demo_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are frequently used in join conditions or filters. Instead, focus on columns that are used in range queries or have moderate cardinality, as they can benefit more from indexing. Additionally, prioritize indexing columns that are part of foreign key relationships or are frequently used in WHERE clauses with equality conditions.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[store(s_store_sk), customer_address(ca_state), date_dim(d_date), date_dim(d_year), item(i_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), catalog_sales(cs_sold_date_sk), item(i_item_id), web_sales(ws_sold_date_sk), customer_demographics(cd_demo_sk), customer_address(ca_address_sk), household_demographics(hd_demo_sk), web_site(web_site_sk), customer(c_current_addr_sk), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions or filters across multiple queries, especially if they are already indexed in the improvement selection. Focus on indexing columns that are used in specific queries with high selectivity or are part of complex expressions that benefit from indexing.\"}"], ["train_workload_random_83_9q", " [date_dim(d_date_sk, d_date), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk), web_returns(wr_item_sk), household_demographics(hd_demo_sk)]", "[I(C customer_address.ca_address_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves multiple tables with join conditions on these columns. Instead, focus on indexing columns that are frequently used in join conditions and filtering, such as foreign keys and date columns, to improve query performance.\"}"]], "train_workload_random_86_7q": [["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves multiple joins and aggregations. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, as seen in the improvement index selection.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Prioritize single-column indexes on columns that are consistently used in filtering or joining operations, especially those with high cardinality or those involved in range queries.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Avoid indexes that only cover columns used in ORDER BY or GROUP BY without considering join/filter conditions. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on columns frequently used in join conditions across multiple queries are maintained. Avoid removing indexes on columns that are part of common join conditions, such as date keys, which are often used to filter and join tables based on time-related attributes.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by not fully optimizing the join operations. Instead, use single-column indexes on such columns to improve join performance.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Ensure that indexes cover both join keys and frequently filtered columns. Avoid creating indexes that only cover single columns when multi-column indexes can better optimize query performance, especially for large tables with complex joins and filters.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for large tables. Prioritize composite indexes that include columns frequently used together in WHERE clauses and JOIN conditions. Avoid single-column indexes on large tables unless they are frequently used in isolation.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by not fully optimizing the join operations. Instead, consider creating individual indexes on these columns or composite indexes that align with the join patterns in the workload.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on frequently joined and filtered columns, such as date columns (e.g., cs_sold_date_sk, d_date_sk), are maintained or added to avoid regression in query performance.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for large tables. Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions, and avoid redundant single-column indexes when composite indexes can be more effective.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions, especially for large tables. Avoid removing composite indexes that include frequently filtered columns like 'ss_net_profit' in 'store_sales' or 'cs_sold_date_sk' in 'catalog_sales'.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple queries. Instead, prioritize single-column indexes on these columns to optimize join performance and query execution.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on frequently joined and filtered columns, such as date columns (e.g., date_dim.d_date_sk), are maintained or added to prevent regression in query performance.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses with range conditions or in GROUP BY clauses. Prioritize maintaining composite indexes that include columns used in both filtering and aggregation.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{\"rule\": \"Avoid creating composite indexes on columns that are already indexed individually, especially when the individual indexes are frequently used in the workload. Instead, focus on indexing columns that are frequently used in join conditions or where clauses but are not yet indexed.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves multiple joins across large tables. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions individually to optimize query performance.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple tables, especially when these columns are part of foreign key relationships or are used in conjunction with other columns in the workload. Instead, prefer single-column indexes or multi-column indexes that align with the join patterns and filtering conditions in the workload.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained, especially for large tables. Avoid removing indexes on columns that are used in WHERE clauses with range conditions or are part of GROUP BY and ORDER BY clauses.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for columns frequently used in WHERE clauses and JOIN operations. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter columns in the workload queries. Missing indexes on frequently joined or filtered columns, such as date_dim.d_date_sk, catalog_sales.cs_sold_date_sk, and web_sales.ws_sold_date_sk, can lead to regressions. Additionally, consider composite indexes for columns used together in filters or aggregations, like store_sales.ss_sold_date_sk and store_sales.ss_net_profit.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple tables, especially when these columns are part of foreign key relationships. Instead, use individual indexes on these columns to improve join performance and query execution efficiency.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained, especially for large tables. Avoid removing indexes on columns that are used in WHERE clauses with range conditions or are part of GROUP BY and ORDER BY clauses.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for columns frequently used in WHERE clauses and JOIN conditions. Prioritize indexing columns involved in complex queries with multiple joins and filters, such as those in the improvement index selection, to prevent regression.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses for filtering are indexed, especially those involved in joins or range queries, such as date_dim.d_date_sk and sales tables' date_sk columns. Additionally, maintain indexes on columns frequently used in GROUP BY or ORDER BY clauses, such as item.i_item_id and sales tables' item_sk columns.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves multiple tables with join operations. Instead, focus on indexing columns that are frequently used in WHERE clauses or JOIN conditions individually to improve query performance.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or GROUP BY operations, as these are critical for query performance.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{\"rule\": \"Avoid creating composite indexes on columns that are already covered by existing single-column indexes, especially when the single-column index is frequently used in the workload. Instead, focus on creating indexes that cover the most selective columns or combinations that are not already indexed.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns used in join conditions across multiple queries, especially those involving large tables, are maintained. Avoid removing indexes on columns frequently used in join conditions, such as date keys and item keys, which are critical for query performance.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on frequently joined and filtered columns, especially those involved in date filtering and profit calculations, are maintained. Specifically, maintain indexes on date columns (e.g., date_dim.d_date_sk) and columns used in profit calculations (e.g., store_sales.ss_net_profit) to prevent regression.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for columns frequently used in WHERE clauses and JOIN operations. Prioritize composite indexes for columns involved in multi-column conditions and avoid redundant single-column indexes that do not align with query patterns.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes that only cover filter conditions without considering join conditions, especially for large tables. Prioritize indexes on columns frequently used in joins across multiple queries.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves multiple joins across tables with large row counts. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions individually to optimize query performance.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on frequently joined and filtered columns, especially those involved in date filtering and profit calculations, are maintained. Specifically, maintain indexes on date columns (e.g., date_dim.d_date_sk) and columns used in profit calculations (e.g., store_sales.ss_net_profit) to prevent regression.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Avoid indexing columns that are already part of a composite index in the improvement selection, and ensure that indexes cover the most frequently joined and filtered columns across queries.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables. Consider the workload's most common query patterns and maintain indexes that optimize these operations.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on columns frequently used in join conditions across multiple queries are maintained. Specifically, avoid removing indexes on columns that are used in join conditions with high cardinality tables, such as 'date_dim.d_date_sk' and 'catalog_sales.cs_sold_date_sk', as these are critical for optimizing query performance.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already covered by single-column indexes, especially when the single-column indexes are frequently used in join conditions or where clauses. Instead, focus on optimizing the existing single-column indexes or creating new ones that align with the query patterns.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a primary key or unique constraint, as they may lead to redundancy and unnecessary overhead. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially those involved in filtering large datasets or improving query performance. Consider the cardinality and selectivity of the columns when choosing indexes to ensure they provide a significant performance benefit.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{\"rule\": \"Avoid creating composite indexes on columns that are already indexed individually, especially when the individual indexes are frequently used in the workload. Instead, focus on indexing columns that are frequently used in join conditions or where clauses but are not yet indexed.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries. Avoid removing indexes on columns that are part of frequent JOIN operations, such as date_dim.d_date_sk and catalog_sales.cs_sold_date_sk, which are critical for performance in date-related queries.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using single-column indexes on columns that are frequently used in join conditions or group by clauses. Instead, consider composite indexes that cover multiple columns involved in these operations to improve query performance.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize composite indexes for columns frequently used together in WHERE clauses and JOIN conditions. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover both join keys and frequently filtered columns. Avoid removing indexes on columns that are used in join conditions or have high cardinality filters, as seen with missing indexes on promotion(p_promo_sk), household_demographics(hd_buy_potential), and customer_address(ca_state) in the regression selection.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the individual indexes are frequently used in the workload. This can lead to redundancy and potential performance regressions.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple tables, especially when these columns are already part of foreign key relationships. Instead, prioritize single-column indexes on these join keys to optimize query performance.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other columns that are frequently used together in queries. Prioritize composite indexes that cover multiple columns used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions, especially if they are not part of the same query pattern. Instead, focus on single-column indexes for high cardinality columns that are frequently filtered or joined on, as seen in the improvement index selection.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Missing indexes on frequently joined or filtered columns, such as date_dim.d_date_sk, catalog_sales.cs_sold_date_sk, web_sales.ws_sold_date_sk, and store_sales.ss_sold_date_sk, can lead to regressions. Additionally, consider composite indexes for columns used together in filter conditions, like store_sales.ss_sold_date_sk and store_sales.ss_net_profit.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating redundant indexes on columns that are already indexed or have low selectivity. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and have high selectivity to improve query performance.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a primary key or unique constraint, as they may not provide additional performance benefits and can lead to regression. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and consider composite indexes for columns often queried together. Avoid regression by maintaining indexes on columns involved in complex queries with multiple joins and filters, such as those in the improvement index list.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves multiple tables with join conditions on these columns. Instead, focus on indexing columns that are frequently used in WHERE clauses and join conditions individually to improve query performance.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) on columns that are already part of foreign key relationships or are frequently used in join conditions, as they may lead to regression by overshadowing more effective single-column indexes.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for large tables. Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Prioritize indexing columns involved in frequent joins and filters across multiple queries, such as date keys and foreign keys. Avoid regression by maintaining indexes on columns that are frequently used together in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple tables, especially when these columns are already indexed individually in the improvement index selection.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter columns used in the workload queries, especially for large tables. Missing indexes on frequently joined or filtered columns can lead to regressions.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Avoid indexing columns that are already part of a composite index in the improvement selection, especially if they are frequently used in join conditions or filters. Prioritize indexing columns that are used in WHERE clauses with equality conditions or are part of GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in queries. Prioritize indexing columns involved in multiple queries, especially those with high cardinality or used in WHERE clauses. Avoid omitting indexes on columns frequently used in JOIN operations across different tables.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes on frequently joined and filtered columns, such as date columns in large tables like catalog_sales and date_dim, are maintained or added to prevent regression in query performance.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves multiple joins and aggregations. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that indexes are not redundant or overlapping with existing indexes.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not used in join conditions or where clauses in the workload queries, as they may lead to unnecessary overhead without improving query performance. Focus on indexing columns that are frequently used in join conditions, where clauses, or as part of aggregations.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for columns frequently used in WHERE clauses and JOIN operations. Prioritize single-column indexes on primary keys and foreign keys over multi-column indexes unless multi-column indexes significantly reduce query complexity or improve performance.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the individual indexes are frequently used in the workload. This can lead to redundancy and potential performance regressions.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple tables, especially when these columns are part of foreign key relationships or are used in filtering conditions. Instead, use single-column indexes on these columns to improve query performance and reduce regression risks.\"}"], ["train_workload_random_86_7q", " [store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), date_dim(d_dow, d_moy, d_date_sk, d_date, d_year), item(i_item_sk, i_current_price, i_item_id), customer_address(ca_state, ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number, wr_return_amt), catalog_returns(cr_item_sk, cr_order_number, cr_return_amount), customer_demographics(cd_marital_status, cd_demo_sk)]", "[store(s_store_id, s_store_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_id), catalog_sales(cs_order_number), date_dim(d_dow), web_returns(wr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid redundant indexes on primary keys or unique columns unless they are frequently used in join conditions. Prioritize composite indexes that cover multiple columns used together in queries, especially those involving filtering and sorting. Consider the workload's most frequent and costly queries to guide index selection.\"}"], ["train_workload_random_86_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit)]", "[date_dim(d_date, d_year), catalog_sales(cs_item_sk, cs_sold_date_sk), store(s_store_sk), item(i_item_sk), web_site(web_site_sk), web_sales(ws_sold_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for large tables. Avoid single-column indexes when multi-column indexes can optimize query performance by covering both join and filter conditions.\"}"], ["train_workload_random_86_7q", "[date_dim(d_date), store_returns(sr_return_amt), customer_address(ca_address_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves multiple tables with join operations. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, as seen in the improvement index selection.\"}"]], "train_workload_random_87_8q": [["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{rule: \"Avoid creating composite indexes that include columns with high cardinality and low selectivity, especially when they are already covered by existing indexes. Focus on indexing columns that are frequently used in join conditions and filters with high selectivity.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for high cardinality columns that are frequently filtered or joined, and ensure that indexes align with the most common query patterns to prevent regression.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating composite indexes on columns that are already indexed individually, especially if they are frequently used in join conditions or filters. Instead, focus on indexing columns that are used in WHERE clauses or join conditions but are not yet indexed, as seen in the improvement index selection.\"}"], ["train_workload_random_87_8q", "[date_dim(d_date_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used across multiple queries, especially in large tables.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{rule: \"Ensure that indexes on columns involved in join conditions and filters are prioritized, especially for large tables. Avoid removing indexes that are frequently used in join conditions across multiple queries, such as date keys and customer keys.\"}"], ["train_workload_random_87_8q", "[date_dim(d_date_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, especially when the workload involves multiple tables with join conditions on these columns. Instead, focus on indexing columns that are frequently used in WHERE clauses and join conditions across multiple queries.\"}"], ["train_workload_random_87_8q", "[date_dim(d_date_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{rule: \"Avoid creating composite indexes that include columns not directly involved in filtering or joining conditions, especially when they are not frequently queried together. Focus on single-column indexes for primary keys and foreign keys used in joins and filters.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used across multiple queries. Avoid removing indexes on columns that are part of complex join conditions or subqueries, as these can lead to performance regressions.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on foreign key columns used in joins across multiple tables, especially when filtering by date or other common dimensions. Avoid removing indexes on columns frequently used in WHERE clauses or subqueries, such as customer and address keys, to prevent regression in query performance.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are frequently filtered or joined, especially in large tables.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{rule: \"Ensure indexes cover join conditions and filter conditions in queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used in join conditions across multiple queries, especially when these columns are already indexed individually. Instead, focus on indexing columns that are used in filtering conditions or aggregations, as these can significantly improve query performance.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{\"rule\": \"Avoid creating composite indexes on columns that are already indexed individually, especially when the individual indexes are frequently used in join conditions or filters. Instead, focus on indexing columns that are frequently used in WHERE clauses or join conditions but are not yet indexed, as seen in the improvement index selection.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on foreign key columns used in joins across large tables, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of multiple join conditions in the workload, such as customer_address.ca_address_sk, which is used in multiple queries.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the individual indexes are frequently used in join conditions across multiple queries. Prioritize single-column indexes for columns that are consistently used in join conditions and filters, and ensure they cover the most selective conditions in the workload.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing index maintenance overhead and reducing query performance. Instead, focus on single-column indexes for columns that are consistently used in WHERE clauses or as join keys, especially for large tables.\"}"], ["train_workload_random_87_8q", "[date_dim(d_date_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially if they are frequently used in join conditions across multiple queries. Instead, focus on indexing columns that are used in WHERE clauses and join conditions that are not already covered by existing indexes.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for columns that are frequently filtered or joined on, as seen in the improvement index selection.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in query predicates, especially when they involve large tables or columns with high cardinality. Instead, focus on single-column indexes for frequently filtered columns or those involved in join conditions.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all foreign key columns used in join conditions are indexed, especially when they are frequently used in the workload. Avoid removing indexes on such columns unless they are proven to be redundant or not beneficial for the specific workload.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing single-column indexes that are critical for join operations, even if they are part of a composite index, as this can lead to performance regressions.\"}"], ["train_workload_random_87_8q", "[date_dim(d_date_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in join conditions or filters across multiple queries. Prioritize single-column indexes for columns that are consistently used in WHERE clauses or JOIN conditions across the workload.\"}"], ["train_workload_random_87_8q", "[date_dim(d_date_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, especially when the workload involves multiple joins on these columns. Instead, prioritize individual indexes on frequently joined columns across multiple tables to optimize query performance.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns to prevent regression.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used in join conditions across multiple queries, as they may lead to regression by increasing index maintenance overhead and reducing query performance. Instead, focus on single-column indexes for such columns, especially when they are used in equality joins.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating composite indexes on columns that are already indexed individually, especially if they are frequently used in join conditions or filters. Instead, focus on indexing columns that are used in group by, order by, or where clauses that are not already covered by existing indexes.\"}"], ["train_workload_random_87_8q", "[date_dim(d_date_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{\"rule\": \"Avoid creating multi-column indexes that include columns not used in WHERE clauses or JOIN conditions, as they may lead to regression by increasing index size and maintenance overhead without improving query performance.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates. Prioritize single-column indexes on foreign keys and columns frequently used in WHERE clauses. Avoid multi-column indexes unless necessary for composite queries.\"}"], ["train_workload_random_87_8q", "[date_dim(d_date_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually, especially when the workload involves multiple tables with join conditions on these columns. Instead, focus on indexing columns that are frequently used in WHERE clauses and join conditions across different queries to improve query performance.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in query predicates. Instead, focus on single-column indexes for columns that are consistently used in WHERE clauses across multiple queries.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, as these can significantly improve query performance.\"}"], ["train_workload_random_87_8q", "[date_dim(d_date_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially if they are frequently used in join conditions across multiple queries. Instead, focus on indexing columns that are used in WHERE clauses and are not already indexed, ensuring that the indexes align with the query patterns and improve the performance of the most frequent and costly operations.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for high cardinality columns that are frequently filtered or joined, and ensure that indexes align with the most common query patterns in the workload.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all foreign key columns used in join conditions across multiple queries are consistently indexed. In this case, the regression index selection missed indexing 'customer_address.ca_address_sk' and 'catalog_sales.cs_sold_date_sk', which are used in join conditions in the workload.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the individual indexes are frequently used in the workload. Prioritize single-column indexes on frequently filtered columns and ensure they align with the workload's join and filter conditions.\"}"], ["train_workload_random_87_8q", "[date_dim(d_date_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently queried together in the workload. Focus on single-column indexes for high cardinality columns that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns used in join conditions across multiple queries, especially for large tables, and avoid removing indexes that are frequently used in join conditions or filtering conditions in the workload.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{\"rule\": \"Avoid creating composite indexes with multiple columns from the same table unless necessary. Instead, focus on single-column indexes on frequently filtered or joined columns across different tables to improve query performance.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other columns, especially when the composite index covers multiple tables and joins. Focus on single-column indexes that are frequently used in WHERE clauses and join conditions across multiple queries.\"}"], ["train_workload_random_87_8q", "[date_dim(d_date_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in query predicates. Instead, focus on indexing individual columns that are frequently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_87_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{rule: \"Ensure that indexes on columns used in join conditions and where clauses are included in the regression index selection, especially for high cardinality columns and those frequently used in filtering and joining operations. Prioritize indexes on date columns and primary keys that are involved in multiple queries.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, as these can significantly improve query performance.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Focus on single-column indexes for columns that are consistently used in filtering conditions, especially those with high cardinality or those involved in range queries.\"}"], ["train_workload_random_87_8q", "[date_dim(d_date_sk), item(i_item_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in join or filter conditions across multiple queries. Focus on single-column indexes for columns that are consistently used in join conditions or filters, especially for large tables.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating composite indexes on columns that are already indexed individually, especially when those columns are frequently used in join conditions across multiple queries. Instead, focus on indexing columns that are used in filtering conditions and are not already indexed, as this can lead to more efficient query execution and prevent regression.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[customer(c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk), date_dim(d_date_sk, d_year), item(i_item_sk), catalog_returns(cr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_site(web_site_sk, web_site_id), household_demographics(hd_demo_sk), store(s_store_sk, s_store_id, s_gmt_offset)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the individual indexes are sufficient for query optimization. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that indexes are not redundant or overly complex.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[catalog_sales(cs_sold_date_sk, cs_item_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), household_demographics(hd_demo_sk), store(s_gmt_offset), web_site(web_site_id)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the individual indexes are frequently used in the workload. This can lead to redundancy and potential performance regressions.\"}"], ["train_workload_random_87_8q", " [customer_address(ca_gmt_offset), store_returns(sr_item_sk), item(i_current_price), catalog_page(cp_catalog_page_sk), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used in join conditions across multiple tables, especially when these columns are already indexed individually in the improvement index selection. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, as seen in the improvement index selection.\"}"]], "train_workload_random_89_4q": [["train_workload_random_89_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure all date-related columns used in WHERE clauses are indexed, especially when filtering by date ranges or specific years, as missing indexes on such columns can lead to regressions in query performance.\"}"], ["train_workload_random_89_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions and frequently filtered columns in WHERE clauses are maintained. Avoid removing indexes on columns that are part of join conditions or are frequently used in WHERE clauses, especially if they are involved in large tables or complex queries.\"}"], ["train_workload_random_89_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure all date-related columns used in WHERE clauses for filtering are indexed, especially when they are used in conjunction with other tables in joins or subqueries.\"}"], ["train_workload_random_89_4q", "[customer(c_customer_sk), date_dim(d_week_seq, d_date), item(i_item_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), web_site(web_site_sk), web_site(web_site_id), promotion(p_promo_sk), warehouse(w_warehouse_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure that indexes on columns frequently used in join conditions and filters, especially those with high cardinality or large tables, are retained or added. Avoid removing indexes on columns that are part of multiple join conditions across different queries, such as 'd_week_seq' in 'date_dim' and 'p_promo_sk' in 'promotion', as these are critical for query performance.\"}"], ["train_workload_random_89_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure all date-related columns used in WHERE clauses are indexed, especially for large tables with frequent date-based filtering, such as store_sales.ss_sold_date_sk, catalog_sales.cs_sold_date_sk, and web_sales.ws_sold_date_sk.\"}"], ["train_workload_random_89_4q", "[catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer(c_customer_sk), date_dim(d_date), store_returns(sr_ticket_number), item(i_item_sk), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure indexes cover join and filter conditions for large tables, especially those involved in subqueries and outer joins. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as foreign keys and date columns. Avoid removing indexes that optimize access patterns for high cardinality columns or those involved in complex query structures.\"}"], ["train_workload_random_89_4q", "[customer(c_customer_sk), date_dim(d_week_seq, d_date), item(i_item_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), web_site(web_site_sk), web_site(web_site_id), promotion(p_promo_sk), warehouse(w_warehouse_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes solely on columns used in join conditions without considering their use in filter conditions. Prioritize indexes on columns that are frequently used in WHERE clauses and have high selectivity.\"}"], ["train_workload_random_89_4q", "[customer(c_customer_sk), date_dim(d_week_seq, d_date), item(i_item_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), web_site(web_site_sk), web_site(web_site_id), promotion(p_promo_sk), warehouse(w_warehouse_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses with range conditions or in GROUP BY clauses, as these can significantly impact query performance.\"}"], ["train_workload_random_89_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure all date-related columns used in WHERE clauses or JOIN conditions are indexed, especially when filtering or joining on date ranges across multiple tables.\"}"], ["train_workload_random_89_4q", "[catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer(c_customer_sk), date_dim(d_date), store_returns(sr_ticket_number), item(i_item_sk), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and frequently filtered columns in large tables. Prioritize indexes on columns used in WHERE clauses and JOIN conditions, especially for tables with high row counts. Avoid removing indexes on columns that are part of join conditions or are frequently filtered, as this can lead to performance regressions.\"}"], ["train_workload_random_89_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure all date-related columns used in WHERE clauses for filtering are indexed, especially when they are used in conjunction with other tables in joins.\"}"], ["train_workload_random_89_4q", "[catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer(c_customer_sk), date_dim(d_date), store_returns(sr_ticket_number), item(i_item_sk), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure indexes cover join and filter conditions for large tables, especially those involved in multiple queries. Prioritize indexes on foreign keys and columns frequently used in WHERE clauses or JOIN conditions. Avoid removing indexes that support high cardinality columns or are used in multiple queries.\"}"], ["train_workload_random_89_4q", "[customer(c_customer_sk), date_dim(d_week_seq, d_date), item(i_item_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), web_site(web_site_sk), web_site(web_site_id), promotion(p_promo_sk), warehouse(w_warehouse_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Prioritize single-column indexes on frequently joined or filtered columns across large tables.\"}"], ["train_workload_random_89_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained, especially for large tables. Avoid removing indexes on columns that are used in WHERE clauses with range conditions or are part of GROUP BY and ORDER BY clauses.\"}"], ["train_workload_random_89_4q", "[customer(c_customer_sk), date_dim(d_week_seq, d_date), item(i_item_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), web_site(web_site_sk), web_site(web_site_id), promotion(p_promo_sk), warehouse(w_warehouse_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns frequently used in join conditions or where clauses.\"}"], ["train_workload_random_89_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure that all foreign key columns used in join conditions across multiple queries are indexed to prevent regression. Additionally, prioritize indexing columns that are frequently used in WHERE clauses and GROUP BY operations, especially those involving large tables.\"}"], ["train_workload_random_89_4q", "[catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer(c_customer_sk), date_dim(d_date), store_returns(sr_ticket_number), item(i_item_sk), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload. Prioritize indexes on columns frequently used in WHERE clauses and JOIN operations, especially for large tables. Avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_89_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure that indexes cover all join and filter columns used in the workload queries, especially those with high cardinality or frequently used in WHERE clauses. Avoid omitting indexes on primary key columns and foreign key columns that are frequently joined, as seen in the regression where indexes on columns like 'store_sales.ss_sold_date_sk' and 'web_sales.ws_sold_date_sk' were removed.\"}"], ["train_workload_random_89_4q", "[catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer(c_customer_sk), date_dim(d_date), store_returns(sr_ticket_number), item(i_item_sk), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all necessary indexes for join and filter conditions in the workload are included in the regression index selection. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions that are present in the improvement index but missing in the regression index, such as date_dim(d_date), catalog_sales(cs_sold_date_sk), and promotion(p_promo_sk).\"}"], ["train_workload_random_89_4q", "[customer(c_customer_sk), date_dim(d_week_seq, d_date), item(i_item_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), web_site(web_site_sk), web_site(web_site_id), promotion(p_promo_sk), warehouse(w_warehouse_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries. Avoid removing indexes that support these operations, even if they seem redundant.\"}"], ["train_workload_random_89_4q", "[customer(c_customer_sk), date_dim(d_week_seq, d_date), item(i_item_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), web_site(web_site_sk), web_site(web_site_id), promotion(p_promo_sk), warehouse(w_warehouse_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes solely on columns used in join conditions without considering their use in filter conditions. Prioritize indexes on columns that are frequently used in WHERE clauses and have high selectivity.\"}"], ["train_workload_random_89_4q", "[catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer(c_customer_sk), date_dim(d_date), store_returns(sr_ticket_number), item(i_item_sk), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure that indexes on frequently joined and filtered columns, especially those involved in large tables or subqueries, are maintained. Avoid removing indexes on columns that are used in WHERE clauses, JOIN conditions, or GROUP BY clauses in the workload, such as catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number), and promotion(p_promo_sk).\"}"], ["train_workload_random_89_4q", "[catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer(c_customer_sk), date_dim(d_date), store_returns(sr_ticket_number), item(i_item_sk), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries. Avoid redundant indexes on columns already covered by other indexes in the workload.\"}"], ["train_workload_random_89_4q", "[catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer(c_customer_sk), date_dim(d_date), store_returns(sr_ticket_number), item(i_item_sk), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure that indexes on columns frequently used in join conditions and filters, especially those involving large tables, are maintained. Avoid removing indexes on columns that are part of foreign key relationships or are used in high cardinality filters, as these are critical for query performance.\"}"], ["train_workload_random_89_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on date columns used in WHERE clauses for filtering by date ranges, especially for large tables like store_sales, catalog_sales, and web_sales, to prevent regression in query performance.\"}"], ["train_workload_random_89_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid removing indexes on columns that are part of complex queries involving multiple joins and subqueries, as these are likely to be performance-critical.\"}"], ["train_workload_random_89_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses for filtering by date ranges or specific dates are indexed, as missing indexes on these columns can lead to performance regressions.\"}"], ["train_workload_random_89_4q", "[catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer(c_customer_sk), date_dim(d_date), store_returns(sr_ticket_number), item(i_item_sk), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure indexes cover join and filter conditions for large tables, especially those involved in multiple queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across the workload, such as sales and returns identifiers, date keys, and demographic attributes.\"}"], ["train_workload_random_89_4q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure all date-related columns used in WHERE clauses are indexed, especially when filtering by date ranges or specific years, to prevent regression in query performance.\"}"], ["train_workload_random_89_4q", "[catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer(c_customer_sk), date_dim(d_date), store_returns(sr_ticket_number), item(i_item_sk), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid removing indexes that support multiple queries or complex conditions.\"}"], ["train_workload_random_89_4q", "[customer(c_customer_sk), date_dim(d_week_seq, d_date), item(i_item_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), web_site(web_site_sk), web_site(web_site_id), promotion(p_promo_sk), warehouse(w_warehouse_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Prioritize single-column indexes on frequently joined or filtered columns across large tables.\"}"], ["train_workload_random_89_4q", "[catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), customer(c_customer_sk), date_dim(d_date), store_returns(sr_ticket_number), item(i_item_sk), catalog_returns(cr_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), store(s_store_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure that indexes on frequently joined columns and columns used in WHERE clauses with high cardinality are maintained. Avoid removing indexes on columns that are part of foreign key relationships or are frequently used in subqueries and joins, such as catalog_sales(cs_sold_date_sk), catalog_returns(cr_order_number), and promotion(p_promo_sk).\"}"], ["train_workload_random_89_4q", "[customer(c_customer_sk), date_dim(d_week_seq, d_date), item(i_item_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), web_site(web_site_sk), web_site(web_site_id), promotion(p_promo_sk), warehouse(w_warehouse_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Prioritize single-column indexes on frequently joined or filtered columns across large tables.\"}"], ["train_workload_random_89_4q", "[customer(c_customer_sk), date_dim(d_week_seq, d_date), item(i_item_sk), store(s_store_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), web_site(web_site_sk), web_site(web_site_id), promotion(p_promo_sk), warehouse(w_warehouse_sk)]", " [date_dim(d_date), item(i_item_sk), customer_address(ca_address_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), store(s_store_sk), household_demographics(hd_buy_potential), web_site(web_site_sk)]", "{rule: \"Ensure indexes on columns frequently used in join conditions and filters across multiple queries, especially for large tables. Prioritize indexes on columns with high cardinality and those involved in range queries or aggregations. Avoid removing indexes that optimize join conditions and filters for large tables, as seen with the removal of indexes on 'date_dim(d_week_seq)' and 'promotion(p_promo_sk)' in the regression selection.\"}"]], "train_workload_random_91_6q": [["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on date_sk columns for tables involved in date range filtering and sales-related operations, as these are critical for performance in time-based queries.\"}"], ["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Missing indexes on columns used in join conditions or frequently filtered can lead to regressions. Specifically, ensure indexes on store_returns.sr_ticket_number, store_sales.ss_sold_date_sk, web_sales.ws_order_number, and web_sales.ws_sold_date_sk are present.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date, d_dow), customer(c_customer_sk), customer_demographics(cd_demo_sk), item(i_item_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'cd_marital_status' in 'Customer_demographics', and focus on indexing primary key columns or columns frequently used in joins and filters, like 'cd_demo_sk' in 'Customer_demographics' and 'i_item_sk' in 'item'. Additionally, ensure indexes are created on columns that are consistently used across multiple queries, such as 'd_date' in 'date_dim' and 'c_customer_sk' in 'customer', to improve query performance.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns frequently used in join conditions or filters.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes with only one column when the workload involves multiple joins on the same table. Instead, create composite indexes that cover all join columns used together in queries.\"}"], ["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins or filters on multiple columns.\"}"], ["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on date columns used in WHERE clauses for filtering large tables, especially when joining with other tables, to prevent regression in query performance.\"}"], ["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns involved in join conditions and filtering criteria across all queries in the workload. Specifically, maintain indexes on columns used in join conditions and where clauses, such as store_sales.ss_sold_date_sk, store_returns.sr_ticket_number, web_sales.ws_order_number, and web_sales.ws_sold_date_sk, to prevent regression.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{rule: \"Ensure indexes are created on primary key columns and columns frequently used in join conditions. Avoid creating indexes on columns with high cardinality or columns that are not used in filtering or join conditions. Prioritize indexes on columns that are used in WHERE clauses and have selective conditions.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date, d_dow), customer(c_customer_sk), customer_demographics(cd_demo_sk), item(i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in query predicates. Instead, focus on single-column indexes for high cardinality columns that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date, d_dow), customer(c_customer_sk), customer_demographics(cd_demo_sk), item(i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually unless the composite index is necessary for multi-column query optimization. Ensure that indexes are aligned with the workload's join and filter conditions, focusing on columns frequently used in WHERE clauses and JOIN operations.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing these with indexes on non-join columns or less frequently filtered columns, as this can lead to performance regressions.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns frequently used in join conditions or filters. Prioritize single-column indexes on primary key or foreign key columns that are commonly used in the workload.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes (e.g., date_dim(d_date_sk)) are sufficient for query optimization, especially when the workload involves frequent joins on single columns.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{rule: \"Ensure indexes are created on primary key columns and columns frequently used in join conditions. Avoid creating indexes on columns with high cardinality or columns that are not used in filtering or join conditions.\"}"], ["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on date columns used in WHERE clauses for filtering by date range, especially when joining large tables, to prevent regression in query performance.\"}"], ["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all join and filter columns used in the workload queries have corresponding indexes. Specifically, check for missing indexes on columns used in join conditions and where clauses, such as store_returns.sr_ticket_number, store_sales.ss_sold_date_sk, web_sales.ws_order_number, and web_sales.ws_sold_date_sk, which are present in the improvement index but missing in the regression index.\"}"], ["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filters on multiple columns.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date, d_dow), customer(c_customer_sk), customer_demographics(cd_demo_sk), item(i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves multiple joins and filters on these columns. Instead, prioritize individual indexes on frequently joined or filtered columns to prevent regression in query performance.\"}"], ["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns involved in join conditions and filtering criteria across all queries in the workload. Specifically, maintain indexes on columns used in join conditions with large tables and those frequently used in WHERE clauses, such as store_sales.ss_sold_date_sk, store_returns.sr_ticket_number, web_sales.ws_order_number, and web_sales.ws_sold_date_sk.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in join conditions and filters, especially for large tables. Avoid creating indexes on columns with low cardinality or those not directly involved in join conditions or filters.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date, d_dow), customer(c_customer_sk), customer_demographics(cd_demo_sk), item(i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns from different tables unless they are frequently joined together in the workload. Instead, focus on single-column indexes for primary keys and foreign keys that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date, d_dow), customer(c_customer_sk), customer_demographics(cd_demo_sk), item(i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) that include columns already indexed individually, especially when the workload involves multiple joins and filters on those columns. Instead, prioritize individual indexes on frequently joined or filtered columns to prevent redundancy and potential performance regression.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date, d_dow), customer(c_customer_sk), customer_demographics(cd_demo_sk), item(i_item_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or high selectivity, such as 'cd_marital_status', unless they are frequently used in WHERE clauses with high filtering potential. Instead, focus on indexing columns that are frequently joined or filtered, like primary keys or foreign keys, and ensure that indexes are aligned with the query patterns in the workload.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes (e.g., date_dim(d_date_sk)) are sufficient for query filters and joins, especially on large tables with high cardinality columns.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes with only one column from each table when the workload involves multiple joins on the same table. Instead, create single-column indexes on frequently joined columns across different tables to improve join performance.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing these with indexes on non-join columns or less frequently filtered columns, as this can lead to regression in query performance.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date, d_dow), customer(c_customer_sk), customer_demographics(cd_demo_sk), item(i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in query predicates. Instead, focus on single-column indexes for high cardinality columns that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns involved in join conditions and filtering criteria across all queries in the workload. Specifically, maintain indexes on columns used in join conditions and date filtering, such as ticket numbers and sold date keys, to prevent regression.\"}"], ["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex joins and filters on multiple columns.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid using composite indexes (I(C ...)) when single-column indexes (e.g., date_dim(d_date_sk)) can cover the query predicates effectively, especially for high cardinality columns or when the workload involves multiple joins and filters on individual columns.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions individually, especially for large tables.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date, d_dow), customer(c_customer_sk), customer_demographics(cd_demo_sk), item(i_item_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or high selectivity, such as 'cd_marital_status', unless they are frequently used in WHERE clauses with high filtering impact. Instead, focus on indexing columns that are frequently joined or filtered with high cardinality, such as primary keys or foreign keys like 'c_customer_sk', 'i_item_sk', and 'd_date'. Additionally, ensure that indexes are aligned with the most common query patterns and join conditions to optimize performance.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes suffice for query optimization, especially for columns frequently used in join conditions or filters.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions individually, especially for large tables.\"}"], ["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Avoid indexes on non-joinable columns or columns with high cardinality unless they are frequently used in WHERE clauses. Prioritize indexes on foreign keys and columns involved in JOIN operations.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns involved in join conditions or filtering. Prioritize single-column indexes on foreign key columns and columns frequently used in WHERE clauses.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date, d_dow), customer(c_customer_sk), customer_demographics(cd_demo_sk), item(i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes with columns that are already indexed individually, especially if they are frequently used in join conditions or filters. Prioritize single-column indexes for primary keys and foreign keys, and ensure that composite indexes do not overlap with existing single-column indexes unless necessary for specific query patterns.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date, d_dow), customer(c_customer_sk), customer_demographics(cd_demo_sk), item(i_item_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in JOINs and WHERE clauses with high selectivity, and ensure that indexes align with the workload's query patterns.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date, d_dow), customer(c_customer_sk), customer_demographics(cd_demo_sk), item(i_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves joins on these columns. Instead, focus on indexing columns that are frequently used in WHERE clauses and join conditions individually to optimize query performance.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions individually.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date, d_dow), customer(c_customer_sk), customer_demographics(cd_demo_sk), item(i_item_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially when they are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in JOINs and WHERE clauses with high selectivity, and ensure that indexes align with the workload's query patterns.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns frequently used in join conditions or filters. Prioritize single-column indexes on primary key or foreign key columns that are commonly used in the workload.\"}"], ["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all join and filter columns used in the workload queries are indexed. Specifically, check for missing indexes on columns used in join conditions and where clauses, such as store_returns.sr_ticket_number, store_sales.ss_sold_date_sk, web_sales.ws_order_number, and web_sales.ws_sold_date_sk, which are present in the improvement index but missing in the regression index.\"}"], ["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Avoid indexes on columns with high cardinality or low selectivity unless they are frequently used in joins or filters. Prioritize indexes on foreign keys and columns involved in WHERE clauses, especially those with equality conditions. Consider composite indexes for columns frequently queried together.\"}"], ["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Ensure that all date-related columns used in WHERE clauses for filtering by date ranges are indexed, as missing indexes on these columns can lead to performance regressions. Specifically, check for missing indexes on columns like 'cs_sold_date_sk', 'd_date_sk', 'ss_sold_date_sk', and 'ws_sold_date_sk' in the regression index selection.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality.\"}"], ["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Avoid indexes on columns with low cardinality or those not involved in joins or filters. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns involved in join conditions or frequently used in WHERE clauses.\"}"], ["train_workload_random_91_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns involved in join conditions and filtering criteria across all queries in the workload. Specifically, maintain indexes on columns used in join conditions and where clauses, such as order numbers and date keys, to prevent regression.\"}"], ["train_workload_random_91_6q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer(c_customer_sk), item(i_item_sk), catalog_returns(cr_order_number, cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", " [Date_dim(d_date), Customer_address(ca_address_sk), Customer_demographics(cd_marital_status, cd_demo_sk), Web_returns(wr_item_sk), Catalog_returns(cr_item_sk), Customer(c_customer_sk)]", "{rule: \"Ensure indexes are created on primary key columns and foreign key columns used in joins, especially for large tables. Avoid indexing columns with high cardinality and low selectivity unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns involved in WHERE clauses, JOIN conditions, and ORDER BY clauses in the workload queries.\"}"]], "train_workload_random_92_10q": [["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Ensure that the regression index selection includes composite indexes that cover both join and filter conditions, especially for large tables with high cardinality columns, to prevent performance degradation.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Ensure indexes on foreign key columns and columns involved in join conditions across large tables, especially when they are used in WHERE clauses or GROUP BY operations. Avoid removing indexes on columns that are frequently used in join conditions or as foreign keys, as this can lead to performance regressions.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join conditions involve large tables. Instead, focus on indexing columns that are used in WHERE clauses with selective conditions or columns that are used in GROUP BY or ORDER BY clauses to improve query performance.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure composite indexes are maintained for columns frequently used together in join conditions or where clauses, especially for large tables. Avoid removing composite indexes that cover multiple columns used in conjunction, as this can lead to performance regressions.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily used in join conditions across multiple queries, especially if they are primary keys or foreign keys, as this can lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in filtering conditions or are less frequently joined, such as those involved in WHERE clauses with specific values or ranges.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used in join conditions across multiple queries. Instead, focus on indexing columns that are used in WHERE clauses, especially those with high cardinality, and ensure that composite indexes cover the most common query patterns.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid multi-column indexes when single-column indexes suffice for query conditions. Prioritize single-column indexes on frequently joined or filtered columns, especially those involved in equality conditions or foreign key relationships.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these are likely to be covered by existing indexes or constraints. Instead, focus on indexing columns that are used in WHERE clauses with specific conditions or filters, especially those involving range queries or equality checks on non-key attributes.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Ensure that composite indexes are used for join operations involving multiple columns, especially when the workload involves complex queries with multiple joins and filters. Avoid replacing composite indexes with single-column indexes if the workload heavily relies on multi-column joins and filtering conditions.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join involves large tables. Instead, focus on indexing columns that are used in WHERE clauses with selective conditions or columns that are part of smaller tables to improve query performance.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining operations across multiple queries.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the individual indexes are frequently used in join conditions or where clauses. Instead, focus on indexing columns that are used in filtering conditions or join conditions that are not already covered by existing indexes.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid creating single-column indexes on high cardinality columns that are frequently used in join conditions, as they may not provide significant performance benefits and can lead to regression when compared to multi-column indexes that cover the join conditions more comprehensively.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes on columns that are not frequently filtered or joined, as they may not provide significant performance benefits.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for high cardinality columns and multi-column indexes for frequently joined columns.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple queries, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses with specific conditions or filters, especially those involving large tables or complex conditions.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in join or filter conditions across multiple queries. Prioritize single-column indexes on columns that are consistently used in join conditions or filters across the workload.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid missing indexes on frequently joined columns and columns used in WHERE clauses, especially for large tables. Prioritize indexing on primary keys and foreign keys used in joins, and date columns used in range queries.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns involved in join conditions and filtering criteria across multiple queries, especially for high cardinality columns like primary keys or foreign keys. Avoid removing indexes that are frequently used in join conditions, such as customer.c_customer_sk and catalog_sales.cs_sold_date_sk, which are critical for query performance.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across all queries, especially for high cardinality columns and those frequently used in WHERE clauses. Prioritize composite indexes that align with query patterns, such as those involving multiple columns in joins or filters, to prevent regression.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and where clauses, especially for large tables. Avoid single-column indexes on columns that are part of composite keys in the workload.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for columns that are frequently filtered or joined on, as seen in the improvement index selection.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for high cardinality columns and composite indexes for multiple conditions.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for columns frequently used in WHERE clauses and JOIN operations. Prioritize composite indexes that align with query patterns, such as those involving multiple columns in join conditions or filters, to prevent regression.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables, to prevent regressions. Prioritize indexing on columns frequently used in WHERE clauses and join conditions across multiple queries.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid multi-column indexes when single-column indexes suffice for query conditions, especially for columns frequently used in WHERE clauses or JOIN conditions. Prioritize single-column indexes on primary keys and foreign keys to optimize query performance.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses with specific filters or are part of GROUP BY or ORDER BY operations to improve query performance.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables, to prevent regression in query performance.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Ensure that indexes cover both join keys and frequently filtered columns. Avoid missing indexes on primary join keys and date columns used in WHERE clauses.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure composite indexes are maintained for columns frequently used together in join conditions or where clauses, especially for large tables. Avoid removing composite indexes that optimize multi-column access patterns.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid creating single-column indexes on columns that are frequently used in join conditions or where clauses with multiple columns, as multi-column indexes can be more efficient. Prioritize multi-column indexes that match the query patterns, especially for large tables and frequently joined columns.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join involves large tables. Instead, focus on indexing columns that are used in WHERE clauses with selective conditions or columns that are part of GROUP BY or ORDER BY clauses to improve query performance.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all primary key columns and frequently joined columns are indexed. Avoid removing indexes on columns that are used in WHERE clauses, JOIN conditions, or are part of GROUP BY and ORDER BY clauses in the workload.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Ensure that composite indexes are used for join conditions involving multiple columns, especially when the workload involves complex queries with multiple joins. Avoid replacing composite indexes with single-column indexes if the workload heavily relies on multi-column join conditions.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Avoid creating separate indexes on columns that are frequently used together in join conditions or where clauses, as seen with web_sales(ws_item_sk) and catalog_returns(cr_item_sk, cr_order_number). Instead, consider composite indexes that cover these multi-column conditions to prevent regression.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index unless they are frequently used independently in queries. Prioritize indexing columns that are used in WHERE clauses and JOIN conditions, especially those with high cardinality or those involved in frequent filtering operations. Consider the workload and focus on indexing columns that optimize the most common query patterns.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns involved in join conditions and filters across multiple queries, especially for high cardinality columns like customer.c_customer_sk and catalog_sales.cs_sold_date_sk, which are missing in the regression index selection.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Avoid single-column indexes when composite indexes can better serve the workload's query patterns.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition with another indexed column, especially if the join condition is frequently used in the workload. Instead, focus on indexing columns that are used in WHERE clauses with high selectivity or are part of GROUP BY or ORDER BY clauses.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in query predicates. Focus on single-column indexes for high cardinality columns that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Ensure that all primary key and frequently joined columns, especially those used in WHERE clauses and JOIN conditions, are indexed. Avoid removing indexes on columns that are part of composite keys or are frequently used in filtering and joining operations, such as 'customer.c_customer_sk', 'catalog_sales.cs_sold_date_sk', 'item.i_item_id', 'store_returns.sr_returned_date_sk', 'web_sales.ws_item_sk', and 'web_sales.ws_sold_date_sk'. Additionally, maintain composite indexes that cover multiple columns used together in queries, like 'store_returns.sr_ticket_number, store_returns.sr_returned_date_sk' and 'store_sales.ss_sold_date_sk, store_sales.ss_customer_sk'.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Avoid single-column indexes when composite indexes can better serve the workload's query patterns.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid missing indexes on frequently joined columns and columns used in WHERE clauses, especially for large tables.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining operations across multiple queries.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all primary key columns and frequently joined columns are indexed. Avoid removing indexes on columns that are used in WHERE clauses, JOIN conditions, or GROUP BY clauses in the workload queries.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily used in joins across multiple queries, especially if they are primary keys or foreign keys, as this can lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in filtering conditions or are less frequently joined, such as those used in WHERE clauses with specific values or ranges.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Avoid relying solely on single-column indexes when multi-column conditions are prevalent in the workload.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for high cardinality columns that are frequently filtered or joined on, as seen in the improvement index selection.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on columns involved in join conditions across large tables, especially when they are frequently used in the workload. Avoid removing indexes on primary key or foreign key columns that are heavily utilized in joins, such as customer.c_customer_sk and catalog_sales.cs_sold_date_sk.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily used in join conditions across multiple queries, especially if they are primary keys or foreign keys, as this can lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in filtering conditions or are less frequently joined, such as those used in WHERE clauses with specific values or ranges.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid using single-column indexes on columns that are part of frequent multi-column joins or filters, as this can lead to regressions in query performance.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join conditions involve large tables. Instead, focus on indexing columns that are used in WHERE clauses with selective conditions or are part of smaller tables to improve query performance.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all primary key columns used in join conditions are indexed, especially those with high cardinality and frequent usage in the workload, such as 'customer.c_customer_sk' and 'catalog_sales.cs_sold_date_sk'. Avoid removing indexes on such columns unless there is a clear performance benefit or redundancy.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Ensure that composite indexes are used for join conditions and filtering columns in large tables, especially when multiple columns are involved in the join or filter conditions. Avoid using single-column indexes on large tables when the workload involves complex joins and filters, as this can lead to performance regressions.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition with another table's indexed columns, especially when the join condition is frequently used in the workload. Instead, focus on indexing columns that are used in WHERE clauses with specific filters or aggregations, and ensure that these columns are not already indexed in the join conditions.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining operations across multiple queries.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the individual indexes are frequently used in join conditions or where clauses. Instead, focus on indexing columns that are used in filtering conditions or join conditions that are not already covered by existing indexes.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in join or filter conditions across multiple queries. Instead, focus on single-column indexes for columns that are consistently used in join conditions or filters across the workload.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition with another table's indexed columns, especially if the join condition is frequently used in the workload. Instead, focus on indexing columns that are used in WHERE clauses with selective conditions or are part of GROUP BY clauses to improve query performance.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for columns that are frequently filtered or joined on, as seen in the improvement index selection.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Ensure that indexes on frequently joined and filtered columns, especially those used in WHERE clauses and JOIN conditions, are maintained. Avoid removing indexes on primary keys or foreign keys that are heavily used in the workload, such as 'customer.c_customer_sk', 'catalog_sales.cs_sold_date_sk', 'item.i_item_id', 'store_returns.sr_returned_date_sk', and 'web_sales.ws_item_sk'. Additionally, composite indexes that cover multiple columns used together in queries, like 'store_returns.sr_ticket_number, store_returns.sr_returned_date_sk', should be preserved to prevent performance regressions.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_manufact_id), date_dim(d_date_sk), web_returns(wr_item_sk), store(s_store_id), item(i_item_id), promotion(p_promo_sk), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily used in join conditions across multiple queries, especially if they are primary keys or foreign keys, as this can lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in filtering conditions or are less frequently joined, such as those used in WHERE clauses with specific values or ranges.\"}"], ["train_workload_random_92_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_customer_sk)]", "[web_sales(ws_item_sk), date_dim(d_date), date_dim(d_date_sk), catalog_returns(cr_item_sk), catalog_returns(cr_order_number), catalog_returns(cr_returning_customer_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing composite indexes that cover multiple columns used together in queries, especially those involving large tables or frequent joins.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[item(i_item_sk, i_manufact_id, i_item_id), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_item_sk, cs_sold_date_sk, cs_bill_customer_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk, ws_sold_date_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), household_demographics(hd_buy_potential), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_returning_customer_sk), customer_address(ca_state), store_sales(ss_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index unless they are frequently used independently in queries. Prioritize indexes on columns involved in join conditions and filters with high cardinality or frequent use in WHERE clauses.\"}"], ["train_workload_random_92_10q", " [Web_returns(wr_item_sk, wr_order_number), Customer_demographics(cd_marital_status), Customer_address(ca_gmt_offset)]", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple queries, as these are likely to be covered by existing indexes or constraints. Instead, focus on indexing columns that are used in WHERE clauses with specific filtering conditions, especially those involving range queries or equality checks on non-key attributes.\"}"]], "train_workload_random_93_6q": [["train_workload_random_93_6q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions across multiple queries. Prioritize single-column indexes for columns that are consistently used in filtering or joining operations, especially in large tables.\"}"], ["train_workload_random_93_6q", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables and frequently joined columns, to prevent regression in query performance.\"}"], ["train_workload_random_93_6q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that multi-column indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when they appear together in multiple queries. Avoid using single-column indexes when multi-column indexes can better optimize the workload.\"}"], ["train_workload_random_93_6q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes for columns frequently used together in join conditions, especially when they appear in multiple queries. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_93_6q", " [date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on join keys are consistent with the workload's join patterns. Avoid adding indexes on columns that are not frequently used in joins or filters, as seen with the unnecessary index on web_returns(wr_order_number, wr_item_sk) in the regression selection.\"}"], ["train_workload_random_93_6q", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure indexes on foreign key columns used in joins and filters, especially for large tables. Avoid unnecessary indexes on columns with low cardinality or not involved in frequent joins or filters.\"}"], ["train_workload_random_93_6q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Avoid redundant indexes on columns already covered by composite indexes. Prioritize indexes on columns involved in multiple queries, especially those with high cardinality or used in WHERE clauses.\"}"], ["train_workload_random_93_6q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and filters across multiple tables, especially those with high cardinality or frequently used in WHERE clauses. Prioritize composite indexes for columns used together in join conditions, and avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_93_6q", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions, especially if they are not part of the primary filtering criteria. Instead, focus on single-column indexes for columns that are frequently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_93_6q", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized, especially when they are frequently used across multiple queries. Avoid removing indexes on columns that are part of composite keys in join conditions, as this can lead to performance regressions.\"}"], ["train_workload_random_93_6q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that multi-column indexes are created for columns frequently used together in join conditions and where clauses, especially for large tables. Avoid creating single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_93_6q", " [date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Prioritize indexing columns involved in join conditions and filters that are frequently used across multiple queries, especially those with high cardinality or large tables. Avoid redundant indexes on columns that are already covered by existing indexes or are less frequently queried.\"}"], ["train_workload_random_93_6q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that multi-column indexes are used for columns frequently joined together or filtered together in WHERE clauses, especially when they involve large tables or are part of complex queries. Avoid using single-column indexes when multi-column indexes can better optimize the query performance by covering more query conditions.\"}"], ["train_workload_random_93_6q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included, especially when they are frequently used in the workload queries. Avoid omitting composite indexes that cover multiple columns used together in join or filter conditions, as seen in the improvement index with catalog_returns(cr_order_number) and customer_demographics(cd_demo_sk, cd_marital_status).\"}"], ["train_workload_random_93_6q", " [date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover all join conditions and filtering columns in the workload. Avoid adding unnecessary columns to indexes that are not used in join conditions or filters, as this can lead to regression by increasing index size and maintenance overhead.\"}"], ["train_workload_random_93_6q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index in the improvement selection, as this can lead to redundancy and potential regression. Instead, focus on maintaining or enhancing composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_93_6q", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations to optimize query performance.\"}"], ["train_workload_random_93_6q", " [date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Avoid indexing columns that are already indexed in other tables when they are used in join conditions, especially if the join condition involves large tables. Prioritize indexing columns that are frequently used in WHERE clauses and are not already indexed in other tables.\"}"], ["train_workload_random_93_6q", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions. Focus on indexing columns that are consistently used in filtering or joining operations across multiple queries in the workload.\"}"], ["train_workload_random_93_6q", " [date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized over indexes on individual columns used in WHERE clauses, especially when the workload involves complex joins across multiple tables.\"}"], ["train_workload_random_93_6q", " [date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on join keys are consistent with the workload's join patterns. Avoid adding indexes on columns that are not frequently used in joins or filters, as seen with the regression index on 'web_returns(wr_order_number, wr_item_sk)' and 'web_site(web_site_sk)', which are not utilized in the workload queries.\"}"], ["train_workload_random_93_6q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure indexes cover join conditions and filter conditions. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_93_6q", " [date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in join conditions or filters in the workload. Prioritize indexing columns that are involved in multiple queries, especially those used in join conditions and where clauses. Additionally, ensure that indexes do not include unnecessary columns that are not used in the workload, as this can lead to regression in query performance.\"}"], ["train_workload_random_93_6q", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables and frequently joined columns, to prevent regression in query performance.\"}"], ["train_workload_random_93_6q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that composite indexes in the regression selection do not omit critical single-column indexes from the improvement selection, especially for columns frequently used in join conditions or where clauses, such as 'cr_order_number', 'cr_returned_date_sk', 'cs_sold_date_sk', 'd_date_sk', 'i_item_sk', and 'sr_ticket_number'.\"}"], ["train_workload_random_93_6q", " [date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these are likely to be covered by existing indexes or constraints. Instead, focus on indexing columns that are used in WHERE clauses or as part of GROUP BY or ORDER BY operations to improve query performance.\"}"], ["train_workload_random_93_6q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Ensure that multi-column indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when they are part of large tables or have high cardinality. Avoid using single-column indexes when multi-column indexes can better optimize query performance by covering more query conditions.\"}"], ["train_workload_random_93_6q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and filters, especially for large tables. Prioritize composite indexes for columns frequently used together in join conditions, such as (cr_item_sk, cr_order_number) in catalog_returns, and ensure coverage for date columns used in range filters, like d_date_sk in date_dim.\"}"], ["train_workload_random_93_6q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index unless the single-column index is frequently used independently in queries. Prioritize composite indexes that cover multiple columns used together in WHERE clauses or JOIN conditions, especially for large tables.\"}"], ["train_workload_random_93_6q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure indexes cover join conditions and filter conditions. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_93_6q", " [date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in join conditions or filters in the workload queries. Prioritize indexing columns that are involved in multiple queries, especially those used in join conditions and where clauses. Additionally, consider the cardinality and data distribution of the columns to ensure the indexes are beneficial.\"}"], ["train_workload_random_93_6q", "[I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index unless the single-column index is frequently used independently in queries. Prioritize composite indexes that cover multiple columns used together in join conditions or filters, especially when they span across multiple tables in complex queries.\"}"], ["train_workload_random_93_6q", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk)]", "[item(i_item_sk), web_returns(wr_order_number, wr_item_sk), date_dim(d_date_sk, d_date, d_year), store(s_store_sk), promotion(p_promo_sk), warehouse(w_warehouse_sk), web_site(web_site_sk), catalog_returns(cr_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in filtering or joining operations in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations to optimize query performance.\"}"], ["train_workload_random_93_6q", " [date_dim(d_date_sk, d_date), promotion(p_promo_sk), item(i_item_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[store(s_store_sk), date_dim(d_date_sk), store_returns(sr_returned_date_sk), web_sales(ws_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_item_sk, cr_order_number), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions across multiple queries, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions that are not covered by existing indexes.\"}"]], "train_workload_random_94_4q": [["train_workload_random_94_4q", "[date_dim(d_date_sk, d_date, d_week_seq), web_returns(wr_order_number, wr_item_sk), item(i_manufact_id, i_item_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), date_dim(d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially if the individual indexes are frequently used in the workload. Instead, focus on creating composite indexes that align with the query patterns and join conditions in the workload.\"}"], ["train_workload_random_94_4q", " [date_dim(d_date_sk, d_date), item(i_current_price, i_manufact_id), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in query predicates. Focus on single-column indexes for columns that are consistently used in WHERE clauses or JOIN conditions across multiple queries.\"}"], ["train_workload_random_94_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{\"rule\": \"Ensure that all date-related columns used in join conditions or filters in the workload are indexed. In this case, the regression index selection missed indexing 'catalog_sales.cs_sold_date_sk', which is used in multiple queries for filtering and joining, leading to potential performance regression.\"}"], ["train_workload_random_94_4q", "[date_dim(d_date_sk, d_date, d_week_seq), web_returns(wr_order_number, wr_item_sk), item(i_manufact_id, i_item_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), date_dim(d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index in the improvement selection, especially if they are frequently used in join conditions or filters. Prioritize composite indexes that cover multiple columns used together in queries over individual column indexes.\"}"], ["train_workload_random_94_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations to optimize query performance.\"}"], ["train_workload_random_94_4q", " [date_dim(d_date_sk, d_date), item(i_current_price, i_manufact_id), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns involved in join conditions or filters. Prioritize single-column indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date_dim(d_date_sk), item(i_item_sk), and store_returns(sr_ticket_number).\"}"], ["train_workload_random_94_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used as foreign keys or are part of join conditions in the workload. Instead, prioritize single-column indexes on these columns to optimize query performance.\"}"], ["train_workload_random_94_4q", "[date_dim(d_date_sk, d_date, d_week_seq), web_returns(wr_order_number, wr_item_sk), item(i_manufact_id, i_item_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), date_dim(d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes with only one column from a table when the workload involves multiple columns from the same table in join or filter conditions. Instead, create composite indexes that cover all relevant columns used together in queries.\"}"], ["train_workload_random_94_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload, especially if they are already covered by existing indexes. In this case, the addition of the index on web_returns.wr_returned_date_sk may not be necessary as it is not a primary filter or join condition in the workload.\"}"], ["train_workload_random_94_4q", " [date_dim(d_date_sk, d_date), item(i_current_price, i_manufact_id), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in query predicates. Focus on indexing columns that are used in join conditions and filters across multiple queries in the workload.\"}"], ["train_workload_random_94_4q", " [date_dim(d_date_sk, d_date), item(i_current_price, i_manufact_id), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in filtering conditions and join operations across multiple queries in the workload.\"}"], ["train_workload_random_94_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually in the improvement index selection, especially when the workload involves frequent joins and filters on those columns. Instead, prioritize single-column indexes that align with the join and filter conditions in the workload.\"}"], ["train_workload_random_94_4q", " [date_dim(d_date_sk, d_date), item(i_current_price, i_manufact_id), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in query predicates. Focus on indexing columns that are commonly joined or filtered together across multiple queries in the workload.\"}"], ["train_workload_random_94_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already covered by single-column indexes in the improvement selection, especially when the workload involves frequent joins and filters on those columns. Prioritize single-column indexes on primary keys and foreign keys used in joins and filters.\"}"], ["train_workload_random_94_4q", " [date_dim(d_date_sk, d_date), item(i_current_price, i_manufact_id), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing composite indexes. Ensure that indexes are aligned with the query patterns, focusing on join and filter conditions. Remove unnecessary single-column indexes if a composite index already covers the query needs.\"}"], ["train_workload_random_94_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload, especially if they are already covered by existing indexes. In this case, the addition of the index on web_returns.wr_returned_date_sk may not be necessary as it is not a primary filter or join condition in the provided workload.\"}"], ["train_workload_random_94_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually and are frequently used in join conditions or filters, as this can lead to regression by increasing index maintenance overhead and reducing query performance.\"}"], ["train_workload_random_94_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are frequently used as join keys or filter conditions in multiple queries. Instead, prioritize single-column indexes on these columns to improve query performance across the workload.\"}"], ["train_workload_random_94_4q", " [date_dim(d_date_sk, d_date), item(i_current_price, i_manufact_id), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already covered by single-column indexes in the improvement set, especially when the workload involves frequent joins or filters on those columns. Prioritize single-column indexes that align with the join and filter conditions in the workload.\"}"], ["train_workload_random_94_4q", " [date_dim(d_date_sk, d_date), item(i_current_price, i_manufact_id), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in query predicates. Prioritize indexing columns that are used in join conditions and filters across multiple queries in the workload.\"}"], ["train_workload_random_94_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_94_4q", "[date_dim(d_date_sk, d_date, d_week_seq), web_returns(wr_order_number, wr_item_sk), item(i_manufact_id, i_item_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), date_dim(d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes with only one column from each table when the workload involves multiple joins and filters on multiple columns from the same table. Instead, create composite indexes that cover all the columns involved in joins and filters for each table.\"}"], ["train_workload_random_94_4q", " [date_dim(d_date_sk, d_date), item(i_current_price, i_manufact_id), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns involved in join conditions or filters. Prioritize single-column indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date_dim(d_date_sk), item(i_item_sk), and store_returns(sr_ticket_number).\"}"], ["train_workload_random_94_4q", " [date_dim(d_date_sk, d_date), item(i_current_price, i_manufact_id), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in query predicates. Focus on indexing columns that are used in join conditions and filters, especially those that appear in WHERE clauses and JOIN conditions across multiple queries in the workload.\"}"], ["train_workload_random_94_4q", "[date_dim(d_date_sk, d_date, d_week_seq), web_returns(wr_order_number, wr_item_sk), item(i_manufact_id, i_item_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), date_dim(d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the workload involves frequent joins and filters on those columns. Instead, focus on creating composite indexes that align with the query patterns, such as those involving multiple columns in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_94_4q", "[date_dim(d_date_sk), promotion(p_promo_sk), customer_address(ca_address_sk), store(s_store_sk), web_site(web_site_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for columns that are frequently filtered or joined on, as seen in the improvement index selection.\"}"], ["train_workload_random_94_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{\"rule\": \"Ensure that indexes on date columns used in join conditions are consistently applied across all relevant tables in the workload to prevent regression. Specifically, if an index is added to a date column in one table (e.g., web_returns.wr_returned_date_sk), ensure similar indexes are present on equivalent date columns in other tables (e.g., catalog_sales.cs_sold_date_sk) to maintain performance improvements.\"}"], ["train_workload_random_94_4q", "[date_dim(d_date_sk, d_date, d_week_seq), web_returns(wr_order_number, wr_item_sk), item(i_manufact_id, i_item_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), date_dim(d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already part of single-column indexes in the improvement set, especially when the workload involves frequent joins and filters on those columns. Prioritize single-column indexes that align with the join and filter conditions in the workload.\"}"], ["train_workload_random_94_4q", " [date_dim(d_date_sk, d_date), item(i_current_price, i_manufact_id), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially if they are used in multiple queries across the workload.\"}"], ["train_workload_random_94_4q", " [date_dim(d_date_sk, d_date), item(i_current_price, i_manufact_id), store_returns(sr_ticket_number, sr_item_sk), catalog_returns(cr_order_number), web_returns(wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing composite indexes. Ensure that indexes are aligned with the query patterns, focusing on join and filter conditions. Remove unnecessary single-column indexes if a composite index already covers the query requirements.\"}"], ["train_workload_random_94_4q", "[date_dim(d_date_sk, d_date, d_week_seq), web_returns(wr_order_number, wr_item_sk), item(i_manufact_id, i_item_sk), customer_address(ca_address_sk), catalog_returns(cr_item_sk), store(s_store_sk), promotion(p_promo_sk), web_site(web_site_sk), date_dim(d_year)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the workload involves frequent joins and filters on those columns. Instead, focus on creating composite indexes that align with the query patterns, such as those involving multiple columns in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_94_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid adding indexes on columns that are not used in join conditions or filtering criteria in the workload queries, especially if they are already covered by existing indexes. In this case, the addition of the index on web_returns.wr_returned_date_sk in the regression index selection does not correspond to any join or filtering condition in the workload, leading to potential regression.\"}"], ["train_workload_random_94_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload, especially if they are already covered by existing indexes. In this case, the addition of the index on web_returns.wr_returned_date_sk may not be necessary as it is not frequently used in the workload compared to catalog_sales.cs_sold_date_sk, which was removed in the regression index selection.\"}"], ["train_workload_random_94_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C item.i_manufact_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload, especially if they are already covered by existing indexes. In this case, the addition of the index on web_returns.wr_returned_date_sk may not be necessary as it is not frequently used in the workload compared to catalog_sales.cs_sold_date_sk, which was removed in the regression index selection.\"}"]], "train_workload_random_96_5q": [["train_workload_random_96_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_gmt_offset), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index, especially if the composite index covers multiple columns used together in queries. Prioritize composite indexes that align with join conditions and filter criteria in the workload.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{rule: \"Ensure indexes on foreign key columns used in joins and where conditions, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes. Prioritize indexes on columns frequently used in filtering and joining operations across multiple queries.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating indexes on columns that are not frequently used in join or filter conditions across the workload. Focus on indexing columns that are consistently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality and those that are part of large tables. Ensure that indexes support the most common query patterns and avoid redundant or overlapping indexes that do not contribute to query performance.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance.\"}"], ["train_workload_random_96_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_gmt_offset), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{\"rule\": \"Avoid creating indexes on individual columns that are already part of a composite index covering the same query patterns, as this can lead to redundant indexes and potential performance regressions. Instead, focus on maintaining composite indexes that align with the query's join and filter conditions.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually and are frequently used in join conditions or filters. Instead, prioritize single-column indexes on columns that are used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables.\"}"], ["train_workload_random_96_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_gmt_offset), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of composite indexes in the improvement set, especially if they are frequently used in join conditions. Instead, focus on composite indexes that cover multiple columns used together in queries to optimize performance.\"}"], ["train_workload_random_96_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year, d_week_seq), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{rule: \"Ensure multi-column indexes are used for columns frequently involved in join conditions and filters, especially when the workload involves complex queries with multiple joins and filters. Avoid single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_96_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year, d_week_seq), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by composite indexes in the improvement selection. Ensure that composite indexes are utilized effectively to cover multiple query conditions, reducing the need for individual column indexes that may lead to regression.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually and are frequently used in join conditions or filters. Instead, prioritize single-column indexes on columns that are consistently used across multiple queries, especially those involved in join operations and where clauses.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing indexes on primary key columns with those on non-key columns unless there is a clear performance benefit. Maintain indexes on date columns used in filtering conditions to optimize range queries.\"}"], ["train_workload_random_96_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_gmt_offset), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating single-column indexes on columns that are frequently used together in join conditions or filters. Instead, create composite indexes that cover these columns to optimize query performance and prevent regression.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_96_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_gmt_offset), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{\"rule\": \"Avoid creating single-column indexes on columns that are already part of a multi-column index, especially if the multi-column index covers the same query patterns. Prioritize multi-column indexes that match the join and filter conditions in the workload to prevent regression.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially those with high cardinality or those that are part of large tables.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually and frequently used in join conditions or filters, as this can lead to regression by increasing index maintenance overhead without significant query performance benefits.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{\"rule\": \"Ensure that indexes on date columns are on the primary key or surrogate key (e.g., d_date_sk) rather than on non-key date columns (e.g., d_date) to avoid regression. Additionally, maintain indexes on frequently joined columns across tables, such as item_sk and order_number, to optimize join operations.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually and are frequently used in join conditions or filters. Instead, prioritize single-column indexes on columns that are consistently used across multiple queries, especially those involved in join operations and where clauses.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables or are part of foreign key relationships, as this can lead to redundant indexes and potential performance regressions. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially those involved in filtering large datasets or improving join performance.\"}"], ["train_workload_random_96_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year, d_week_seq), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{rule: \"Ensure that multi-column indexes are used for columns frequently queried together, especially in join and filter conditions, to avoid regression. Avoid single-column indexes when multi-column indexes can better optimize the workload.\"}"], ["train_workload_random_96_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_gmt_offset), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index, especially if the composite index covers multiple columns used together in queries. Prioritize composite indexes that align with the join conditions and filter criteria in the workload.\"}"], ["train_workload_random_96_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year, d_week_seq), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing composite indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially for join conditions and filters. Ensure indexes are aligned with the workload's most frequent query patterns and avoid indexing columns individually when they are part of a composite index that serves the same purpose.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing indexes on primary key columns with those on non-key columns unless there is a clear performance benefit. Prioritize indexes on columns frequently used in WHERE clauses and join conditions across multiple queries.\"}"], ["train_workload_random_96_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year, d_week_seq), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index unless the single-column index is necessary for specific query patterns. Prioritize composite indexes that cover multiple columns used together in WHERE clauses or JOIN conditions to optimize query performance.\"}"], ["train_workload_random_96_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year, d_week_seq), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing indexes. Prioritize composite indexes that cover multiple columns used together in queries, especially for join conditions and filters. Ensure indexes align with the workload's most frequent query patterns and avoid indexing columns with low cardinality or those not involved in filtering or joining operations.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{rule: \"Ensure indexes on columns used in join conditions and where clauses, especially for large tables. Avoid redundant indexes on columns with existing indexes that cover the same query patterns.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations to optimize query performance.\"}"], ["train_workload_random_96_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_gmt_offset), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating single-column indexes on columns that are already part of a multi-column index used in the workload, as this can lead to regression by increasing index maintenance overhead without providing additional query performance benefits.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing indexes on primary key columns with those on non-key columns unless there is a clear performance benefit. Prioritize indexes on columns frequently used in WHERE clauses and join conditions across multiple queries.\"}"], ["train_workload_random_96_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_gmt_offset), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating single-column indexes on columns that are already part of a multi-column index used in the workload, as this can lead to regression by increasing index maintenance overhead without providing additional query performance benefits.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations to optimize query performance.\"}"], ["train_workload_random_96_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year, d_week_seq), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Prioritize composite indexes that cover multiple columns used together in join conditions or filtering criteria, especially when they are frequently accessed together in the workload.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating indexes on columns that are not frequently used in join or filter conditions across the workload. Prioritize indexing columns that are consistently used in WHERE clauses, JOIN conditions, or GROUP BY clauses, especially those with high cardinality or those that are part of large tables. Remove indexes on columns that are not part of the workload's critical path, such as those not appearing in the workload's queries or those that are only used in infrequent or non-performance-critical queries.\"}"], ["train_workload_random_96_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year, d_week_seq), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing composite indexes, especially when the composite index includes the same columns in the same order. Prioritize composite indexes that cover multiple columns used together in queries over single-column indexes that may lead to regression by increasing maintenance overhead without significant query performance benefits.\"}"], ["train_workload_random_96_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_gmt_offset), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{rule: \"Avoid creating indexes on individual columns that are already part of a composite index used in the workload, as this can lead to regression by increasing index maintenance overhead without providing additional query performance benefits.\"}"], ["train_workload_random_96_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year, d_week_seq), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing composite indexes. Ensure that composite indexes are utilized effectively by including all necessary columns in a single index rather than creating multiple single-column indexes.\"}"], ["train_workload_random_96_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year, d_week_seq), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing composite indexes. Ensure that composite indexes are utilized effectively by analyzing query patterns and column usage in joins and filters.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Additionally, ensure that indexes on columns involved in join conditions are composite indexes if multiple columns are used together in the join.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations to optimize query performance.\"}"], ["train_workload_random_96_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_gmt_offset), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index covering the same query conditions, especially when the composite index is more selective and relevant to the workload.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{\"rule\": \"Ensure that indexes on date columns are on the primary key or frequently joined columns (e.g., date_dim(d_date_sk) instead of date_dim(d_date)) to avoid performance regressions. Additionally, maintain indexes on columns used in WHERE clauses with high cardinality or frequent filtering, such as promotion(p_promo_sk) and household_demographics(hd_buy_potential).\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially those with high cardinality or those that are part of large tables.\"}"], ["train_workload_random_96_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_gmt_offset), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of composite indexes, especially when the composite index covers multiple columns used together in queries. Prioritize composite indexes that match the query patterns, such as those involving joins and filters on multiple columns.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid replacing indexes on primary key columns with those on non-key columns unless there is a clear performance benefit. Prioritize indexes on columns frequently used in WHERE clauses and join conditions across multiple queries.\"}"], ["train_workload_random_96_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year, d_week_seq), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing composite indexes. Ensure that composite indexes are utilized effectively by including all necessary columns in the index to cover the query predicates and joins, reducing the need for additional single-column indexes.\"}"], ["train_workload_random_96_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year, d_week_seq), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection, especially if they are part of composite indexes. Prioritize composite indexes that cover multiple columns used together in queries over single-column indexes that may lead to redundancy.\"}"], ["train_workload_random_96_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year, d_week_seq), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{rule: \"Ensure that multi-column indexes are used for columns frequently queried together, especially in join and filter conditions, to prevent regression. Avoid single-column indexes when multi-column indexes can better optimize the workload.\"}"], ["train_workload_random_96_5q", "[item(i_item_sk, i_item_id), date_dim(d_date_sk, d_year, d_week_seq), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating redundant indexes on columns that are already covered by existing composite indexes, especially when the composite index includes the primary key or frequently joined columns. Prioritize composite indexes that cover multiple columns used together in queries over single-column indexes that may lead to regression by increasing maintenance overhead without significant query performance improvement.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already part of single-column indexes in the improvement set, especially when the workload involves frequent joins and filters on those columns. Prioritize single-column indexes for columns used in WHERE clauses and JOIN conditions to prevent regression.\"}"], ["train_workload_random_96_5q", " [date_dim(d_date, d_date_sk), customer_address(ca_gmt_offset), web_returns(wr_item_sk, wr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), date_dim(d_date), customer_address(ca_address_sk), catalog_returns(cr_item_sk, cr_order_number), web_returns(wr_item_sk, wr_order_number), store_returns(sr_ticket_number), store(s_store_id), store(s_store_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be already optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or GROUP BY operations, especially if they are not part of a foreign key relationship.\"}"], ["train_workload_random_96_5q", "[date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), household_demographics(hd_buy_potential)]", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance.\"}"]], "train_workload_random_97_6q": [["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that composite indexes are created on columns frequently used together in join and filter conditions, especially for large tables. Avoid creating indexes on columns that are not used in the workload or are not part of frequent join/filter conditions. Prioritize indexes on columns with high cardinality and those involved in range queries or date filtering.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in join conditions and filters, especially for large tables. Prioritize indexes on columns involved in date range queries and those used in multiple queries across the workload.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used in filtering or joining across multiple queries, especially for large tables. Prioritize indexes on columns with high cardinality and those involved in range queries or equality conditions.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing composite indexes that cover multiple columns used together in queries, especially when they are frequently used in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Prioritize indexes on columns with high cardinality and those involved in range queries or date filters.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that multi-column indexes are used for columns frequently joined together or filtered together in WHERE clauses, especially for large tables. Avoid using single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes for columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as date keys and item keys. Avoid indexes on columns with low cardinality or those not directly involved in filtering or joining operations.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Prioritize indexes on columns involved in range queries and those with high cardinality. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in join conditions and filters, especially for large tables. Prioritize indexes on columns involved in date range queries and high cardinality columns to optimize query performance.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining operations across multiple queries.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions. Avoid indexes on columns with low cardinality or infrequent use in queries.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses, especially for large tables. Prioritize indexes on columns involved in JOIN conditions and GROUP BY clauses. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid using single-column indexes when multi-column indexes can better optimize query performance. Prioritize indexing on columns involved in joins and filters across multiple queries in the workload.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, and ensure composite indexes match the order of columns in query conditions.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure that indexes on foreign key columns used in joins and filters are maintained, especially for large tables. Avoid removing composite indexes that combine frequently queried columns, such as date and item keys, which are critical for performance in time-bound and item-specific queries.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that multi-column indexes are created for columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid creating indexes on columns that are not used in filtering or joining operations, as they may not provide performance benefits and could lead to regressions.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in join conditions and filters, especially for large tables. Prioritize indexes on columns involved in date range queries and those used in multiple queries across the workload.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, and ensure composite indexes match the order of columns in query conditions.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure that indexes cover both the join keys and the filtering conditions in the workload. Prioritize composite indexes that include both join and filter columns, especially for large tables with frequent joins and filters, such as 'store_sales', 'catalog_sales', and 'web_sales'. Avoid indexes that only cover single columns unless they are frequently used as standalone filters or join keys.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Prioritize indexes on columns with high cardinality and those involved in range queries or sorting operations. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in join conditions and filters, especially for large tables. Prioritize indexes on columns involved in date range queries and those used in multiple queries across the workload.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are consistently used in filtering or joining operations across multiple queries.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially those involving large tables or high cardinality columns. Prioritize composite indexes that match the query patterns, such as those combining date and key columns, to optimize both filtering and joining operations.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in WHERE clauses, especially for large tables. Prioritize indexes on columns involved in JOIN conditions and GROUP BY operations. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in join conditions and filters, especially for large tables. Prioritize indexes on date columns used in range queries and columns involved in join conditions across multiple queries.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, and ensure composite indexes align with query patterns.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters, especially for large tables. Prioritize composite indexes for columns frequently used together in WHERE clauses and JOINs, such as date and item keys. Avoid indexes on columns with low cardinality or those not directly involved in query predicates.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that multi-column indexes are created for columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid creating indexes on columns that are not used in filtering or joining operations, as they may not provide performance benefits and could lead to regressions.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that composite indexes are created for columns frequently used together in join and filter conditions, especially for large tables. Avoid creating indexes on individual columns when they are often used in combination with others, as this can lead to regression in query performance.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially those involving large tables or high cardinality columns. Prioritize composite indexes that match the query patterns, such as those combining date and key columns, to optimize both filtering and joining operations.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that multi-column indexes are created for columns frequently used together in join conditions and where clauses, especially for large tables. Avoid creating single-column indexes on columns that are often used in conjunction with others, as this can lead to regressions in query performance.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in the workload, especially when they involve date ranges or multiple conditions. Avoid using single-column indexes when multi-column indexes can better optimize query performance by covering more query predicates.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{\"rule\": \"Avoid creating composite indexes that include columns with high cardinality or that are frequently used in WHERE clauses as standalone columns. Instead, create individual indexes for such columns to improve query performance and flexibility.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure that indexes cover both the join keys and the filtering conditions in the workload. Prioritize composite indexes that include both join and filter columns, especially for large tables with frequent joins and filters, such as 'store_sales', 'catalog_sales', and 'web_sales'. Avoid indexes that only cover single columns unless they are frequently used as standalone filters or join keys.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses, especially for large tables. Prioritize indexes on columns involved in JOIN conditions and GROUP BY operations. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in join conditions and filters, especially for large tables. Prioritize indexes on columns involved in date range queries and those used in multiple queries across the workload.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes for columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters, especially for large tables. Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions, such as date and item identifiers. Avoid indexes on columns with low cardinality or those not directly involved in query predicates.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that composite indexes are created on columns frequently used together in join and filter conditions, especially for large tables. Avoid creating indexes on individual columns that are not used in isolation, as this can lead to regression in query performance.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in join conditions and filters, especially for large tables. Prioritize indexes on date columns used in range queries and columns involved in join conditions across multiple queries.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{\"rule\": \"Ensure that composite indexes include all columns used in WHERE clauses and JOIN conditions, especially for large tables. Avoid unnecessary composite indexes that do not match the query patterns, and ensure that indexes on frequently filtered or joined columns are maintained. Additionally, consider the order of columns in composite indexes to match the query's filtering and joining sequence.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters, especially for large tables. Prioritize composite indexes on columns frequently used together in WHERE clauses and JOINs, such as date and item keys, to optimize query performance.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses, especially for large tables. Prioritize indexes on columns involved in JOIN conditions and GROUP BY operations. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "{\"rule\": \"Ensure that multi-column indexes are used for columns frequently joined together or filtered in the workload, especially when they appear together in WHERE clauses or JOIN conditions. Avoid using single-column indexes when multi-column indexes can better optimize query performance by covering more parts of the query.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters, especially for large tables. Prioritize composite indexes on columns frequently used together in WHERE clauses and JOINs, such as date and item keys, to optimize query performance.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that composite indexes are created on columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Avoid creating indexes on columns that are not used in filtering or joining operations, as they may not provide performance benefits and could lead to regressions.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "```json\n{\n    \"rule\": \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially for large tables. Avoid using single-column indexes when multi-column indexes can better optimize query performance. Prioritize indexing on columns involved in joins and filters across multiple queries in the workload.\"\n}\n```"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially those with high cardinality or used in range queries.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions, especially for large tables. Prioritize composite indexes that match query patterns, such as date ranges and item attributes, to prevent regressions.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in join conditions and filters, especially for large tables. Prioritize indexes on columns involved in date range queries and those used in WHERE clauses with high cardinality. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in the workload, especially when they involve date ranges or multiple conditions. Avoid using single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes or composite indexes that match the most common query patterns, especially those involving equality conditions and range queries. Prioritize indexes on columns with high cardinality and those involved in frequent JOIN operations.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure that indexes on foreign key columns used in joins and filters are maintained, especially for large tables. Avoid removing composite indexes that combine frequently queried columns, such as date and item keys, which are critical for performance in time-bound and item-specific queries.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes include columns frequently used together in WHERE clauses and JOIN conditions, especially for large tables. Prioritize indexes on columns involved in range queries and those with high cardinality. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that multi-column indexes are used for columns frequently queried together, especially in join and filter conditions, to prevent regression. Prioritize indexes on columns with high cardinality and those involved in range queries or date filtering.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes that include columns with low cardinality or that are not frequently used in WHERE clauses or JOIN conditions. Instead, focus on single-column indexes for high cardinality columns and those frequently used in filtering or joining, as seen in the improvement index selection.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters, especially for large tables. Prioritize composite indexes for columns frequently used together in WHERE clauses and JOINs, such as date and item identifiers. Avoid indexes on columns with low cardinality or those not directly involved in query predicates.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that composite indexes are created on columns frequently used together in join and filter conditions, especially for large tables. Avoid creating indexes on columns that are not used together in queries, as this can lead to regression in query performance.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in join conditions and filters, especially for large tables. Prioritize indexes on columns involved in date range queries and those used in multiple queries across the workload.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{rule: \"Ensure that composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid omitting important columns like 'd_date_sk' in 'date_dim' or 'i_item_sk' in 'item' when they are frequently used in joins and filters across multiple queries.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially those involving large tables or high cardinality columns.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[item(i_item_sk, i_item_id), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk), date_dim(d_date_sk, d_date, d_year), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_id, s_store_sk), household_demographics(hd_demo_sk), promotion(p_promo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that composite indexes are created on columns frequently used together in join and filter conditions, especially for large tables. Avoid creating indexes on columns that are not used in the workload or are not part of frequent join/filter conditions.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store(s_store_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk, cr_returning_customer_sk), item(i_item_sk), customer_address(ca_address_sk), promotion(p_promo_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk), store_returns(sr_returned_date_sk, sr_ticket_number), household_demographics(hd_demo_sk), web_site(web_site_sk)]", "{rule: \"Ensure that multi-column indexes are used for columns frequently joined together or filtered together in WHERE clauses, especially for large tables. Avoid using single-column indexes when multi-column indexes can better optimize the query performance.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_sales(ss_sold_date_sk, ss_store_sk, ss_item_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_web_site_sk), web_returns(wr_item_sk, wr_order_number), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_catalog_page_sk), catalog_returns(cr_item_sk, cr_order_number), date_dim(d_date_sk, d_year, d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), household_demographics(hd_buy_potential)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, and ensure composite indexes align with query patterns.\"}"], ["train_workload_random_97_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [Promotion(p_promo_sk), Item(i_item_sk, i_current_price), Store(s_store_sk), Date_dim(d_date_sk, d_year), Customer_address(ca_address_sk), Catalog_page(cp_catalog_page_sk), Household_demographics(hd_demo_sk, hd_buy_potential)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together, such as date and item keys in sales and returns tables.\"}"]], "train_workload_random_98_9q": [["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent updates, especially if they are part of complex join conditions or subqueries. Instead, focus on indexing columns that are frequently used in WHERE clauses and have lower cardinality, as well as columns that are part of foreign key relationships.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload. Focus on columns that are consistently used for filtering or joining, especially those involved in high cardinality operations.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid adding indexes on columns with low cardinality or high selectivity, such as 'household_demographics(hd_buy_potential)' and 'customer_address(ca_gmt_offset)', as they may not significantly improve query performance and can lead to regression by increasing maintenance overhead.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in query predicates. Focus on indexing columns that are commonly used in WHERE clauses and JOIN conditions across multiple queries in the workload.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload. Focus on columns that are consistently used for filtering or joining, such as date keys and foreign keys, to prevent regression in index selection.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid adding indexes on columns with low cardinality or high selectivity, such as 'household_demographics(hd_buy_potential)' and 'customer_address(ca_gmt_offset)', as they may not significantly improve query performance and can lead to regression by increasing maintenance overhead.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent updates, especially if they are used in join conditions across multiple tables. Instead, focus on indexing columns that are frequently used in WHERE clauses and have lower cardinality, as well as columns that are part of foreign key relationships.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple queries, especially for large tables. Prioritize indexes on columns with high cardinality and those used in WHERE clauses with range conditions or subqueries. Avoid regression by maintaining composite indexes that cover multiple columns used together in queries, such as date and profit columns in sales tables.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained, especially for large tables. Avoid removing indexes on columns that are used in WHERE clauses with high cardinality or are part of complex subqueries. Prioritize indexes on columns involved in joins and filters across multiple queries in the workload.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and are not part of existing indexes.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload. Prioritize indexing columns that are consistently used in filtering or joining operations, especially those involved in high cardinality operations or large tables.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as foreign keys and date columns. Avoid indexes on columns with low cardinality or those not involved in performance-critical operations.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for high cardinality columns and composite indexes for frequently joined columns.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload. Focus on columns that are consistently used for filtering or joining, such as date keys and foreign keys, to prevent regression in query performance.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid regression by ensuring indexes cover columns frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially for large tables. Prioritize indexes on columns with high cardinality and those involved in multiple queries across the workload. Consider composite indexes for columns often queried together.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Ensure that indexes on frequently joined and filtered columns, such as date_dim.d_date_sk, store_sales.ss_sold_date_sk, and web_sales.ws_sold_date_sk, are maintained to prevent regression in query performance. Additionally, consider composite indexes for columns used together in WHERE clauses, such as (date_dim.d_date, date_dim.d_date_sk) and (store_sales.ss_sold_date_sk, store_sales.ss_net_profit).\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across the workload. Focus on columns that are consistently used in filtering or joining operations to prevent unnecessary index overhead.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained, especially for large tables and those involved in complex queries. Avoid removing indexes on columns that are used in WHERE clauses with high cardinality or are part of frequent join conditions.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to improve query performance. Remove unnecessary indexes on columns that are not part of the query's critical path.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple queries, especially when they involve date dimensions and sales-related tables. Avoid regressing to single-column indexes when multi-column indexes have shown improvement in query performance.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in conjunction with other columns in complex conditions, as they may lead to regression in query performance. Instead, focus on indexing columns that are frequently used in WHERE clauses and have high cardinality, ensuring they are not part of complex conditions that involve multiple tables or subqueries.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Ensure indexes on columns frequently used in WHERE clauses, especially those involved in JOIN operations and subqueries. Prioritize composite indexes for columns used together in WHERE clauses and GROUP BY operations. Avoid removing indexes on columns with high cardinality or those used in range queries.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload, as they may lead to unnecessary overhead without significant performance benefits.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Ensure that indexes cover frequently joined columns and filtering conditions, especially for large tables. Avoid removing indexes on columns that are used in WHERE clauses or JOIN conditions in multiple queries, such as 'date_dim.d_date_sk', 'customer.c_customer_sk', and 'customer_address.ca_gmt_offset'. Prioritize indexes on columns that are part of composite keys or are frequently used in aggregations and groupings.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Ensure indexes on columns frequently used in WHERE clauses, especially those involved in JOIN conditions and subqueries. Prioritize multi-column indexes for columns that are often queried together, such as date and profit metrics in sales tables.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Ensure that multi-column indexes are preserved when they are used in conjunction with frequently filtered columns, especially when those columns are involved in joins or subqueries. Additionally, maintain indexes on columns that are used in WHERE clauses with specific conditions, such as date ranges or specific values, to prevent regression in query performance.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Ensure that indexes on columns frequently used in join conditions and where clauses, especially those involving large tables, are maintained. Avoid removing indexes on columns that are part of composite keys or are used in multiple queries across different tables, such as date_dim.d_date_sk, customer.c_customer_sk, and customer_address.ca_address_sk.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Ensure indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Prioritize composite indexes for columns used together in WHERE clauses or JOINs, such as date and profit columns in sales tables. Avoid removing indexes on columns with high cardinality or those involved in frequent filtering operations.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload. Focus on indexing columns that are consistently used for filtering or joining, especially those involved in high cardinality operations.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid indexing columns with low cardinality or columns that are frequently used in conjunction with high cardinality columns in join conditions. Prioritize indexing columns that are frequently used in WHERE clauses and have high cardinality, especially if they are used in multiple queries across the workload.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent updates, especially if they are part of complex join conditions or subqueries. Instead, focus on indexing columns that are frequently used in WHERE clauses and have lower cardinality, as well as columns involved in GROUP BY operations.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple queries, especially when they involve date dimensions and sales-related tables. Prioritize indexes on columns with high cardinality and those that appear in WHERE clauses with specific conditions, such as date ranges or specific values.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid removing indexes on columns frequently used in WHERE clauses, especially those involved in joins or subqueries, as they are critical for query performance. Prioritize indexing columns with high cardinality and those used in filtering conditions across multiple queries.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions. Instead, focus on indexing individual columns that are frequently filtered or joined, as seen in the improvement index selection.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across the workload. Focus on indexing columns that are consistently used in filtering and joining operations to prevent regression.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns in the workload are maintained. Avoid removing indexes on columns that are part of foreign key relationships or are used in WHERE clauses with high selectivity.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Ensure indexes on columns frequently used in WHERE clauses, especially those involved in JOIN operations and subqueries. Prioritize composite indexes for columns used together in WHERE clauses and GROUP BY operations. Avoid removing indexes on columns with high cardinality or those used in range queries.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload. Focus on columns that are consistently used for filtering or joining, such as date keys and foreign keys, to prevent regression in index selection.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid indexing columns with low cardinality or columns that are frequently used in conjunction with high cardinality columns in the workload. Prioritize indexing columns that are used in join conditions and have high cardinality, as seen in the improvement index selection.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent updates, especially if they are used in join conditions across multiple tables. Instead, focus on indexing columns that are frequently used in WHERE clauses and have lower cardinality, as well as columns that are part of foreign key relationships.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple tables, especially for large tables. Prioritize indexes on columns with high cardinality and those involved in range queries or aggregations. Avoid regression by maintaining indexes on columns that are part of composite keys or frequently queried together.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid removing composite indexes that include frequently queried columns, especially those involved in joins or filters across multiple tables. Ensure indexes cover columns used in WHERE clauses and JOIN conditions, particularly for large tables. Prioritize indexes on columns with high cardinality and those involved in range queries or subqueries.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index or are frequently used in join conditions across multiple queries. Prioritize indexing columns that are used in WHERE clauses and have high cardinality, especially if they are used in filtering conditions or aggregations.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload. Prioritize indexing columns that are consistently used in filtering and joining operations to improve query performance.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in conjunction with other columns in complex conditions, as they may lead to regression in query performance. Instead, focus on indexing columns that are frequently used in WHERE clauses and have high cardinality, especially if they are used in joins or filters across multiple queries.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions. Focus on indexing columns that are used in filtering conditions and have high selectivity, such as primary keys or foreign keys, to prevent regression in query performance.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently queried together, especially when they appear in WHERE clauses with multiple conditions. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple joins and filters on those columns.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid removing composite indexes that include date columns and sales/profit metrics, as they are crucial for optimizing queries with date-based filtering and aggregation on sales data. Additionally, ensure indexes on foreign key columns are maintained to support join operations efficiently.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the join involves large tables. Instead, focus on indexing columns that are used in filtering conditions or aggregations, as these can significantly improve query performance by reducing the amount of data processed.\"}"], ["train_workload_random_98_9q", "[date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status), customer_demographics(cd_education_status)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_sales(cs_sold_date_sk), customer_demographics(cd_marital_status), promotion(p_promo_sk), customer_address(ca_address_sk), item(i_item_sk), store_returns(sr_returned_date_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_returning_customer_sk), catalog_returns(cr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload. Focus on indexing columns that are consistently used for filtering or joining, especially those involved in high cardinality operations.\"}"], ["train_workload_random_98_9q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_bill_customer_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_sold_date_sk,C web_sales.ws_net_profit)]", " [promotion(p_promo_sk), household_demographics(hd_buy_potential), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), customer_demographics(cd_marital_status)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are involved in frequent filtering, joining, or sorting operations, especially those with high cardinality.\"}"]], "train_workload_random_99_3q": [["train_workload_random_99_3q", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. If an index is removed, verify that it does not impact the performance of queries involving joins or filters on the indexed columns.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date), customer(c_customer_sk), catalog_sales(cs_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection, especially if they are primary keys or foreign keys, as this can lead to redundancy and potential performance regression.\"}"], ["train_workload_random_99_3q", " [date_dim(d_date, d_year, d_month_seq), customer(c_customer_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Instead, focus on indexing columns that are frequently used in join conditions, filtering predicates, or as part of group by and order by clauses.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date, d_month_seq), customer(c_customer_sk), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, as well as columns that are frequently used in sorting or grouping operations.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date), customer(c_customer_sk), catalog_sales(cs_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Instead, focus on indexing columns that are frequently used in join conditions or as filtering predicates, such as date columns or foreign keys, to improve query performance.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date, d_month_seq), customer(c_customer_sk), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in subqueries or complex joins, as removing them can lead to performance regressions.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date, d_month_seq), customer(c_customer_sk), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, especially if they are part of the WHERE clause or are used in subqueries.\"}"], ["train_workload_random_99_3q", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Ensure that indexes on date columns used in WHERE clauses for filtering large tables are not removed, as they are critical for query performance, especially when filtering by date ranges.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date, d_month_seq), customer(c_customer_sk), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, as well as columns that are frequently used in sorting or grouping operations.\"}"], ["train_workload_random_99_3q", " [date_dim(d_date, d_year, d_month_seq), customer(c_customer_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Instead, focus on indexing columns that are frequently used in join conditions, filtering predicates, or as part of group by/order by clauses.\"}"], ["train_workload_random_99_3q", " [date_dim(d_date, d_year, d_month_seq), customer(c_customer_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{\"rule\": \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Instead, focus on indexing columns that are frequently used in joins and where clauses, such as foreign keys and date columns used in date range queries.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date, d_month_seq), customer(c_customer_sk), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, especially if they are part of the WHERE clause or are used in subqueries.\"}"], ["train_workload_random_99_3q", " [date_dim(d_date, d_year, d_month_seq), customer(c_customer_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid using single-column indexes on columns that are frequently involved in join operations across multiple tables. Instead, prefer multi-column indexes that cover the join conditions and filtering criteria to optimize query performance.\"}"], ["train_workload_random_99_3q", " [date_dim(d_date, d_year, d_month_seq), customer(c_customer_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in filtering conditions or are part of complex queries that can benefit from additional indexing.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date), customer(c_customer_sk), catalog_sales(cs_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or are part of complex expressions that are not already optimized.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date), customer(c_customer_sk), catalog_sales(cs_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries, especially if they are already covered by existing indexes. Prioritize indexing columns that are frequently used in join conditions or as filtering predicates to improve query performance.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date, d_month_seq), customer(c_customer_sk), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid using single-column indexes on columns that are frequently used in join conditions or filters across multiple queries. Instead, consider composite indexes that cover the join/filter conditions to improve query performance.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date), customer(c_customer_sk), catalog_sales(cs_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{\"rule\": \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries, especially if they are already covered by existing indexes on related tables.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date, d_month_seq), customer(c_customer_sk), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection, especially if they are primary keys or frequently used in joins, as this can lead to redundant indexes and potential regressions.\"}"], ["train_workload_random_99_3q", " [date_dim(d_date, d_year, d_month_seq), customer(c_customer_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as they may lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in filtering conditions or are part of aggregation operations.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date), customer(c_customer_sk), catalog_sales(cs_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection, especially if they are primary keys or frequently used in joins, as this can lead to redundant indexes and potential performance regressions.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date), customer(c_customer_sk), catalog_sales(cs_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be already optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or as part of filtering conditions to improve query performance.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date), customer(c_customer_sk), catalog_sales(cs_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in the improvement selection, especially if they are primary keys or foreign keys, as this can lead to redundancy and potential performance regression.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date), customer(c_customer_sk), catalog_sales(cs_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in filtering conditions or are part of large tables with high cardinality.\"}"], ["train_workload_random_99_3q", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Ensure that indexes on date columns used in join conditions and filtering (e.g., cr_returned_date_sk, cs_sold_date_sk) are not removed, as they are critical for performance in queries involving date range filters and joins.\"}"], ["train_workload_random_99_3q", " [date_dim(d_date, d_year, d_month_seq), customer(c_customer_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Instead, focus on indexing columns that are frequently used in join conditions, filtering predicates, or as part of group by/order by clauses.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date, d_month_seq), customer(c_customer_sk), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables when they are used in join conditions, especially if the existing indexes are on primary or foreign key columns. Instead, focus on indexing columns that are frequently used in WHERE clauses or as part of complex expressions in the workload.\"}"], ["train_workload_random_99_3q", " [date_dim(d_date, d_year, d_month_seq), customer(c_customer_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as they may lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in filtering conditions or are part of aggregation operations.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date), customer(c_customer_sk), catalog_sales(cs_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in filtering conditions or are part of large tables to improve query performance.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date, d_month_seq), customer(c_customer_sk), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries, as they may lead to performance regressions. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date), customer(c_customer_sk), catalog_sales(cs_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not directly involved in filtering or joining operations in the workload queries. Instead, prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, or have high cardinality to improve query performance.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date, d_month_seq), customer(c_customer_sk), web_site(web_site_id)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries, as they may lead to regression in query performance. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality.\"}"], ["train_workload_random_99_3q", " [date_dim(d_date, d_year, d_month_seq), customer(c_customer_sk), catalog_page(cp_catalog_page_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid using single-column indexes on columns that are frequently used in join conditions across multiple tables. Instead, prefer multi-column indexes that cover the join conditions and filtering criteria to improve query performance.\"}"], ["train_workload_random_99_3q", "[date_dim(d_date), customer(c_customer_sk), catalog_sales(cs_sold_date_sk)]", "[I(C customer.c_customer_sk), I(C customer_demographics.cd_demo_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables when they are used in join conditions. Instead, focus on indexing columns that are frequently used in WHERE clauses or as part of complex subqueries to improve query performance.\"}"]], "train_workload_random_6_9q": [["train_workload_random_6_9q", "[date_dim(d_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), item(i_item_sk), web_returns(wr_order_number), catalog_returns(cr_item_sk), date_dim(d_year), date_dim(d_week_seq), store(s_store_sk)]", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Specifically, include indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as (cr_item_sk, cr_order_number) and (sr_item_sk, sr_ticket_number) for catalog_returns and store_returns tables, respectively. Additionally, maintain indexes on high cardinality columns like date_dim(d_date_sk) to optimize query performance.\"}"], ["train_workload_random_6_9q", "[date_dim(d_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), item(i_item_sk), web_returns(wr_order_number), catalog_returns(cr_item_sk), date_dim(d_year), date_dim(d_week_seq), store(s_store_sk)]", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "{rule: \"Avoid creating composite indexes that include columns already indexed individually unless there is a clear performance benefit. Ensure that indexes on frequently joined columns are maintained, and avoid redundant indexes on columns that are already covered by existing indexes.\"}"], ["train_workload_random_6_9q", " [date_dim(d_date, d_year, d_date_sk), item(i_item_sk, i_item_id, i_color, i_current_price), promotion(p_promo_sk), store(s_store_sk), customer_address(ca_state, ca_address_sk)]", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{rule: \"Ensure indexes cover join and filter columns across all tables involved in frequent joins and aggregations, prioritizing multi-column indexes that align with query patterns and workload characteristics.\"}"], ["train_workload_random_6_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure composite indexes cover all columns involved in join conditions and filters, especially for large tables. Avoid regression by maintaining indexes on columns frequently used in WHERE clauses and JOIN conditions, and consider adding composite indexes for multi-column conditions.\"}"], ["train_workload_random_6_9q", " [date_dim(d_date_sk), customer_demographics(cd_demo_sk), warehouse(w_warehouse_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_bill_customer_sk), web_sales(ws_sold_date_sk, ws_item_sk), customer(c_customer_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number), web_site(web_site_sk)]\n```", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize indexing on columns frequently used in WHERE clauses and JOIN conditions across multiple queries. Avoid removing indexes that are used in multiple queries, especially those involving large tables or complex joins.\"}"], ["train_workload_random_6_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Prioritize indexing columns that are part of WHERE clauses and JOIN conditions, and consider the use of composite indexes for columns that are often queried together to improve query performance.\"}"], ["train_workload_random_6_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure that composite indexes in the regression selection cover all join and filter conditions used in the workload queries, especially for large tables. Avoid removing indexes that are used in join conditions or frequently filtered columns, as seen with the missing indexes on 'web_sales(ws_order_number)' and 'web_returns(wr_order_number)' in the regression selection.\"}"], ["train_workload_random_6_9q", "[item(i_item_sk), customer_demographics(cd_education_status), customer_address(ca_state), promotion(p_promo_sk), customer(c_customer_sk), warehouse(w_state), date_dim(d_date_sk), catalog_returns(cr_returned_date_sk, cr_order_number), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk)]", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and aggregations, as these can significantly improve query performance. Additionally, ensure that indexes are not redundant and do not overlap excessively with existing indexes.\"}"], ["train_workload_random_6_9q", "[warehouse(w_state), date_dim(d_date_sk), household_demographics(hd_buy_potential), customer_demographics(cd_education_status), store_returns(sr_returned_date_sk)]", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{rule: \"Avoid indexing columns with high cardinality and low selectivity unless they are frequently used in join conditions or filters. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially if they are part of large tables or frequently queried. Consider the workload patterns and ensure that indexes align with the most common query paths to prevent regression.\"}"], ["train_workload_random_6_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure composite indexes cover all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multi-column indexes can optimize multiple queries.\"}"], ["train_workload_random_6_9q", " [date_dim(d_date_sk), customer_demographics(cd_demo_sk), warehouse(w_warehouse_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_bill_customer_sk), web_sales(ws_sold_date_sk, ws_item_sk), customer(c_customer_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number), web_site(web_site_sk)]\n```", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "```json\n{\n    \"rule\": \"Ensure indexes cover all join and filter columns used in the workload queries. Specifically, include indexes on columns involved in frequent joins and filters across large tables, such as store_sales(ss_ticket_number), store_returns(sr_ticket_number), web_site(web_site_sk), and promotion(p_promo_sk), which are missing in the regression index selection.\"\n}\n```"], ["train_workload_random_6_9q", " [customer_address(ca_state), item(i_item_sk), date_dim(d_date), warehouse(w_state), promotion(p_promo_sk), store(s_store_sk), household_demographics(hd_buy_potential)]\n\nTotal Storage Cost: 5.19 + 2.26 + 1.62 + 0.01 + 0.01 + 0.01 + 0.27 = 9.37\n\nThis selection maximizes utility while keeping the storage cost well within the budget.", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{rule: \"Avoid indexing columns with high cardinality and low selectivity unless they are frequently used in join conditions or filters. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially if they are involved in multiple queries. Ensure that the index selection does not overlap excessively with existing indexes to prevent redundancy and maintain storage efficiency.\"}"], ["train_workload_random_6_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure that all join keys and frequently filtered columns in the workload are indexed. Avoid removing indexes on columns that are used in join conditions or as filters in multiple queries, such as 'd_date_sk', 'cr_order_number', and 'sr_ticket_number'. Maintain composite indexes when multiple columns are used together in join conditions, like 'cr_item_sk, cr_order_number' and 'sr_item_sk, sr_ticket_number'.\"}"], ["train_workload_random_6_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "{\"rule\": \"Ensure that multi-column indexes are preserved when they are beneficial for query performance, especially for columns frequently used together in WHERE clauses or JOIN conditions. Avoid replacing them with single-column indexes unless there is a clear performance benefit. Additionally, maintain indexes on columns involved in ORDER BY and GROUP BY clauses to optimize sorting and aggregation operations.\"}"], ["train_workload_random_6_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Prioritize indexing columns that are part of foreign key relationships and those that appear in WHERE clauses with high cardinality. Avoid regression by maintaining indexes on columns that are frequently used in GROUP BY and ORDER BY clauses, as well as those involved in complex calculations or aggregations.\"}"], ["train_workload_random_6_9q", " [date_dim(d_date_sk), customer_demographics(cd_demo_sk), warehouse(w_warehouse_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_bill_customer_sk), web_sales(ws_sold_date_sk, ws_item_sk), customer(c_customer_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number), web_site(web_site_sk)]\n```", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "```json\n{\n    \"rule\": \"Ensure that indexes cover all join conditions and filter predicates in the workload queries. Specifically, for regression detection, check if the regression index selection omits indexes on columns frequently used in join conditions or filter predicates across multiple queries, such as 'customer_demographics(cd_demo_sk)', 'warehouse(w_warehouse_sk)', 'item(i_item_sk)', 'store(s_store_sk)', 'promotion(p_promo_sk)', 'customer_address(ca_address_sk)', 'catalog_sales(cs_sold_date_sk, cs_item_sk, cs_bill_customer_sk)', 'web_sales(ws_sold_date_sk, ws_item_sk)', 'customer(c_customer_sk)', 'store_sales(ss_ticket_number)', 'web_site(web_site_sk)'.\"\n}\n```"], ["train_workload_random_6_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "{rule: \"Ensure composite indexes include all columns used in WHERE clauses and JOIN conditions, especially for tables with high row counts. Prioritize indexes on columns frequently used together in queries, such as date keys and item keys, to optimize query performance.\"}"], ["train_workload_random_6_9q", "[date_dim(d_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), item(i_item_sk), web_returns(wr_order_number), catalog_returns(cr_item_sk), date_dim(d_year), date_dim(d_week_seq), store(s_store_sk)]", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'customer_address(ca_state)' and 'customer_demographics(cd_education_status)', as they may not significantly improve query performance and can lead to regression by consuming unnecessary resources.\"}"], ["train_workload_random_6_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure composite indexes cover all columns involved in join conditions and filters, especially for large tables. Avoid regression by maintaining indexes on frequently joined columns and columns used in WHERE clauses.\"}"], ["train_workload_random_6_9q", "[warehouse(w_state), date_dim(d_date_sk), household_demographics(hd_buy_potential), customer_demographics(cd_education_status), store_returns(sr_returned_date_sk)]", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "{rule: \"Avoid creating composite indexes on columns that are frequently used in join conditions across multiple tables, as they may lead to regression by increasing index maintenance overhead and reducing query performance. Instead, focus on single-column indexes for high cardinality columns that are frequently filtered or aggregated.\"}"], ["train_workload_random_6_9q", " [date_dim(d_date, d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), item(i_current_price), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{rule: \"Prioritize indexing on columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are primarily used in GROUP BY or ORDER BY clauses unless they are also heavily involved in filtering or joining operations.\"}"], ["train_workload_random_6_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure composite indexes cover all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multi-column indexes can optimize multiple queries.\"}"], ["train_workload_random_6_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and consider adding composite indexes for columns used together in queries to optimize performance.\"}"], ["train_workload_random_6_9q", " [date_dim(d_date, d_year, d_date_sk), item(i_item_sk, i_item_id, i_color, i_current_price), promotion(p_promo_sk), store(s_store_sk), customer_address(ca_state, ca_address_sk)]", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{rule: \"Ensure that indexes cover both join and filter columns in queries. Avoid creating indexes on individual columns that are frequently used together in joins or filters, as this can lead to regression in query performance. Instead, create composite indexes that include all relevant columns used in joins and filters to optimize query execution.\"}"], ["train_workload_random_6_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually and are frequently used in join conditions across multiple queries. Instead, prioritize individual indexes on columns that are used in WHERE clauses and join conditions to improve query performance.\"}"], ["train_workload_random_6_9q", "[date_dim(d_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), item(i_item_sk), web_returns(wr_order_number), catalog_returns(cr_item_sk), date_dim(d_year), date_dim(d_week_seq), store(s_store_sk)]", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually unless there is a clear benefit in query performance. Ensure that indexes on foreign key columns are maintained to optimize joins, especially in high cardinality tables.\"}"], ["train_workload_random_6_9q", " [date_dim(d_date, d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), item(i_current_price), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{rule: \"Avoid indexing columns with high cardinality and low filtering potential, especially if they are frequently used in join conditions across large tables. Prioritize indexing columns that are used in WHERE clauses with equality conditions and have lower cardinality, as they provide better filtering and performance improvement.\"}"], ["train_workload_random_6_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure composite indexes cover all columns used in join conditions and filters. Avoid removing indexes that cover multiple columns involved in frequent join operations, especially when they are used in conjunction with large tables.\"}"], ["train_workload_random_6_9q", "[catalog_sales(cs_sold_date_sk, cs_item_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk), store(s_store_sk), warehouse(w_warehouse_sk), web_page(wp_web_page_sk), web_site(web_site_sk)]", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, as this can lead to regression by increasing the complexity and overhead of maintaining these indexes. Instead, focus on indexing columns that are used in filtering conditions and have high cardinality, as seen in the improvement index selection.\"}"], ["train_workload_random_6_9q", "[item(i_item_sk), customer_demographics(cd_education_status), customer_address(ca_state), promotion(p_promo_sk), customer(c_customer_sk), warehouse(w_state), date_dim(d_date_sk), catalog_returns(cr_returned_date_sk, cr_order_number), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk)]", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{rule: \"Ensure indexes on foreign key columns used in joins across large tables, especially when they are frequently queried together. Prioritize indexing columns that are used in WHERE clauses with high cardinality and are involved in aggregations or sorting operations. Avoid redundant indexes on columns that are already covered by composite indexes.\"}"], ["train_workload_random_6_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure composite indexes cover all columns involved in join conditions and filters, especially for large tables. Avoid regression by maintaining indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date keys and order numbers.\"}"], ["train_workload_random_6_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "{rule: \"Ensure that multi-column indexes are used for frequently joined columns and columns used in WHERE clauses together, especially when they are part of large tables or frequently queried tables. Avoid removing multi-column indexes that cover both filtering and joining conditions, as they can significantly improve query performance by reducing the number of rows scanned and improving join efficiency.\"}"], ["train_workload_random_6_9q", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk, d_date), catalog_sales(cs_sold_date_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number)]", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized over columns used in filter conditions, especially when the join conditions involve large tables. Avoid redundant indexes on columns that are already covered by composite indexes.\"}"], ["train_workload_random_6_9q", " [date_dim(d_date_sk), customer_demographics(cd_demo_sk), warehouse(w_warehouse_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_bill_customer_sk), web_sales(ws_sold_date_sk, ws_item_sk), customer(c_customer_sk), store_sales(ss_ticket_number), store_returns(sr_ticket_number), web_site(web_site_sk)]\n```", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure that indexes cover both the join keys and the filtering conditions in the workload. Avoid removing indexes that are used in multiple queries, especially those involving large tables or complex joins. Prioritize maintaining indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_6_9q", " [date_dim(d_date, d_year, d_date_sk), item(i_item_sk, i_item_id, i_color, i_current_price), promotion(p_promo_sk), store(s_store_sk), customer_address(ca_state, ca_address_sk)]", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "{\"rule\": \"Ensure that indexes cover the most frequently joined and filtered columns across multiple queries. Avoid creating indexes that are too narrow or only cover a single column when multiple columns are frequently used together in joins or filters. Prioritize composite indexes that align with the query patterns, especially for large tables with high cardinality columns.\"}"], ["train_workload_random_6_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{\"rule\": \"Ensure that composite indexes are used for columns frequently queried together, especially in large tables, to prevent regression. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple join conditions and filters on those columns.\"}"], ["train_workload_random_6_9q", " [warehouse(w_state), promotion(p_promo_sk), date_dim(d_date, d_year, d_date_sk), item(i_item_sk)].", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Avoid creating indexes on columns that are part of join conditions with large tables unless they are frequently filtered or aggregated. Instead, prioritize indexing columns that are used in WHERE clauses, GROUP BY, or ORDER BY operations, especially if they are part of smaller tables or have high cardinality.\"}"], ["train_workload_random_6_9q", "[warehouse(w_state), date_dim(d_date_sk), household_demographics(hd_buy_potential), customer_demographics(cd_education_status), store_returns(sr_returned_date_sk)]", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in WHERE clauses across multiple queries. Instead, prioritize single-column indexes for such columns to optimize query performance and prevent regression.\"}"], ["train_workload_random_6_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number)]", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are prioritized, especially those involved in WHERE clauses and JOIN conditions. Avoid replacing composite indexes with single-column indexes if the composite index covers multiple query patterns.\"}"], ["train_workload_random_6_9q", " [customer_address(ca_state), item(i_item_sk), date_dim(d_date), warehouse(w_state), promotion(p_promo_sk), store(s_store_sk), household_demographics(hd_buy_potential)]\n\nTotal Storage Cost: 5.19 + 2.26 + 1.62 + 0.01 + 0.01 + 0.01 + 0.27 = 9.37\n\nThis selection maximizes utility while keeping the storage cost well within the budget.", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Avoid creating composite indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as they may lead to redundancy and increased storage costs without significant performance benefits. Instead, prioritize single-column indexes on columns that are frequently filtered or aggregated in queries.\"}"], ["train_workload_random_6_9q", "[catalog_sales(cs_sold_date_sk, cs_item_sk), customer(c_customer_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk), store(s_store_sk), warehouse(w_warehouse_sk), web_page(wp_web_page_sk), web_site(web_site_sk)]", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions and aggregations to improve query performance.\"}"], ["train_workload_random_6_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{rule: \"Ensure that composite indexes are used for columns frequently queried together, especially in large tables, to prevent regression in query performance. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple join conditions and filters on those columns.\"}"], ["train_workload_random_6_9q", "[date_dim(d_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), item(i_item_sk), web_returns(wr_order_number), catalog_returns(cr_item_sk), date_dim(d_year), date_dim(d_week_seq), store(s_store_sk)]", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "{\"rule\": \"Ensure that indexes cover all join and filter conditions in the workload. Specifically, include indexes on columns frequently used in join conditions across multiple queries, such as (cr_item_sk, cr_order_number) and (sr_item_sk, sr_ticket_number), and ensure that indexes on date columns like d_date_sk are maintained for efficient date range queries.\"}"], ["train_workload_random_6_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number)]", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes unless they significantly improve query performance.\"}"], ["train_workload_random_6_9q", "[item(i_item_sk), customer_demographics(cd_education_status), customer_address(ca_state), promotion(p_promo_sk), customer(c_customer_sk), warehouse(w_state), date_dim(d_date_sk), catalog_returns(cr_returned_date_sk, cr_order_number), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk)]", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included, especially for large tables with frequent joins, to prevent regression in query performance.\"}"], ["train_workload_random_6_9q", "[warehouse(w_state), date_dim(d_date_sk), household_demographics(hd_buy_potential), customer_demographics(cd_education_status), store_returns(sr_returned_date_sk)]", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure that indexes on join keys and frequently filtered columns are maintained across all relevant tables. Avoid removing indexes on columns that are used in join conditions or where clauses, especially if they are part of large tables or frequently queried tables. In this case, maintain indexes on 'store_returns(sr_returned_date_sk)' and 'catalog_returns(cr_item_sk, cr_order_number)' as they are used in join conditions and filtering in the workload.\"}"], ["train_workload_random_6_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number)]", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "{rule: \"Ensure indexes on columns involved in join conditions and filtering criteria, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes. Prioritize single-column indexes for frequently filtered columns and composite indexes for columns used together in joins or filters.\"}"], ["train_workload_random_6_9q", " [date_dim(d_date, d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), item(i_current_price), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{rule: \"Avoid indexing columns with high cardinality and low selectivity, such as item identifiers across multiple tables, unless they are frequently used in join conditions. Prioritize indexing columns that are used in WHERE clauses with specific filters or are part of GROUP BY operations, especially if they are involved in date range queries or have low cardinality and high selectivity.\"}"], ["train_workload_random_6_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), catalog_returns(cr_item_sk, cr_order_number), store_returns(sr_item_sk, sr_ticket_number)]", "{rule: \"Ensure that composite indexes in the regression selection cover all join and filter conditions used in the workload queries, similar to the improvement selection which uses single-column indexes on frequently joined and filtered columns.\"}"], ["train_workload_random_6_9q", " [date_dim(d_date, d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), item(i_current_price), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", " [item(i_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), customer_demographics(cd_demo_sk), date_dim(d_date_sk, d_date), catalog_sales(cs_item_sk, cs_bill_customer_sk, cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_item_sk, ws_sold_date_sk), catalog_returns(cr_item_sk, cr_returned_date_sk)].", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as they may lead to redundant indexing and potential performance regressions. Focus on indexing columns that are used in filtering conditions and aggregations, especially those with high cardinality.\"}"], ["train_workload_random_6_9q", "[warehouse(w_state), date_dim(d_date_sk), household_demographics(hd_buy_potential), customer_demographics(cd_education_status), store_returns(sr_returned_date_sk)]", " [customer_address(ca_state), item(i_item_id), date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status), web_sales(ws_item_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk), store_returns(sr_item_sk)]\n\nThis selection utilizes the budget effectively, focusing on candidates that provide significant utility for their storage cost.", "{rule: \"Avoid indexing columns with high cardinality and large tables unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially if they are part of smaller tables or have lower cardinality.\"}"]], "train_workload_random_11_6q": [["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "{rule: \"Avoid indexing columns with high cardinality character types unless they are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_11_6q", " [Item(i_item_sk, i_item_id), Date_dim(d_date), Customer(c_customer_sk), Store(s_store_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_item_sk, wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily filtered or joined in the workload, as they may not provide additional performance benefits and could lead to regression. Instead, focus on indexing columns that are frequently used in WHERE clauses or as join keys but are not already indexed.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "{rule: \"Avoid indexing columns with high cardinality and character type unless they are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_11_6q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_category), customer(c_customer_sk), item(i_current_price), store(s_store_sk), promotion(p_promo_sk)]", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure indexes on columns frequently used in WHERE clauses across multiple queries, especially those involved in JOIN operations, are prioritized. Avoid redundant indexes on columns that are already covered by existing indexes in the workload.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "{rule: \"Avoid indexing columns with character types that have high cardinality, as they may not provide significant performance benefits.\"}"], ["train_workload_random_11_6q", " [Item(i_item_sk, i_item_id), Date_dim(d_date), Customer(c_customer_sk), Store(s_store_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_item_sk, wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already frequently used in join conditions across multiple queries, as they may not provide additional performance benefits and could lead to regression. Instead, focus on indexing columns that are used in filtering conditions or are part of large tables to improve query performance.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "{rule: \"Avoid indexing columns with high cardinality and character type unless they are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_11_6q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_category), customer(c_customer_sk), item(i_current_price), store(s_store_sk), promotion(p_promo_sk)]", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure indexes on columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially if they are used in combination with other columns in the same table. Avoid redundant indexes on columns that are already covered by existing indexes in the workload.\"}"], ["train_workload_random_11_6q", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "{rule: \"Avoid indexing columns with high cardinality and character types unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing integer columns that are used in WHERE clauses, JOIN conditions, or have a high frequency of use in the workload.\"}"], ["train_workload_random_11_6q", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple tables, especially when they are already indexed in the tables they are being joined with. Instead, focus on indexing columns that are used in filtering conditions and are not already indexed in other tables involved in the join.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "{rule: \"Avoid indexing character type columns with high cardinality unless they are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Prioritize composite indexes on columns frequently used in join conditions across multiple queries, especially when they involve large tables. Avoid single-column indexes on columns that are already part of composite indexes in the improvement selection.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "{rule: \"Avoid indexing character type columns with high cardinality unless they are frequently used in equality predicates or joins.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables, to prevent regression in query performance.\"}"], ["train_workload_random_11_6q", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "{rule: \"Avoid indexing character type columns with high cardinality unless they are frequently used in equality predicates or joins.\"}"], ["train_workload_random_11_6q", " [Item(i_item_sk, i_item_id), Date_dim(d_date), Customer(c_customer_sk), Store(s_store_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_item_sk, wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as they may already be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses or GROUP BY operations to improve query performance.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "{rule: \"Avoid indexing columns with high cardinality and character type unless they are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure indexes are created on columns involved in join conditions and frequently used in WHERE clauses, especially for large tables. Avoid removing indexes on columns that are used in multiple queries across different tables, as this can lead to performance regressions.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "{rule: \"Avoid indexing character type columns with high cardinality, as they may not provide significant performance benefits.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid indexing columns that are already heavily used in join conditions across multiple queries, as they may already benefit from existing indexes or constraints. Instead, focus on indexing columns that are frequently used in WHERE clauses or aggregations but are not part of join conditions, especially if they are used in multiple queries.\"}"], ["train_workload_random_11_6q", " [customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_category), customer(c_customer_sk), item(i_current_price), store(s_store_sk), promotion(p_promo_sk)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "```json\n{\n  \"rule\": \"Avoid indexing columns with high cardinality and character types unless they are frequently used in WHERE clauses or JOIN conditions with equality predicates.\"\n}\n```"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are already heavily used in join conditions across multiple queries, as they may not provide additional performance benefits and could lead to regression. Instead, focus on indexing columns that are frequently used in filtering conditions or aggregations, especially if they are not part of the primary key or foreign key relationships.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "{rule: \"Avoid indexing columns with character type that have high cardinality unless they are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_11_6q", " [Date_dim(d_date_sk), Store(s_store_sk), Customer_address(ca_gmt_offset)].", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid adding redundant indexes on columns that are already covered by existing indexes or are not frequently used in WHERE clauses or JOIN conditions. Focus on indexing columns that are frequently filtered or joined, and ensure that indexes are not duplicated across different tables unless necessary for specific query patterns.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "{rule: \"Avoid indexing character type columns with high cardinality unless they are frequently used in equality predicates or joins.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and filters, especially for large tables. Prioritize composite indexes for columns frequently used together in queries, such as date keys and foreign keys. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_11_6q", " [Item(i_item_sk, i_item_id), Date_dim(d_date), Customer(c_customer_sk), Store(s_store_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_item_sk, wr_order_number)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "```json\n{\n  \"rule\": \"Avoid indexing character type columns with high cardinality unless they are frequently used in WHERE clauses or JOIN conditions.\"\n}\n```"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "{rule: \"Avoid indexing columns with high cardinality and character type unless they are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses with range conditions or specific value filters, as these are critical for query performance.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "{rule: \"Avoid indexing character type columns with high cardinality, as they may not provide significant performance benefits.\"}"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number)]", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of multiple join conditions across different queries, as this can lead to performance regressions.\"}"], ["train_workload_random_11_6q", " [Item(i_item_sk, i_item_id), Date_dim(d_date), Customer(c_customer_sk), Store(s_store_sk), Catalog_page(cp_catalog_page_sk), Web_returns(wr_item_sk, wr_order_number)]", " [Store_sales(ss_sold_date_sk), Customer(c_customer_sk), Store(s_store_sk), Date_dim(d_date), Store_returns(sr_item_sk), Catalog_returns(cr_item_sk)].\n\nExplanation:\n- Removed **Item(i_item_id)** from the index selection because it is a character type column, which typically has many distinct values, making it less suitable for indexing under the given rule.", "```json\n{\n  \"rule\": \"Avoid indexing character type columns with high cardinality unless they are frequently used in WHERE clauses or JOIN conditions with equality predicates.\"\n}\n```"], ["train_workload_random_11_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date_sk), customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), customer(c_customer_sk), store(s_store_sk), item(i_item_sk), catalog_sales(cs_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Instead, focus on indexing columns that are used in filtering conditions or aggregations, as these can significantly improve query performance.\"}"]], "train_workload_random_25_10q": [["train_workload_random_25_10q", "[customer(c_customer_sk), date_dim(d_date_sk, d_dow, d_year, d_week_seq), customer_address(ca_address_sk), web_returns(wr_return_amt), item(i_item_sk, i_item_id), catalog_returns(cr_item_sk), web_page(wp_web_page_sk)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filtering criteria across large tables, especially when multiple tables are joined. Prioritize indexing on date columns used in filtering and join conditions, and on foreign key columns linking large tables.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid relying solely on single-column indexes when queries involve complex conditions or multiple tables.\"}"], ["train_workload_random_25_10q", " [customer_demographics(cd_marital_status, cd_education_status), date_dim(d_dow, d_week_seq)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{rule: \"Avoid creating indexes on individual columns that are frequently used together in WHERE clauses or JOIN conditions. Instead, create composite indexes that cover multiple columns used together, especially when they are part of the same table or frequently appear in the same query. Prioritize columns that are used in filtering conditions and join operations over those used in SELECT or ORDER BY clauses.\"}"], ["train_workload_random_25_10q", "[web_page(wp_web_page_sk), date_dim(d_date_sk), web_sales(ws_order_number), customer(c_customer_sk), store_sales(ss_ticket_number), customer_demographics(cd_demo_sk), web_returns(wr_order_number), warehouse(w_warehouse_sk), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across large tables, especially for columns frequently used in WHERE clauses and JOIN operations. Prioritize indexing on columns involved in date range filters and high cardinality joins to prevent regressions.\"}"], ["train_workload_random_25_10q", "[date_dim(d_date_sk), customer(c_customer_sk), item(i_item_sk), web_page(wp_web_page_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_returns(wr_return_amt), household_demographics(hd_buy_potential), catalog_returns(cr_item_sk)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in other tables. Instead, prioritize indexing columns that are used in filtering conditions or aggregations, as these can significantly improve query performance by reducing the amount of data processed.\"}"], ["train_workload_random_25_10q", " [customer_demographics(cd_marital_status, cd_education_status), date_dim(d_dow, d_week_seq)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{\"rule\": \"Avoid creating indexes on individual columns that are already part of a composite index used in the workload, as this can lead to redundancy and potential regression. Instead, focus on maintaining and optimizing composite indexes that align with the query patterns, such as those involving multiple columns in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries, especially for large tables and frequently joined columns. Avoid removing indexes on columns that are used in WHERE clauses or JOIN conditions, as this can lead to performance regressions.\"}"], ["train_workload_random_25_10q", " [date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_education_status), customer_address(ca_address_sk), customer(c_customer_sk), web_page(wp_web_page_sk)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{rule: \"Prioritize indexing columns involved in join conditions and filters across multiple queries, especially those with high cardinality and frequent usage in the workload. Avoid redundant indexing on columns already covered by existing indexes unless they significantly improve query performance.\"}"], ["train_workload_random_25_10q", " [date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_education_status), customer_address(ca_address_sk), customer(c_customer_sk), web_page(wp_web_page_sk)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{\"rule\": \"Ensure that indexes on date columns are consistent and avoid redundant indexes on the same table. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid indexing columns that are already covered by composite indexes unless necessary.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in complex queries, especially those with large row counts or frequent access patterns. Prioritize composite indexes on columns used together in WHERE clauses and JOIN conditions to prevent regressions.\"}"], ["train_workload_random_25_10q", "[date_dim(d_date_sk), customer(c_customer_sk), item(i_item_sk), web_page(wp_web_page_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_returns(wr_return_amt), household_demographics(hd_buy_potential), catalog_returns(cr_item_sk)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{rule: \"Ensure indexes on date columns used in WHERE clauses for filtering large tables, especially when joining with smaller tables. Prioritize indexing columns involved in frequent joins and aggregations, such as foreign keys and primary keys, to optimize query performance.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{rule: \"Avoid using indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries, as they may lead to regression in query performance. Prioritize indexing columns that are used in filtering conditions with high cardinality and are critical for query optimization.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries, especially for large tables and frequently queried columns. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve query performance by reducing the need for full table scans.\"}"], ["train_workload_random_25_10q", "[date_dim(d_date_sk), customer(c_customer_sk), item(i_item_sk), web_page(wp_web_page_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_returns(wr_return_amt), household_demographics(hd_buy_potential), catalog_returns(cr_item_sk)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{rule: \"Ensure indexes on date columns used in WHERE clauses for filtering by date ranges, and on columns involved in JOIN operations across large tables to optimize query performance. Avoid redundant indexes on columns already covered by existing indexes in the workload.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{rule: \"Avoid replacing composite indexes with single-column indexes when queries involve multiple columns in join or filter conditions. Ensure that indexes cover all columns used in frequent join conditions and filters, especially for large tables.\"}"], ["train_workload_random_25_10q", " [date_dim(d_date, d_year, d_week_seq, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions, especially for tables with high row counts. Prioritize indexes on date columns and foreign keys that are frequently used in filtering and joining operations.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join operations and filtering conditions, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Avoid relying solely on single-column indexes when queries involve complex conditions or multiple tables.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{rule: \"Avoid using single-column indexes on columns with high cardinality or frequent joins. Instead, use composite indexes that cover multiple columns involved in joins or filters, especially for columns frequently used together in queries. Prioritize indexing columns that are part of WHERE clauses, JOIN conditions, and GROUP BY clauses, and consider the data type and cardinality of the columns to optimize query performance.\"}"], ["train_workload_random_25_10q", "[customer(c_customer_sk), date_dim(d_date_sk, d_dow, d_year, d_week_seq), customer_address(ca_address_sk), web_returns(wr_return_amt), item(i_item_sk, i_item_id), catalog_returns(cr_item_sk), web_page(wp_web_page_sk)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters, especially for tables with high row counts. Prioritize indexes on columns used in WHERE clauses and JOIN conditions across multiple queries, such as date_dim(d_date_sk) and item(i_item_sk). Avoid regression by maintaining indexes on columns frequently used in filtering and joining, like date_dim(d_date_sk) and item(i_item_sk), which are critical for performance in large tables.\"}"], ["train_workload_random_25_10q", " [customer_demographics(cd_marital_status, cd_education_status), date_dim(d_dow, d_week_seq)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are foreign keys or primary keys, as they are likely to be already optimized by the database engine. Instead, focus on indexing columns that are used in filtering conditions (WHERE clauses) and aggregation (GROUP BY) that are not part of the primary or foreign key relationships.\"}"], ["train_workload_random_25_10q", "[web_page(wp_web_page_sk), date_dim(d_date_sk), web_sales(ws_order_number), customer(c_customer_sk), store_sales(ss_ticket_number), customer_demographics(cd_demo_sk), web_returns(wr_order_number), warehouse(w_warehouse_sk), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{rule: \"Avoid using indexes on columns with high cardinality and frequent updates, such as date_dim(d_date) and customer_demographics(cd_marital_status). Prioritize indexes on columns involved in joins and filters, like web_page(wp_web_page_sk) and date_dim(d_date_sk), to improve query performance.\"}"], ["train_workload_random_25_10q", " [date_dim(d_date_sk), customer_demographics(cd_marital_status, cd_education_status), customer_address(ca_address_sk), customer(c_customer_sk), web_page(wp_web_page_sk)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions in queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for tables with high row counts. Avoid redundant indexes on columns already covered by other indexes.\"}"], ["train_workload_random_25_10q", "[date_dim(d_date_sk), customer(c_customer_sk), item(i_item_sk), web_page(wp_web_page_sk), customer_address(ca_address_sk), warehouse(w_warehouse_sk), web_returns(wr_return_amt), household_demographics(hd_buy_potential), catalog_returns(cr_item_sk)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in other tables. Instead, focus on indexing columns that are used in filtering conditions or aggregations, and ensure that indexes are not redundant across tables.\"}"], ["train_workload_random_25_10q", " [customer_demographics(cd_marital_status, cd_education_status), date_dim(d_dow, d_week_seq)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{rule: \"Avoid creating indexes on individual columns that are already part of a composite index used in the workload, as this can lead to regression by increasing index maintenance overhead without providing additional query performance benefits.\"}"], ["train_workload_random_25_10q", "[web_page(wp_web_page_sk), date_dim(d_date_sk), web_sales(ws_order_number), customer(c_customer_sk), store_sales(ss_ticket_number), customer_demographics(cd_demo_sk), web_returns(wr_order_number), warehouse(w_warehouse_sk), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions for large tables, especially when multiple tables are involved in the query. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, particularly for tables with high row counts.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join operations and filtering conditions, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Avoid relying solely on single-column indexes when queries involve multiple columns in conditions.\"}"], ["train_workload_random_25_10q", " [date_dim(d_date, d_year, d_week_seq, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent updates, such as date columns and identifiers, unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially if they are used in multiple queries. Consider the workload and query patterns to ensure indexes improve query performance without causing regressions.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially for large tables. Avoid using single-column indexes when multi-column indexes can optimize query performance by covering more conditions.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{\"rule\": \"Ensure composite indexes are used for columns frequently joined or filtered together, especially when they involve date or identifier columns, as seen in the improvement index with composite indexes like I(C date_dim.d_date_sk,C date_dim.d_date) and I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit). Avoid relying solely on single-column indexes for such scenarios, as seen in the regression index.\"}"], ["train_workload_random_25_10q", " [customer_demographics(cd_marital_status, cd_education_status), date_dim(d_dow, d_week_seq)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{rule: \"Avoid creating separate indexes on columns that are frequently used together in join or filter conditions. Instead, create composite indexes on these columns to improve query performance. For example, if 'date_dim(d_date_sk)' and 'store_sales(ss_sold_date_sk)' are often used together, consider a composite index on these columns.\"}"], ["train_workload_random_25_10q", "[web_page(wp_web_page_sk), date_dim(d_date_sk), web_sales(ws_order_number), customer(c_customer_sk), store_sales(ss_ticket_number), customer_demographics(cd_demo_sk), web_returns(wr_order_number), warehouse(w_warehouse_sk), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions in queries. Avoid indexes that only cover a single aspect, such as only join keys or only filter keys, as this can lead to regressions. For example, if a query frequently joins on 'customer_sk' and filters on 'date_sk', ensure both are indexed together if they are used together in multiple queries.\"}"], ["train_workload_random_25_10q", " [customer_demographics(cd_marital_status, cd_education_status), date_dim(d_dow, d_week_seq)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{\"rule\": \"Avoid creating indexes solely on foreign key columns that are frequently joined with other tables, as this can lead to regression by increasing the cost of join operations. Instead, consider composite indexes that include both the foreign key and other frequently filtered columns to optimize both join and filter operations.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{rule: \"Avoid using single-column indexes on columns with high cardinality or frequent joins. Prefer composite indexes that cover multiple columns involved in WHERE clauses, JOIN conditions, and GROUP BY operations to optimize query performance.\"}"], ["train_workload_random_25_10q", "[customer(c_customer_sk), date_dim(d_date_sk, d_dow, d_year, d_week_seq), customer_address(ca_address_sk), web_returns(wr_return_amt), item(i_item_sk, i_item_id), catalog_returns(cr_item_sk), web_page(wp_web_page_sk)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions across multiple queries, especially for tables with high row counts. Prioritize indexes on columns frequently used in filtering and joining operations, such as date keys and foreign keys, to prevent regression.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined or filtered together, especially when they involve date or identifier columns, to prevent regression in query performance.\"}"], ["train_workload_random_25_10q", " [date_dim(d_date, d_year, d_week_seq, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'cd_marital_status' and 'cd_education_status', as they may lead to performance regressions. Instead, focus on indexing columns that are frequently used in joins and filters with high selectivity, such as 'd_date_sk', 'i_item_sk', and 'ca_address_sk'.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined or filtered together, especially for large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple joins and filters.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. If an index is removed from a column used in both a join and a filter condition, it may cause regression. Retain indexes on columns that are frequently used in both joins and filters across multiple queries.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{\"rule\": \"Ensure composite indexes are used for frequently joined columns and filter conditions, especially for large tables. Avoid using single-column indexes on columns that are often used together in queries, as this can lead to regressions in query performance.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize indexing columns involved in frequent joins and date range filters, such as date keys and item keys, to prevent regression in query performance.\"}"], ["train_workload_random_25_10q", " [date_dim(d_date, d_year, d_week_seq, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{rule: \"Prioritize indexing columns involved in join conditions and filters across multiple queries, especially those with high cardinality and frequent usage, such as date columns and foreign keys. Avoid redundant indexing on columns already covered by existing indexes, and ensure indexes align with the workload's most common query patterns.\"}"], ["train_workload_random_25_10q", " [date_dim(d_date, d_year, d_week_seq, d_moy), item(i_item_id, i_item_sk), customer_address(ca_address_sk), web_page(wp_web_page_sk)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'cd_marital_status' and 'cd_education_status', unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on indexing columns that are frequently used in JOINs and WHERE clauses with high selectivity, such as 'd_date_sk', 'i_item_sk', and 'ca_address_sk'. Additionally, ensure that indexes are not redundant and cover the most critical parts of the workload.\"}"], ["train_workload_random_25_10q", "[customer(c_customer_sk), date_dim(d_date_sk, d_dow, d_year, d_week_seq), customer_address(ca_address_sk), web_returns(wr_return_amt), item(i_item_sk, i_item_id), catalog_returns(cr_item_sk), web_page(wp_web_page_sk)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or GROUP BY operations, as these are critical for query performance.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined or filtered together, especially when they involve date dimensions or are part of complex queries with multiple joins. Avoid replacing composite indexes with single-column indexes if the workload involves complex filtering and joining conditions.\"}"], ["train_workload_random_25_10q", "[customer(c_customer_sk), date_dim(d_date_sk, d_dow, d_year, d_week_seq), customer_address(ca_address_sk), web_returns(wr_return_amt), item(i_item_sk, i_item_id), catalog_returns(cr_item_sk), web_page(wp_web_page_sk)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{rule: \"Avoid indexing columns with high cardinality and frequent updates, such as date columns with specific dates or timestamps, and columns involved in complex joins across multiple tables. Instead, focus on indexing columns that are frequently used in WHERE clauses, have lower cardinality, and are used in GROUP BY or ORDER BY operations.\"}"], ["train_workload_random_25_10q", "[customer(c_customer_sk), date_dim(d_date_sk, d_dow, d_year, d_week_seq), customer_address(ca_address_sk), web_returns(wr_return_amt), item(i_item_sk, i_item_id), catalog_returns(cr_item_sk), web_page(wp_web_page_sk)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{rule: \"Ensure indexes cover columns involved in join conditions and filters, especially for large tables. Prioritize indexing columns used in WHERE clauses and JOIN conditions across multiple queries, such as date_dim(d_date_sk) and item(i_item_sk). Avoid regression by maintaining indexes on columns frequently used in filtering and joining, like date_dim(d_date_sk) and item(i_item_sk), which are critical for performance in complex queries.\"}"], ["train_workload_random_25_10q", "[web_page(wp_web_page_sk), date_dim(d_date_sk), web_sales(ws_order_number), customer(c_customer_sk), store_sales(ss_ticket_number), customer_demographics(cd_demo_sk), web_returns(wr_order_number), warehouse(w_warehouse_sk), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{\"rule\": \"Ensure that indexes cover both join keys and frequently filtered columns. Avoid removing indexes on columns that are used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_25_10q", "[web_page(wp_web_page_sk), date_dim(d_date_sk), web_sales(ws_order_number), customer(c_customer_sk), store_sales(ss_ticket_number), customer_demographics(cd_demo_sk), web_returns(wr_order_number), warehouse(w_warehouse_sk), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{\"rule\": \"Avoid creating indexes on columns with high cardinality and low selectivity, such as 'date_dim(d_date)', 'customer_demographics(cd_marital_status)', and 'customer_demographics(cd_education_status)', as they may lead to regression by increasing index maintenance overhead without significant query performance improvement. Instead, focus on indexing columns that are frequently used in joins and filters with high selectivity, such as primary keys and foreign keys.\"}"], ["train_workload_random_25_10q", "[web_page(wp_web_page_sk), date_dim(d_date_sk), web_sales(ws_order_number), customer(c_customer_sk), store_sales(ss_ticket_number), customer_demographics(cd_demo_sk), web_returns(wr_order_number), warehouse(w_warehouse_sk), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", " [Customer(c_customer_sk), Customer_address(ca_address_sk), Catalog_sales(cs_item_sk), Store_sales(ss_sold_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across large tables, especially for columns frequently used in WHERE clauses and JOIN operations. Prioritize indexing on columns involved in date range filters and high cardinality joins to prevent regressions.\"}"], ["train_workload_random_25_10q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_sales.ss_sold_date_sk,C store_sales.ss_net_profit), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), catalog_returns(cr_returned_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), item(i_item_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid relying solely on single-column indexes when queries involve complex conditions or multiple tables.\"}"], ["train_workload_random_25_10q", " [customer_demographics(cd_marital_status, cd_education_status), date_dim(d_dow, d_week_seq)]", "[customer_demographics(cd_marital_status), catalog_sales(cs_item_sk), date_dim(d_date), customer_demographics(cd_education_status), item(i_item_sk), customer(c_customer_sk), date_dim(d_date_sk)]*, customer_address(ca_address_sk), date_dim(d_week_seq), item(i_item_id), catalog_sales(cs_sold_date_sk), web_sales(ws_item_sk), date_dim(d_moy), item(i_color), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), customer_demographics(cd_demo_sk), store_sales(ss_ticket_number)]*, catalog_returns(cr_order_number)]", "{rule: \"Avoid creating multiple separate indexes on columns that are frequently used together in join or filter conditions. Instead, create composite indexes on these columns to improve query performance and prevent regression.\"}"]], "train_workload_random_28_10q": [["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{rule: \"Ensure composite indexes cover all columns involved in join conditions and filters, especially for high cardinality columns. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for tables with high row counts or frequent joins. Prioritize single-column indexes for columns frequently used in WHERE clauses or GROUP BY operations. Avoid redundant indexes that do not add value beyond existing composite indexes.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for high cardinality columns. Avoid single-column indexes when multiple columns are frequently queried together.\"}"], ["train_workload_random_28_10q", " [date_dim(d_date_sk, d_date), item(i_item_id, i_item_sk, i_current_price, i_color), customer_address(ca_address_sk), customer_demographics(cd_marital_status)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "{rule: \"Prioritize composite indexes that cover multiple columns used in WHERE clauses and JOIN conditions, especially for columns frequently used together across multiple queries. Avoid single-column indexes when multiple columns are consistently queried together, as composite indexes can significantly improve query performance by reducing the need for multiple index lookups.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{rule: \"Ensure that composite indexes in the regression selection cover all join and filter conditions present in the workload queries, especially for high cardinality columns and frequently joined tables. Avoid removing composite indexes that are present in the improvement selection and are used in multiple queries.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "{rule: \"Avoid multi-column indexes when single-column indexes suffice for query conditions. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions individually, especially for large tables.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in the workload, especially when multiple tables are involved. Avoid using single-column indexes when the workload involves complex queries with multiple conditions on different columns.\"}"], ["train_workload_random_28_10q", " [date_dim(d_date_sk, d_date), item(i_item_id, i_item_sk, i_current_price, i_color), customer_address(ca_address_sk), customer_demographics(cd_marital_status)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions, especially for high cardinality columns and those frequently used across multiple queries. Prioritize indexes on columns involved in filtering and joining operations over those used primarily for ordering or aggregation.\"}"], ["train_workload_random_28_10q", "[date_dim(d_year, d_date_sk, d_date), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), warehouse(w_warehouse_name), date_dim(d_week_seq), catalog_returns(cr_item_sk)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{rule: \"Avoid creating indexes that only cover columns already indexed in other tables for similar join conditions. Instead, focus on indexing columns that are frequently used in WHERE clauses and join conditions across multiple queries, especially if they are part of large tables or have high cardinality.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for tables with high row counts or frequent joins. Prioritize single-column indexes for columns frequently used in WHERE clauses or GROUP BY operations.\"}"], ["train_workload_random_28_10q", " [date_dim(d_date_sk, d_date), item(i_item_id, i_item_sk, i_current_price, i_color), customer_address(ca_address_sk), customer_demographics(cd_marital_status)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{rule: \"Ensure that indexes cover both join and filter conditions. If an index is removed or altered, verify that it still supports the most frequent join and filter operations in the workload. Specifically, indexes should include columns that are frequently used together in WHERE clauses and JOIN conditions, such as date keys and item keys in sales and returns tables.\"}"], ["train_workload_random_28_10q", " [date_dim(d_date_sk, d_date), item(i_item_id, i_item_sk, i_current_price, i_color), customer_address(ca_address_sk), customer_demographics(cd_marital_status)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and frequently filtered columns are prioritized. Avoid redundant indexes on columns that are already covered by composite indexes. Consider the selectivity and frequency of use in queries when choosing indexes.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently queried together.\"}"], ["train_workload_random_28_10q", "[date_dim(d_year, d_date_sk, d_date), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), warehouse(w_warehouse_name), date_dim(d_week_seq), catalog_returns(cr_item_sk)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "{\"rule\": \"Avoid creating indexes on columns that are already part of a composite index in the improvement selection, as this can lead to redundancy and potential regression. Focus on maintaining composite indexes that cover multiple columns used together in queries, especially those involving joins and filters, to optimize performance.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{rule: \"Ensure composite indexes cover all join and filter conditions in queries. Avoid single-column indexes when multiple columns are frequently used together in joins or filters.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially those with high cardinality, to prevent regression in query performance.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{rule: \"Ensure composite indexes cover all join and filter conditions in queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for tables with high row counts or frequent joins. Prioritize single-column indexes for columns frequently used in WHERE clauses or GROUP BY operations. Avoid redundant indexes that overlap with existing composite indexes.\"}"], ["train_workload_random_28_10q", "[date_dim(d_year, d_date_sk, d_date), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), warehouse(w_warehouse_name), date_dim(d_week_seq), catalog_returns(cr_item_sk)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in queries, especially for large tables. Prioritize composite indexes that include both foreign key and frequently filtered columns to optimize query performance.\"}"], ["train_workload_random_28_10q", " [date_dim(d_date_sk, d_date), item(i_item_id, i_item_sk, i_current_price, i_color), customer_address(ca_address_sk), customer_demographics(cd_marital_status)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and frequently filtered columns are prioritized. Avoid redundant indexes on columns that are already covered by existing indexes or are not frequently used in filtering or joining operations.\"}"], ["train_workload_random_28_10q", " [date_dim(d_date_sk, d_date), item(i_item_id, i_item_sk, i_current_price, i_color), customer_address(ca_address_sk), customer_demographics(cd_marital_status)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes that cover multiple columns used together in joins or filters, such as date_dim(d_date_sk, d_date) and item(i_item_id, i_item_sk, i_current_price, i_color). Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_28_10q", " [date_dim(d_date_sk, d_date), item(i_item_id, i_item_sk, i_current_price, i_color), customer_address(ca_address_sk), customer_demographics(cd_marital_status)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid redundant indexes on columns that are already covered by existing indexes or are less frequently queried.\"}"], ["train_workload_random_28_10q", "[date_dim(d_year, d_date_sk, d_date), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), warehouse(w_warehouse_name), date_dim(d_week_seq), catalog_returns(cr_item_sk)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{\"rule\": \"Ensure that indexes cover both the join keys and the filtering conditions in the workload queries. Avoid creating indexes that only cover a subset of the join keys without considering the filtering conditions, as this can lead to regressions. For example, if a query frequently filters on 'd_year' and joins on 'd_date_sk', an index on (d_year, d_date_sk) is more beneficial than an index on just (d_date_sk). Similarly, for tables like 'store_sales' and 'catalog_sales', ensure indexes cover both the item and date keys used in joins and filters.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for tables with high row counts. Prioritize single-column indexes for frequently filtered columns in large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_28_10q", " [date_dim(d_date_sk, d_date), item(i_item_id, i_item_sk, i_current_price, i_color), customer_address(ca_address_sk), customer_demographics(cd_marital_status)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes that combine foreign key columns used in joins with columns used in filter conditions. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes include all columns used in WHERE clauses and JOIN conditions, especially for tables with high row counts. Prioritize indexes on columns frequently used together in queries, such as date_dim(d_date_sk, d_year) and warehouse(w_warehouse_name, w_warehouse_sk).\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when multiple tables are involved in the queries. Avoid using single-column indexes when the workload involves complex queries with multiple joins and filters, as this can lead to regressions in query performance.\"}"], ["train_workload_random_28_10q", " [date_dim(d_date_sk, d_date), item(i_item_id, i_item_sk, i_current_price, i_color), customer_address(ca_address_sk), customer_demographics(cd_marital_status)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included, especially when they are frequently used in the workload. Avoid redundant indexes on columns that are already covered by composite indexes.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for tables with high row counts. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_28_10q", " [date_dim(d_date_sk, d_date), item(i_item_id, i_item_sk, i_current_price, i_color), customer_address(ca_address_sk), customer_demographics(cd_marital_status)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes that combine foreign key columns used in joins with columns used in filter conditions. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_28_10q", "[date_dim(d_year, d_date_sk, d_date), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), warehouse(w_warehouse_name), date_dim(d_week_seq), catalog_returns(cr_item_sk)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index unless the single-column index is frequently used independently in queries. Prioritize indexes on columns that are used in WHERE clauses and JOIN conditions, especially for tables with a high number of rows.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", " [date_dim(d_date_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_item_sk, cs_sold_date_sk), store_returns(sr_item_sk)].", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when they involve large tables. Avoid using single-column indexes when multi-column indexes can better optimize query performance.\"}"], ["train_workload_random_28_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C date_dim.d_year), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk)]", "[date_dim(d_date_sk, d_year), warehouse(w_warehouse_name, w_warehouse_sk), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), web_sales(ws_sold_date_sk), store(s_store_sk), promotion(p_promo_sk), store(s_store_id), web_site(web_site_sk), catalog_returns(cr_item_sk), item(i_item_id)]", "```json\n{\n    \"rule\": \"Ensure that multi-column indexes are preserved when they are beneficial for query performance, especially for columns frequently used together in WHERE clauses or JOIN conditions. Avoid replacing them with single-column indexes unless there is a clear performance benefit. Additionally, maintain indexes on columns that are part of GROUP BY or ORDER BY clauses to optimize aggregation and sorting operations.\"\n}\n```"]], "train_workload_random_31_7q": [["train_workload_random_31_7q", " [promotion(p_promo_sk), customer_demographics(cd_demo_sk), store(s_store_sk), item(i_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk), store(s_gmt_offset), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Avoid selecting indexes on columns that are not frequently used in join conditions or filters across multiple queries in the workload. Prioritize indexes on columns that are consistently used in join conditions and filters, especially in large tables, to optimize query performance.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in the workload, especially when multiple columns are involved in the WHERE clause or JOIN conditions. Avoid using single-column indexes when composite indexes can better optimize query performance.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{rule: \"Avoid regression by ensuring indexes cover all join and filter conditions in the workload. Specifically, prioritize composite indexes that include columns frequently used together in joins and filters, such as date keys and foreign keys, and ensure coverage for high cardinality columns used in WHERE clauses.\"}"], ["train_workload_random_31_7q", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), promotion(p_promo_sk)].", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are less frequently used or primarily involved in aggregation operations without filtering.\"}"], ["train_workload_random_31_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), web_returns(wr_item_sk), web_site(web_site_sk), store_returns(sr_item_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_item_sk)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{rule: \"Avoid indexing columns that are used in join conditions with large tables unless they are frequently filtered or aggregated. Prioritize indexing columns that are used in WHERE clauses or GROUP BY clauses, especially if they are part of smaller tables or have high cardinality.\"}"], ["train_workload_random_31_7q", "[customer_address(ca_gmt_offset, ca_state), customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), web_returns(wr_order_number), web_site(web_site_sk), date_dim(d_year), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in joins are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or GROUP BY operations. Consider the order of columns in composite indexes to match the query patterns, prioritizing columns with high cardinality and those used in range queries.\"}"], ["train_workload_random_31_7q", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), promotion(p_promo_sk)].", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are less frequently used or primarily involved in aggregation functions unless they are part of a critical JOIN or WHERE condition.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently joined together or filtered in combination, especially when dealing with large tables. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple joins and conditions.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions in queries. Avoid creating indexes that only cover filter conditions without considering join conditions, especially for large tables. Prioritize composite indexes that align with both join and filter conditions to prevent regression.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes on columns that are not directly involved in filtering or joining operations in the workload queries. Prioritize composite indexes that cover multiple columns used together in WHERE clauses or JOIN conditions, especially for large tables.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{rule: \"Ensure multi-column indexes are used for columns frequently queried together, especially in join and filter conditions, to prevent regression by single-column indexes that may not optimize complex queries effectively.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{\"rule\": \"Ensure that regression index selections include composite indexes that cover both filtering and join conditions, especially for large tables with high cardinality columns. Avoid replacing composite indexes with single-column indexes unless the single-column index is proven to be more beneficial for the specific workload.\"}"], ["train_workload_random_31_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), web_returns(wr_item_sk), web_site(web_site_sk), store_returns(sr_item_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_item_sk)]", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Ensure indexes cover all tables involved in joins and filters in the workload queries. Specifically, prioritize indexing columns that are frequently used in join conditions and where clauses across multiple queries, such as date keys and foreign keys linking tables.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{rule: \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when multiple columns are involved in the same query. Avoid using single-column indexes when composite indexes can better optimize query performance.\"}"], ["train_workload_random_31_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), web_returns(wr_item_sk), web_site(web_site_sk), store_returns(sr_item_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_item_sk)]", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes solely on columns with low cardinality or those that are not frequently used in join conditions. Prioritize indexes on columns that are used in both join and filter conditions across multiple queries.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Avoid single-column indexes on columns frequently used in join conditions across large tables. Instead, prefer composite indexes that cover multiple columns involved in the join or filter conditions, especially when dealing with high cardinality or large datasets.\"}"], ["train_workload_random_31_7q", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), promotion(p_promo_sk)].", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns that are part of small tables or have low cardinality, especially if they are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are part of large tables and are frequently used in WHERE clauses or JOIN conditions, particularly those that filter large datasets or are involved in range queries.\"}"], ["train_workload_random_31_7q", "[customer_address(ca_gmt_offset, ca_state), customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), web_returns(wr_order_number), web_site(web_site_sk), date_dim(d_year), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{rule: \"Ensure indexes on columns involved in join conditions and filters, especially for large tables. Prioritize composite indexes that match the order of columns in WHERE clauses and JOIN conditions. Avoid redundant indexes that do not align with query patterns or workload requirements.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Avoid regression by ensuring indexes cover join conditions and filtering criteria. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Consider the workload's query patterns and ensure indexes support the most common and costly operations.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Prioritize composite indexes over single-column indexes when the workload involves complex queries with multiple joins and conditions.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{rule: \"Ensure composite indexes cover multiple columns used in WHERE clauses, especially for large tables. Avoid single-column indexes on columns with high cardinality or those frequently used in conjunction with other columns. Prioritize indexes that support join conditions and filtering criteria across multiple tables.\"}"], ["train_workload_random_31_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), web_returns(wr_item_sk), web_site(web_site_sk), store_returns(sr_item_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_item_sk)]", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Ensure that all tables involved in join operations have indexed columns used in the join conditions. Specifically, if a table is frequently joined on a specific column, that column should be indexed to prevent regression. In this case, ensure that 'date_dim(d_date_sk)', 'promotion(p_promo_sk)', 'catalog_page(cp_catalog_page_sk)', 'customer(c_customer_sk)', 'web_returns(wr_item_sk)', 'web_site(web_site_sk)' are indexed as they are involved in join operations in the workload.\"}"], ["train_workload_random_31_7q", "[customer_address(ca_gmt_offset, ca_state), customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), web_returns(wr_order_number), web_site(web_site_sk), date_dim(d_year), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes on columns frequently used in WHERE clauses and JOIN conditions are maintained. Avoid redundant indexes on columns that are already covered by composite indexes. Prioritize indexes that cover multiple columns used together in queries, especially those involving large tables or complex joins.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in join conditions, such as foreign keys, and ensure that indexes on columns with high cardinality and frequent filtering are maintained. Additionally, consider composite indexes for columns often queried together, especially when they involve both join and filter conditions.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together. Consider the size of the tables and the frequency of the columns used in the workload when selecting indexes.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Prioritize composite indexes over single-column indexes when the workload involves complex queries with multiple joins and conditions.\"}"], ["train_workload_random_31_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), web_returns(wr_item_sk), web_site(web_site_sk), store_returns(sr_item_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_item_sk)]", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{\"rule\": \"Ensure that indexes on columns used in join conditions and frequently filtered columns are maintained. Avoid removing indexes on columns that are part of join conditions or are frequently used in WHERE clauses, especially if they are used in large tables or in complex queries with multiple joins.\"}"], ["train_workload_random_31_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), web_returns(wr_item_sk), web_site(web_site_sk), store_returns(sr_item_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_item_sk)]", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Ensure indexes cover all join conditions and filter predicates in the workload queries. Specifically, include indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as date_dim(d_date_sk), promotion(p_promo_sk), and catalog_page(cp_catalog_page_sk), to prevent regression.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions in the workload. Prioritize indexing columns that are used in filtering conditions and have high cardinality to improve query performance.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are involved in JOINs, WHERE clauses, and have high cardinality, especially if they are used in multiple queries across the workload.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Avoid single-column indexes on columns frequently used in join conditions or filters across multiple queries. Instead, consider composite indexes that cover multiple columns involved in these operations to improve query performance.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns that are already indexed in other tables when they are used in join conditions across multiple tables. Prioritize indexing columns that are frequently used in WHERE clauses and aggregations, especially if they are part of large tables or have high cardinality.\"}"], ["train_workload_random_31_7q", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), promotion(p_promo_sk)].", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in WHERE clauses, JOIN conditions, and have high cardinality, especially in large tables.\"}"], ["train_workload_random_31_7q", " [promotion(p_promo_sk), customer_demographics(cd_demo_sk), store(s_store_sk), item(i_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk), store(s_gmt_offset), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or GROUP BY operations, as these are critical for query performance.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when they involve large tables. Avoid using single-column indexes on columns that are often used together in queries, as this can lead to performance regressions.\"}"], ["train_workload_random_31_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), web_returns(wr_item_sk), web_site(web_site_sk), store_returns(sr_item_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_item_sk)]", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOINs and WHERE clauses with high cardinality, especially in large tables.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Avoid regression by ensuring indexes cover join and filter conditions in queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Consider the workload's most common join paths and filter conditions when selecting indexes.\"}"], ["train_workload_random_31_7q", " [store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), store(s_store_sk), promotion(p_promo_sk)].", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid over-indexing on columns that are less frequently used or primarily involved in aggregation operations, as this can lead to unnecessary overhead.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize composite indexes that cover multiple columns used together in queries, especially those involved in JOINs and WHERE conditions. Ensure indexes align with the workload's filtering and grouping patterns.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes solely on columns that are frequently used in join conditions without considering their selectivity and the overall query performance impact. Instead, prioritize composite indexes that include both join and filter columns, especially when dealing with large tables and complex queries.\"}"], ["train_workload_random_31_7q", " [promotion(p_promo_sk), customer_demographics(cd_demo_sk), store(s_store_sk), item(i_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk), store(s_gmt_offset), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and aggregation functions to enhance query performance.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns are maintained. Avoid removing indexes on primary keys or foreign keys, especially those involved in join operations. Consider the workload's use of date ranges and ensure indexes on date columns are optimized for range queries.\"}"], ["train_workload_random_31_7q", "[customer_address(ca_gmt_offset, ca_state), customer(c_customer_sk), date_dim(d_date_sk, d_date), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), web_returns(wr_order_number), web_site(web_site_sk), date_dim(d_year), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Avoid creating indexes on columns that are not used in join conditions or filtering predicates in the workload queries. Prioritize indexing columns that are frequently used in joins and where clauses, especially those with high cardinality.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns from the same table are used together in queries. Prioritize composite indexes over single-column indexes when the workload involves complex queries with multiple joins and conditions.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{rule: \"Ensure that indexes on columns used in join conditions and frequently filtered columns are maintained. Avoid replacing composite indexes that cover multiple query conditions with single-column indexes unless the single-column index is more frequently used across different queries.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid single-column indexes when queries involve multiple columns in join or filter conditions.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently joined together or filtered in WHERE clauses, especially when multiple columns are involved in the query conditions. Avoid using single-column indexes when queries involve multiple columns that can benefit from a composite index.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover filter conditions without considering join conditions, especially for large tables.\"}"], ["train_workload_random_31_7q", " [promotion(p_promo_sk), customer_demographics(cd_demo_sk), store(s_store_sk), item(i_item_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk), store(s_gmt_offset), catalog_sales(cs_sold_date_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk)]", " [Store_returns(sr_item_sk), Catalog_returns(cr_item_sk), Customer_demographics(cd_demo_sk)].", "{rule: \"Avoid selecting indexes on columns that are not frequently used in join conditions or filters in the workload. Prioritize indexes on columns that are involved in multiple queries, especially those used in join conditions and filters, as seen in the improvement index selection.\"}"], ["train_workload_random_31_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), customer(c_customer_sk), web_returns(wr_item_sk), web_site(web_site_sk), store_returns(sr_item_sk), customer_demographics(cd_demo_sk), catalog_returns(cr_item_sk)]", "[date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_sk), item(i_item_sk), web_returns(wr_order_number), web_returns(wr_item_sk), web_site(web_site_sk), promotion(p_promo_sk), web_site(web_site_id), store_returns(sr_ticket_number), customer_address(ca_address_sk)]", "{\"rule\": \"Avoid adding indexes on columns that are not frequently used in join or filter conditions across multiple queries, as they may not provide significant performance benefits and could lead to regression by increasing maintenance overhead. Focus on indexing columns that are consistently used in WHERE clauses or JOIN conditions across the workload.\"}"], ["train_workload_random_31_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [customer_address(ca_state, ca_gmt_offset), date_dim(d_date_sk), customer_demographics(cd_education_status), store_returns(sr_item_sk)]", "{rule: \"Ensure indexes cover columns used in join conditions and filters, especially for large tables. Prioritize composite indexes that include frequently filtered columns and join keys, such as item_sk and current_price for item table, and ensure coverage for columns involved in multiple queries like customer_sk and address_sk.\"}"]], "train_workload_random_22_4q": [["train_workload_random_22_4q", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), store_sales(ss_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually unless there is a clear benefit in query performance, as it may lead to redundancy and potential regression.\"}"], ["train_workload_random_22_4q", " [promotion(p_promo_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_demographics(cd_marital_status), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), item(i_current_price, i_item_id, i_item_sk), date_dim(d_date_sk, d_date, d_year, d_moy)]", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that all tables involved in join operations have indexes on their join keys. Additionally, maintain indexes on frequently filtered columns, especially those used in WHERE clauses, to prevent regression in query performance.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually and are frequently used in join conditions across multiple queries. Instead, prioritize single-column indexes for columns involved in frequent joins and filters, especially when they are part of large tables.\"}"], ["train_workload_random_22_4q", " [Promotion(p_promo_sk), Date_dim(d_date, d_date_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk)].\n\nExplanation: The index on `Item(i_item_sk, i_current_price)` is removed because `i_item_sk` is likely to have too many distinct values given the number of rows (102,000) in the `item` table, which can lead to a high cardinality index.", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Avoid creating indexes on columns with high cardinality or when the column is frequently used in join conditions with other high cardinality columns, as it may lead to performance degradation. Instead, focus on indexing columns that are frequently filtered or aggregated in queries, especially those with lower cardinality or those that are part of foreign key relationships.\"}"], ["train_workload_random_22_4q", " [Promotion(p_promo_sk), Date_dim(d_date, d_date_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk)].\n\nExplanation: The index on `Item(i_item_sk, i_current_price)` is removed because `i_item_sk` is likely to have too many distinct values given the number of rows (102,000) in the `item` table, which can lead to a high cardinality index.", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in filtering conditions and have lower cardinality to improve query performance.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns to prevent regression.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Avoid omitting indexes on columns frequently used in joins or filters, such as foreign keys or date columns, as seen in the regression index selection where some critical indexes like on 'cs_sold_date_sk' and 'ws_sold_date_sk' are missing.\"}"], ["train_workload_random_22_4q", " [Customer_demographics(cd_demo_sk)].", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Avoid creating composite indexes that include columns already indexed individually, especially when the workload involves multiple tables with join conditions on these columns. Instead, focus on indexing columns that are frequently used in WHERE clauses or join conditions but are not yet indexed.\"}"], ["train_workload_random_22_4q", " [Promotion(p_promo_sk), Date_dim(d_date, d_date_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk)].\n\nExplanation: The index on `Item(i_item_sk, i_current_price)` is removed because `i_item_sk` is likely to have too many distinct values given the number of rows (102,000) in the `item` table, which can lead to a high cardinality index.", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on columns that are used in filtering conditions and have lower cardinality to improve query performance.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Avoid indexes that only partially cover composite conditions or that miss critical columns involved in frequent joins or filters.\"}"], ["train_workload_random_22_4q", " [Promotion(p_promo_sk), Date_dim(d_date, d_date_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk)].\n\nExplanation: The index on `Item(i_item_sk, i_current_price)` is removed because `i_item_sk` is likely to have too many distinct values given the number of rows (102,000) in the `item` table, which can lead to a high cardinality index.", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Avoid creating indexes on columns with high cardinality unless they are frequently used in WHERE clauses or JOIN conditions. Instead, focus on columns that are used in filtering conditions and have lower cardinality to improve query performance.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across multiple queries, especially those involving large tables or frequently queried columns.\"}"], ["train_workload_random_22_4q", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), store_sales(ss_sold_date_sk)]", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently used in WHERE clauses, JOIN conditions, or as foreign keys, especially for large tables.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions. Avoid partial indexes that only cover some columns in multi-column conditions. Prioritize composite indexes for columns frequently used together in joins and filters.\"}"], ["train_workload_random_22_4q", " [promotion(p_promo_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_demographics(cd_marital_status), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), item(i_current_price, i_item_id, i_item_sk), date_dim(d_date_sk, d_date, d_year, d_moy)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes that only cover one aspect, as this can lead to regressions in query performance. Specifically, include indexes that cover both the item and date keys in sales tables, as well as any additional filter conditions used in the workload queries.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover one aspect, as seen in the regression where indexes like Item(i_current_price) do not cover join conditions, leading to potential regressions.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions, as they may lead to regression by increasing index size and complexity without improving query performance. Focus on single-column indexes for frequently filtered or joined columns.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Avoid removing indexes on columns frequently used in joins or where clauses, especially those involving large tables or high cardinality columns.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing or altering indexes that cover multiple columns involved in join operations across large tables.\"}"], ["train_workload_random_22_4q", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), store_sales(ss_sold_date_sk)]", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid missing indexes on frequently joined columns and columns used in WHERE clauses, especially for large tables. Prioritize indexes on columns that are used in multiple queries across the workload.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions, as they may lead to regression by increasing index size and reducing selectivity. Focus on single-column indexes for frequently filtered or joined columns.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Avoid partial indexes that do not fully cover multi-column conditions, especially when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_22_4q", " [Customer_demographics(cd_demo_sk)].", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually and frequently used in join conditions across multiple queries, as this can lead to redundancy and potential performance regression.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together. Prioritize maintaining indexes on columns that are used in both join and filter conditions in the workload.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently used in WHERE clauses, JOIN conditions, or as foreign keys, especially for large tables.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Avoid creating indexes on single columns when multi-column indexes can better support the query patterns, especially for columns frequently used together in joins or filters.\"}"], ["train_workload_random_22_4q", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), store_sales(ss_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually unless there is a clear benefit in query performance, as it may lead to redundancy and potential regression.\"}"], ["train_workload_random_22_4q", " [Customer_demographics(cd_demo_sk)].", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions in the workload. Focus on indexing columns that are used in filtering conditions or join operations to improve query performance.\"}"], ["train_workload_random_22_4q", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_category), customer_address(ca_state), web_returns(wr_order_number), household_demographics(hd_buy_potential), web_site(web_site_sk), catalog_returns(cr_order_number)]", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes for columns that are consistently used across multiple queries, especially those involved in JOINs and WHERE conditions. Consider the workload's query patterns and ensure indexes align with the most common access paths.\"}"], ["train_workload_random_22_4q", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), store_sales(ss_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Avoid partial indexes on composite keys unless they cover all relevant conditions. Prioritize indexes on columns involved in frequent joins and filters, especially those with high cardinality.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Avoid creating composite indexes that include a date column with another column when the date column is already indexed separately. This can lead to regression if the date column is frequently used in isolation or with different columns in queries.\"}"], ["train_workload_random_22_4q", " [promotion(p_promo_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_demographics(cd_marital_status), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), item(i_current_price, i_item_id, i_item_sk), date_dim(d_date_sk, d_date, d_year, d_moy)]", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for tables with high row counts and frequently queried columns. Prioritize composite indexes for columns involved in multiple conditions, and avoid omitting indexes on columns that are part of critical join conditions or filters, such as date and item identifiers.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid multi-column indexes when single-column indexes suffice for query conditions. Prioritize indexing columns frequently used in WHERE clauses and JOIN conditions individually, especially for large tables.\"}"], ["train_workload_random_22_4q", " [promotion(p_promo_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_demographics(cd_marital_status), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), item(i_current_price, i_item_id, i_item_sk), date_dim(d_date_sk, d_date, d_year, d_moy)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in join conditions across multiple queries, such as item_sk and date_sk, which are critical for performance in large tables like catalog_sales, store_sales, and web_sales.\"}"], ["train_workload_random_22_4q", " [promotion(p_promo_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_demographics(cd_marital_status), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), item(i_current_price, i_item_id, i_item_sk), date_dim(d_date_sk, d_date, d_year, d_moy)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes that only cover one aspect, such as only the join keys or only the filter columns, as this can lead to regressions in query performance.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together. Prioritize maintaining indexes on columns that are used in multiple queries for both joins and filters, such as date keys and item keys, to prevent regression.\"}"], ["train_workload_random_22_4q", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_category), customer_address(ca_state), web_returns(wr_order_number), household_demographics(hd_buy_potential), web_site(web_site_sk), catalog_returns(cr_order_number)]", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes for columns that are consistently used across multiple queries, especially in WHERE clauses, JOIN conditions, and GROUP BY clauses. Consider the selectivity and frequency of column usage in the workload to determine the necessity of composite indexes.\"}"], ["train_workload_random_22_4q", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_category), customer_address(ca_state), web_returns(wr_order_number), household_demographics(hd_buy_potential), web_site(web_site_sk), catalog_returns(cr_order_number)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, such as date keys and item keys, which are critical for query performance.\"}"], ["train_workload_random_22_4q", " [promotion(p_promo_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_demographics(cd_marital_status), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), item(i_current_price, i_item_id, i_item_sk), date_dim(d_date_sk, d_date, d_year, d_moy)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize multi-column indexes that include columns used in WHERE clauses and JOIN conditions, especially for large tables. Avoid single-column indexes that do not address the full scope of query conditions.\"}"], ["train_workload_random_22_4q", " [promotion(p_promo_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_demographics(cd_marital_status), customer_address(ca_address_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_item_sk, wr_order_number), item(i_current_price, i_item_id, i_item_sk), date_dim(d_date_sk, d_date, d_year, d_moy)]", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that all tables involved in frequent joins and filters have indexes on their respective join and filter columns. Avoid removing indexes on columns that are used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially for large tables. Maintain indexes on date columns used in range queries and ensure that composite indexes cover all necessary columns for multi-column conditions.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for frequently filtered or joined columns, especially those with high cardinality, to prevent regression.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Avoid partial indexes that do not fully cover multi-column conditions, especially for high cardinality columns or frequently joined tables.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are not removed or replaced with composite indexes that do not include all necessary columns for the join operations.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables, to prevent regression in query performance. Prioritize indexing on columns frequently used in join conditions and where clauses, such as date keys and item keys, to optimize query execution.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently used in WHERE clauses, JOIN conditions, or as foreign keys, especially for large tables.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually and are frequently used in join conditions across multiple queries. Instead, prioritize single-column indexes for columns involved in frequent joins and filters to prevent regression in query performance.\"}"], ["train_workload_random_22_4q", " [Customer_demographics(cd_demo_sk)].", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Avoid creating composite indexes on columns that are already part of foreign key relationships or are frequently used in join conditions across multiple queries, as they may lead to regression by increasing index maintenance overhead and reducing query performance.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together. Prioritize maintaining indexes on columns that are used in multiple queries for both joins and filters, such as date keys and item keys in sales and returns tables.\"}"], ["train_workload_random_22_4q", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_category), customer_address(ca_state), web_returns(wr_order_number), household_demographics(hd_buy_potential), web_site(web_site_sk), catalog_returns(cr_order_number)]", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes for columns that are consistently used across multiple queries, especially in WHERE clauses, JOIN conditions, and GROUP BY clauses. Consider the selectivity and frequency of column usage in the workload to determine the necessity of composite indexes.\"}"], ["train_workload_random_22_4q", " [Promotion(p_promo_sk), Date_dim(d_date, d_date_sk), Catalog_returns(cr_order_number, cr_item_sk), Customer_address(ca_address_sk)].\n\nExplanation: The index on `Item(i_item_sk, i_current_price)` is removed because `i_item_sk` is likely to have too many distinct values given the number of rows (102,000) in the `item` table, which can lead to a high cardinality index.", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality or columns that are frequently joined with other tables, as they may lead to performance regressions. Instead, focus on indexing columns that are used in WHERE clauses with low cardinality or columns that are used in GROUP BY or ORDER BY clauses.\"}"], ["train_workload_random_22_4q", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_category), customer_address(ca_state), web_returns(wr_order_number), household_demographics(hd_buy_potential), web_site(web_site_sk), catalog_returns(cr_order_number)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually and frequently used in join conditions across multiple queries. Instead, prioritize single-column indexes for columns that are consistently used in WHERE clauses and join conditions to optimize query performance.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across multiple queries, especially those involving large tables or frequently queried columns.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes that include columns not frequently used together in WHERE clauses or JOIN conditions. Focus on single-column indexes for columns that are consistently used in filtering or joining across multiple queries.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Avoid partial indexes that only cover some columns in multi-column conditions, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Avoid creating composite indexes that include both a primary key and a non-key attribute when the primary key is already indexed separately. Instead, focus on indexing the primary key alone or the non-key attribute if it is frequently used in filtering or joining operations.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across all queries in the workload. Prioritize composite indexes for columns frequently used together in join conditions, especially when they appear in multiple queries. Avoid regression by maintaining indexes on columns involved in both join and filter conditions, and consider the workload's most frequent and costly operations.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes with columns that are not frequently used together in WHERE clauses or JOIN conditions. Prioritize single-column indexes on columns that are frequently filtered or joined, especially if they are used across multiple queries.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained, especially when they are used in multiple queries. Avoid removing indexes on columns that are part of join conditions or are frequently filtered in WHERE clauses, as this can lead to performance regressions.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of composite keys in join conditions, as this can lead to performance regressions.\"}"], ["train_workload_random_22_4q", " [promotion(p_promo_sk), store(s_store_sk), item(i_item_sk), customer_address(ca_address_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_demo_sk), web_sales(ws_item_sk), web_sales(ws_sold_date_sk), web_site(web_site_sk), store_sales(ss_sold_date_sk)]", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid missing indexes on frequently joined columns and columns used in WHERE clauses, especially those with high cardinality or used in range queries.\"}"], ["train_workload_random_22_4q", " [Customer_demographics(cd_demo_sk)].", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid creating composite indexes with multiple columns unless they are frequently queried together in the workload. Focus on single-column indexes for high cardinality columns that are frequently used in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_22_4q", "[date_dim(d_date_sk), customer_demographics(cd_demo_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_category), customer_address(ca_state), web_returns(wr_order_number), household_demographics(hd_buy_potential), web_site(web_site_sk), catalog_returns(cr_order_number)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes that only cover one aspect, such as only join keys or only filter conditions, as this can lead to regressions in query performance.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk), Date_dim(d_date_sk, d_date)]", "{rule: \"Ensure that composite indexes do not include columns that are already indexed individually, as this can lead to redundancy and potential performance regression. Prioritize maintaining individual indexes on frequently filtered or joined columns, especially when they are used across multiple queries.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", " [Catalog_page(cp_catalog_page_sk), Item(i_current_price), Store_returns(sr_item_sk, sr_ticket_number), Web_returns(wr_item_sk, wr_order_number), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for large tables. Prioritize composite indexes for columns frequently used together in join conditions.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[date_dim(d_date_sk, d_week_seq, d_year), item(i_item_id), catalog_page(cp_catalog_page_sk), web_site(web_site_sk, web_site_id), warehouse(w_warehouse_sk), household_demographics(hd_buy_potential), customer_address(ca_address_sk, ca_state), customer_demographics(cd_demo_sk, cd_marital_status), store_returns(sr_ticket_number, sr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk), catalog_returns(cr_item_sk), store(s_store_id), promotion(p_promo_sk)]", "{rule: \"Avoid multi-column indexes unless necessary; prefer single-column indexes on frequently joined or filtered columns.\"}"], ["train_workload_random_22_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk, cs_sold_date_sk), Date_dim(d_date_sk), Customer_demographics(cd_marital_status), Store_sales(ss_sold_date_sk), Web_sales(ws_item_sk, ws_sold_date_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or high selectivity, such as 'cd_marital_status', as they may not significantly improve query performance and can lead to regression. Instead, focus on indexing columns that are frequently used in joins and have higher cardinality, such as 'cs_item_sk', 'cs_sold_date_sk', and 'd_date_sk'.\"}"]], "train_workload_random_26_7q": [["train_workload_random_26_7q", " [store(s_store_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number)]", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Avoid adding indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexes on columns that are frequently used in join conditions and where clauses, especially those with high cardinality.\"}"], ["train_workload_random_26_7q", " [store(s_store_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number)]", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Avoid creating indexes on columns that are already part of a join condition with another indexed column, especially when the join condition is frequently used in the workload. Prioritize indexing columns that are part of join conditions across multiple queries and have high cardinality, while ensuring not to duplicate indexes on columns that are already efficiently covered by existing indexes.\"}"], ["train_workload_random_26_7q", "[date_dim(d_date_sk), promotion(p_promo_sk), customer(c_customer_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), web_returns(wr_item_sk), catalog_returns(cr_item_sk)]", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Avoid adding indexes on columns that are frequently used in join conditions across multiple large tables unless they are part of a composite index that optimizes the specific join pattern. Prioritize indexing columns that are used in filtering conditions and have high cardinality, especially in smaller tables, to improve query performance without excessive overhead.\"}"], ["train_workload_random_26_7q", "[web_returns(wr_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), customer(c_customer_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_year), web_site(web_site_sk), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Ensure indexes cover join conditions and filter predicates across all tables involved in the workload queries. Specifically, prioritize indexing columns used in join conditions and where clauses, such as date_dim(d_date_sk), store(s_store_sk), and web_site(web_site_sk), to prevent regressions in query performance.\"}"], ["train_workload_random_26_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C catalog_returns.cr_order_number,C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Ensure composite indexes are used for columns frequently involved in join operations and filtering conditions, especially when multiple columns are used together in queries. Avoid relying solely on single-column indexes for complex queries that benefit from composite indexes.\"}"], ["train_workload_random_26_7q", " [store(s_store_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number)]", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Avoid creating indexes on columns that are already part of a join condition with another indexed column, as this can lead to redundant indexing and potential performance regression. Focus on indexing columns that are frequently used in WHERE clauses or as part of complex join conditions without existing indexes.\"}"], ["train_workload_random_26_7q", " [store(s_store_sk), customer_address(ca_address_sk), customer(c_customer_sk), web_returns(wr_item_sk, wr_order_number), catalog_returns(cr_item_sk, cr_order_number)]", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Avoid creating indexes on columns that are already part of a join condition with another indexed column, as this can lead to redundant indexing and potential performance regression. Focus on indexing columns that are frequently used in WHERE clauses or as part of join conditions without existing indexes.\"}"], ["train_workload_random_26_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C web_returns.wr_order_number), I(C catalog_returns.cr_order_number,C catalog_returns.cr_returned_date_sk)]", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filtering, especially when multiple columns are used together in queries. Prioritize composite indexes over single-column indexes when the workload involves complex joins and filters on multiple columns.\"}"], ["train_workload_random_26_7q", " [item(i_item_sk), promotion(p_promo_sk), web_returns(wr_item_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Avoid creating indexes on columns that are not frequently used in join conditions or filter predicates across the workload. Prioritize indexing columns that are consistently used in join conditions and filter predicates, especially in large tables, to optimize query performance.\"}"], ["train_workload_random_26_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C catalog_returns.cr_order_number,C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Prioritize composite indexes over single-column indexes when the workload involves complex queries with multiple joins and conditions.\"}"], ["train_workload_random_26_7q", " [date_dim(d_date_sk), web_returns(wr_item_sk, wr_order_number), customer_address(ca_address_sk), customer(c_customer_sk), promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk)]", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Ensure that all join keys used in the workload queries are indexed. Specifically, include composite indexes for columns frequently used together in join conditions, such as (wr_item_sk, wr_order_number) for web_returns, and ensure that all date-related columns like d_date_sk are indexed to optimize date range queries.\"}"], ["train_workload_random_26_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C catalog_returns.cr_order_number,C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid relying solely on single-column indexes for tables with high row counts and complex queries.\"}"], ["train_workload_random_26_7q", "[web_returns(wr_item_sk), date_dim(d_date_sk), promotion(p_promo_sk), item(i_item_sk), customer(c_customer_sk), store(s_store_sk), customer_address(ca_address_sk), date_dim(d_year), web_site(web_site_sk), store_returns(sr_ticket_number), catalog_returns(cr_item_sk)]", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Ensure that all date-related columns used in WHERE clauses, such as date_dim(d_date_sk), are indexed to prevent regressions in query performance. Additionally, maintain indexes on join keys across tables, especially for large tables, to optimize join operations.\"}"], ["train_workload_random_26_7q", " [date_dim(d_date), promotion(p_promo_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)].", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Avoid indexing columns that are frequently used in join conditions across large tables unless they are also used in filtering conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, especially in smaller tables or those with date-related filtering.\"}"], ["train_workload_random_26_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C catalog_returns.cr_order_number,C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Ensure multi-column indexes are used for columns frequently involved in join operations and filtering conditions, especially when they are part of complex queries with multiple tables. Avoid relying solely on single-column indexes for columns that are part of composite keys or are frequently used together in query conditions.\"}"], ["train_workload_random_26_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C catalog_returns.cr_order_number,C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Ensure that multi-column indexes are preserved when they are used in join conditions or filtering conditions across multiple tables, especially when the workload involves complex queries with multiple joins and date range filters. Avoid replacing multi-column indexes with single-column indexes if the workload benefits from the former.\"}"], ["train_workload_random_26_7q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C catalog_returns.cr_order_number,C catalog_returns.cr_returned_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk)]", " [web_returns(wr_item_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), item(i_item_sk), promotion(p_promo_sk)].", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filtering, especially when multiple columns are used together in queries. Avoid relying solely on single-column indexes when queries involve multiple columns in conditions.\"}"]], "train_workload_random_33_10q": [["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions, especially for large tables. Prioritize indexing columns that are frequently used in filtering and joining operations across multiple queries.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables. Prioritize indexes on columns with high cardinality and those involved in range queries or subqueries. Avoid indexes on columns with low cardinality or those not frequently filtered or joined.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple queries, especially when they involve large tables. Avoid replacing composite indexes with single-column indexes unless the workload predominantly benefits from the latter.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "{rule: \"Ensure indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Prioritize columns that are used in filtering conditions and are part of foreign key relationships.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple queries, especially when they involve large tables. Avoid replacing composite indexes with single-column indexes unless the workload predominantly benefits from single-column access patterns.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "{rule: \"Ensure that indexes cover both join and filter conditions in queries. Avoid removing composite indexes that cover multiple columns used together in queries, especially when they are frequently used in the workload. Prioritize indexes on columns that are used in WHERE clauses, JOIN conditions, and GROUP BY clauses, particularly for large tables.\"}"], ["train_workload_random_33_10q", " [date_dim(d_date_sk, d_week_seq), item(i_item_sk, i_manufact_id, i_manager_id), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), inventory(inv_item_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk)]\n```", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "```json\n{\n    \"rule\": \"Ensure that indexes cover both the join keys and the filtering conditions. Avoid removing indexes on primary join keys or frequently filtered columns, especially in large tables. For example, maintain indexes on date_dim(d_date_sk) and sales tables' sold_date_sk columns to optimize joins and date range filters.\"\n}\n```"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially for large tables. Avoid indexes on columns with low cardinality or those not frequently filtered or joined.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "{\"rule\": \"Ensure that indexes cover both the join and filter conditions in queries. If an index is removed or simplified, verify that it does not lead to missing coverage for critical query components such as join keys or frequently filtered columns. Specifically, maintain composite indexes when multiple columns are frequently used together in queries, as seen with the improvement index I(C item.i_item_sk,C item.i_manager_id) and I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk).\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "{\"rule\": \"Ensure that composite indexes are used for columns frequently queried together, especially in join and filter conditions, and avoid using single-column indexes when multi-column indexes can better optimize the workload.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple tables, especially when dealing with large datasets. Avoid relying solely on single-column indexes for such scenarios.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk)]", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "{rule: \"Ensure indexes cover join and filter conditions across multiple tables, especially for columns frequently used in WHERE clauses and JOIN operations. Prioritize composite indexes on columns involved in multi-table joins and filters, such as date keys and foreign keys, to prevent regression in query performance.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "{rule: \"Avoid creating indexes on columns that are already frequently used as join keys across multiple queries, especially if they are part of large tables. Instead, focus on indexing columns that are used in WHERE clauses or GROUP BY operations to filter or aggregate data efficiently.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk)]", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions and frequently filtered columns in WHERE clauses are maintained. Avoid removing indexes on columns that are part of multiple join conditions across different queries, especially if they are used in large tables or tables with high cardinality.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Prioritize indexing columns that are used in multiple queries across the workload, such as date keys and item keys, to optimize query performance. Avoid removing indexes on columns that are critical for filtering and joining operations, as this can lead to regressions.\"}"], ["train_workload_random_33_10q", " [date_dim(d_date_sk, d_week_seq), item(i_item_sk, i_manufact_id, i_manager_id), catalog_sales(cs_sold_date_sk, cs_item_sk), web_sales(ws_sold_date_sk, ws_item_sk), store_sales(ss_sold_date_sk, ss_item_sk), inventory(inv_item_sk), web_returns(wr_returned_date_sk), customer(c_customer_sk)]\n```", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "```json\n{\n    \"rule\": \"Ensure that indexes cover both the join keys and the filtering conditions. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables. Maintain indexes on primary keys and foreign keys that are frequently joined or filtered in queries.\"\n}\n```"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently joined with other tables, as these columns are likely to be involved in multiple queries and can benefit from existing indexes. Instead, focus on indexing columns that are used in WHERE clauses, GROUP BY, or ORDER BY operations, especially if they are not part of foreign key relationships.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables, to prevent regression. Additionally, prioritize indexes on columns frequently used in WHERE clauses and GROUP BY operations to optimize query performance.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "{rule: \"Ensure that indexes cover the join and filter conditions in the workload queries. Specifically, prioritize indexing on columns frequently used in joins and where clauses, such as date_dim.d_date_sk, web_sales.ws_item_sk, and catalog_sales.cs_item_sk, to prevent regression.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk)]", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "{rule: \"Ensure that indexes on columns frequently used in join conditions and filters across multiple queries are maintained. Specifically, maintain indexes on columns like 'date_dim.d_week_seq', 'item.i_item_id', and 'item.i_item_sk' which are used in multiple queries for joins and filtering, as their absence can lead to performance regressions.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "{rule: \"Ensure that indexes are created on columns frequently used in join conditions and where clauses, especially for large tables. Avoid removing indexes on primary key or foreign key columns that are heavily used in the workload.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "{rule: \"Ensure that indexes cover both join and filter conditions in queries. Prioritize composite indexes on columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes that do not align with query patterns.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "{rule: \"Ensure that indexes are created on columns frequently used in join conditions and where clauses, especially for large tables. Avoid removing indexes on primary key or foreign key columns that are heavily used in the workload.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in WHERE clauses, especially for large tables. Avoid single-column indexes on columns that are part of multi-column conditions in the workload.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality and those involved in multi-table joins.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained or added, especially when they are frequently used in the workload queries. Avoid removing or altering indexes on columns that are part of join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple queries, especially when they involve large tables. Avoid replacing composite indexes with single-column indexes if the workload shows frequent multi-column access patterns.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk)]", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "{rule: \"Ensure indexes are created on columns frequently used in WHERE clauses, especially for large tables, and prioritize composite indexes that cover multiple columns used together in JOIN or WHERE conditions to prevent regression.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_sales.ws_sold_date_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained or added, especially for large tables, to prevent regression in query performance.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk)]", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "```json\n{\n    \"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in join conditions, especially for large tables. Consider the workload's most common join and filter patterns when selecting indexes.\"\n}\n```"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "{rule: \"Ensure that indexes cover both the join and filter conditions in queries. Avoid removing composite indexes that cover multiple columns used together in queries, especially when they are frequently used in the workload. Consider the impact of removing indexes on query performance, particularly for large tables and complex queries with multiple joins and filters.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple tables, especially when dealing with large datasets. Avoid single-column indexes when multi-column indexes can optimize query performance by covering more conditions.\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", " [date_dim(d_date), web_sales(ws_item_sk), catalog_sales(cs_item_sk)].", "{\"rule\": \"Ensure that indexes cover both the join and filter conditions in queries. If an index is removed or simplified, verify that it does not lead to missing coverage for critical query components such as join keys or frequently filtered columns. Specifically, maintain composite indexes when multiple columns are frequently used together in queries, as seen with the improvement index I(C item.i_item_sk,C item.i_manager_id) and I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk).\"}"], ["train_workload_random_33_10q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C date_dim.d_year), I(C item.i_item_id), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_manager_id), I(C store_sales.ss_item_sk,C store_sales.ss_sold_date_sk)]", "[store_returns(sr_store_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), item(i_manufact_id)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters across multiple tables, especially when dealing with large datasets. Avoid single-column indexes when multi-column indexes can better optimize query performance.\"}"]], "train_workload_random_8_10q": [["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions, such as date columns and item keys, to prevent regressions.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover join conditions without considering filter conditions, especially when multiple tables are involved in the query.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Prioritize indexes on date columns used in range queries and joins, and ensure indexes cover all columns involved in multi-column conditions.\"}"], ["train_workload_random_8_10q", "[store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_demo_sk)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions with large tables, especially when the join condition involves multiple columns. Instead, prioritize indexing columns that are used in WHERE clauses with high selectivity or are involved in single-column join conditions with smaller tables.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Avoid indexes that only cover join conditions without considering filter conditions, especially for columns frequently used in WHERE clauses.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns used in join conditions and where clauses, such as date keys and item keys, to prevent regressions.\"}"], ["train_workload_random_8_10q", " [date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), store_returns(sr_item_sk)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions with multiple tables, especially when the join involves large tables. Instead, prioritize indexing columns that are used in WHERE clauses and are part of filtering conditions, as these can significantly improve query performance by reducing the search space.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes for columns frequently used together in joins and filters, especially when they involve large tables. Avoid single-column indexes when multi-column indexes can optimize multiple queries.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes solely on columns used in join conditions without considering filter conditions, especially when the filter conditions involve range queries or specific value checks. Additionally, consider composite indexes for columns frequently used together in queries to improve performance.\"}"], ["train_workload_random_8_10q", "[store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_demo_sk)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover join conditions without considering the filter conditions, especially when the filter conditions are on large tables or frequently queried columns.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover all join conditions and filter predicates in the workload queries. Specifically, for regression detection, check if the regression index selection lacks coverage for multi-column join conditions or filter predicates that are present in the workload, such as those involving date dimensions or item identifiers. Correct by adding composite indexes that match these conditions.\"}"], ["train_workload_random_8_10q", "[store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_demo_sk)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Avoid creating composite indexes on columns that are not frequently used together in join conditions or where clauses across multiple queries. Instead, focus on indexing individual columns that are consistently used in join conditions or filters, especially those involving date dimensions and foreign keys.\"}"], ["train_workload_random_8_10q", "[catalog_sales(cs_item_sk), date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), item(i_item_id), item(i_current_price), date_dim(d_week_seq), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), date_dim(d_moy), catalog_returns(cr_order_number), catalog_sales(cs_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_returned_date_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses, such as date_dim(d_date_sk), are indexed to optimize query performance, especially when filtering by date ranges. Additionally, maintain indexes on columns involved in JOIN conditions across multiple tables, such as store(s_store_sk) and promotion(p_promo_sk), to prevent regressions in query execution time.\"}"], ["train_workload_random_8_10q", " [store(s_store_sk, s_store_id), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions with large tables, especially when the join conditions involve multiple columns. Instead, prioritize indexing columns that are used in filtering conditions or are part of smaller tables to improve query performance.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together, such as item_sk and order_number in sales and returns tables.\"}"], ["train_workload_random_8_10q", "[catalog_sales(cs_item_sk), date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), item(i_item_id), item(i_current_price), date_dim(d_week_seq), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), date_dim(d_moy), catalog_returns(cr_order_number), catalog_sales(cs_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_returned_date_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that all foreign key columns used in joins and filters are indexed, especially those that are frequently used in the workload queries. Avoid creating composite indexes that do not align with the query patterns, and ensure that indexes cover the most selective columns first.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together, as this can lead to performance regressions.\"}"], ["train_workload_random_8_10q", "[catalog_sales(cs_item_sk), date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), item(i_item_id), item(i_current_price), date_dim(d_week_seq), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), date_dim(d_moy), catalog_returns(cr_order_number), catalog_sales(cs_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_returned_date_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on date columns used in filtering (e.g., date_dim(d_date_sk), date_dim(d_date), date_dim(d_week_seq), date_dim(d_moy)) and ensure coverage for all join keys across tables (e.g., store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk), web_site(web_site_sk)). Avoid omitting indexes on critical columns that are frequently used in joins and filters, such as date columns and primary keys.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in queries.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure composite indexes are created for columns frequently used together in WHERE clauses, especially for date-related columns and identifiers like item_sk and order_number, to prevent regression in query performance.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover all join conditions and filter predicates used in the workload queries. Specifically, include composite indexes for columns frequently used together in join conditions, such as (sr_ticket_number, sr_item_sk) in store_returns, and ensure indexes on columns used in WHERE clauses, such as cs_sold_date_sk in catalog_sales.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes that only cover join conditions without considering the filter conditions used in the workload queries.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes for columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes on columns with high cardinality unless they are frequently used in isolation.\"}"], ["train_workload_random_8_10q", "[store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_demo_sk)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions with other tables, especially when the join involves multiple columns. Instead, prioritize indexing columns that are used in WHERE clauses or as foreign keys, and ensure that indexes are created on columns that are used in filtering conditions across multiple queries.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Avoid indexes that only cover join conditions without considering filter conditions, especially for columns frequently used in WHERE clauses.\"}"], ["train_workload_random_8_10q", " [customer_demographics(cd_marital_status), household_demographics(hd_buy_potential), store(s_store_sk, s_store_id), promotion(p_promo_sk), web_site(web_site_id, web_site_sk)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained or added, especially when they are frequently used in the workload. Avoid removing or not including indexes on columns that are part of join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Ensure composite indexes cover all join and filter conditions in queries, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in joins or filters.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover one aspect, as this can lead to regressions. For example, if a query frequently joins on a column and also filters on it, the index should include both the join and filter columns to optimize performance.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Prioritize indexes on date columns and primary keys used in WHERE clauses and JOINs. Avoid single-column indexes when multi-column indexes can optimize multiple queries.\"}"], ["train_workload_random_8_10q", " [date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), store_returns(sr_item_sk)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes are created on columns frequently used in join conditions and where clauses, especially for large tables. Prioritize indexing columns that are used in multiple queries across different workloads, such as date keys and item keys, to optimize query performance and prevent regressions.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns used in join conditions across multiple tables and those frequently used in WHERE clauses. Avoid removing composite indexes that cover multiple columns used together in join conditions.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Ensure composite indexes cover all join and filter conditions in queries, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in joins or filters.\"}"], ["train_workload_random_8_10q", " [store(s_store_sk, s_store_id), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions with large tables, especially when the join involves multiple columns. Instead, prioritize indexing columns that are used in filtering conditions or are part of smaller tables to improve query performance.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Prioritize indexes on date columns and identifiers used in WHERE clauses and JOINs. Avoid single-column indexes when multiple columns are frequently queried together.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. If an index is removed or replaced, verify that all critical join and filter columns are still indexed, especially those frequently used in WHERE clauses and JOIN conditions across multiple queries.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover all join conditions and filter predicates used in the workload queries. Specifically, include composite indexes for columns frequently used together in join conditions, such as (sr_ticket_number, sr_item_sk) for store_returns, and ensure indexes on columns used in WHERE clauses, like cs_sold_date_sk for catalog_sales.\"}"], ["train_workload_random_8_10q", " [store(s_store_sk, s_store_id), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions with large tables, especially when the join involves multiple columns. Instead, prioritize indexing columns that are used in filtering conditions or are part of smaller tables to improve query performance.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Avoid indexes that only cover filter conditions without considering join conditions, especially when multiple tables are involved in the query.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Prioritize indexes on date columns used in range queries and joins, and ensure indexes cover all columns involved in frequent join operations to prevent regressions.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes that include columns frequently used together in joins and filters, especially for large tables. Avoid single-column indexes that do not address the full scope of query conditions.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together in the workload.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Ensure composite indexes cover all join and filter conditions in queries, especially for large tables. Avoid single-column indexes when multiple columns are frequently used together in joins or filters.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover one aspect, as they may lead to regressions in query performance.\"}"], ["train_workload_random_8_10q", " [customer_demographics(cd_marital_status), household_demographics(hd_buy_potential), store(s_store_sk, s_store_id), promotion(p_promo_sk), web_site(web_site_id, web_site_sk)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across large tables, especially when they are not used in filtering conditions. Instead, prioritize indexing columns that are used in filtering conditions and have high cardinality, as well as columns that are used in group by or order by clauses.\"}"], ["train_workload_random_8_10q", "[catalog_sales(cs_item_sk), date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), item(i_item_id), item(i_current_price), date_dim(d_week_seq), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), date_dim(d_moy), catalog_returns(cr_order_number), catalog_sales(cs_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_returned_date_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover all join conditions and filter predicates in the workload queries. Specifically, prioritize indexing columns involved in joins and filters across multiple queries, such as date keys and item keys, to prevent regression in query performance.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates. Avoid partial indexes that miss key columns used in joins or filters, especially in large tables. For example, if a query joins on multiple columns, ensure the index includes all those columns, not just a subset.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid regression by maintaining indexes on date columns and primary keys used in joins.\"}"], ["train_workload_random_8_10q", " [catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across the workload. Prioritize indexing columns that are consistently used in filtering conditions, such as date keys in time-based queries, to prevent regression in query performance.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover one aspect, as they may lead to regressions in query performance. Prioritize composite indexes that align with the workload's join and filter patterns.\"}"], ["train_workload_random_8_10q", " [customer_demographics(cd_marital_status), household_demographics(hd_buy_potential), store(s_store_sk, s_store_id), promotion(p_promo_sk), web_site(web_site_id, web_site_sk)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes are created on columns frequently used in join conditions and where clauses, especially for large tables. Avoid creating indexes on columns that are not used in filtering or joining operations, as they may not provide performance benefits and could lead to regressions.\"}"], ["train_workload_random_8_10q", "[store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_demo_sk)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover join conditions without considering the filter conditions, especially when the filter conditions are on large tables or columns with high cardinality.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Ensure that indexes cover all join conditions and filter predicates. If a query involves multiple tables with join conditions, consider composite indexes that include all columns involved in the join. Additionally, ensure that indexes are created on columns frequently used in WHERE clauses to filter data, especially if they are used in combination with other columns in the same table.\"}"], ["train_workload_random_8_10q", " [customer_demographics(cd_marital_status), household_demographics(hd_buy_potential), store(s_store_sk, s_store_id), promotion(p_promo_sk), web_site(web_site_id, web_site_sk)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions with large tables, especially when the join conditions involve multiple columns. Instead, prioritize indexing columns that are used in filtering conditions or group by operations, particularly those with high cardinality or those that are part of smaller tables.\"}"], ["train_workload_random_8_10q", " [catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as item_sk and order_number, when the workload primarily involves filtering by date or address keys, as this can lead to regression in query performance.\"}"], ["train_workload_random_8_10q", "[catalog_sales(cs_item_sk), date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), item(i_item_id), item(i_current_price), date_dim(d_week_seq), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), date_dim(d_moy), catalog_returns(cr_order_number), catalog_sales(cs_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_returned_date_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover all join conditions and filter predicates in the workload queries. Specifically, for regression detection, check if indexes are missing for columns involved in frequent joins or filters, such as date columns and foreign keys, which are present in the improvement index but missing in the regression index.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions in queries. If a query involves joining tables on multiple columns, consider composite indexes that include all join columns. Additionally, ensure that indexes are created on columns frequently used in WHERE clauses to filter data, especially if they are used in conjunction with join conditions.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Ensure composite indexes cover all join and filter conditions in queries. For regression indexes, check if they miss columns involved in joins or filters that are present in improvement indexes, especially for large tables or frequently queried columns.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover one aspect, such as only join keys or only filter columns, as this can lead to regressions in query performance.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes for columns frequently used together in joins and filters, especially when multiple columns are involved in the same query. Avoid single-column indexes when multi-column indexes can optimize multiple queries simultaneously.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables. Consider composite indexes for multi-column conditions.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates. If a query involves multiple tables with join conditions, indexes should be created on columns used in join conditions across all tables involved. Additionally, indexes should be created on columns frequently used in WHERE clauses for filtering, especially if they are used in combination with other columns in join conditions.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates. Avoid partial indexes that miss key columns used in joins or filters, especially in large tables. Prioritize composite indexes that match the workload's join and filter patterns.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes for columns frequently used together in joins and filters, especially when they involve large tables. Avoid single-column indexes when multi-column indexes can optimize multiple queries.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure indexes cover both join and filter conditions. Prioritize composite indexes for columns frequently used together in joins and filters, especially when they involve large tables. Avoid single-column indexes when multi-column indexes can optimize multiple queries.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially those involving date ranges or identifiers like order numbers and item SKs.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates. For regression detection, check if indexes are missing for columns frequently used in joins or filters across multiple queries, especially those involving large tables. Correct by adding composite indexes for columns used together in join conditions.\"}"], ["train_workload_random_8_10q", " [customer_demographics(cd_marital_status), household_demographics(hd_buy_potential), store(s_store_sk, s_store_id), promotion(p_promo_sk), web_site(web_site_id, web_site_sk)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions with high cardinality, such as order numbers and item SKs, as they can lead to regression by increasing the cost of maintaining the index and not significantly improving query performance. Instead, focus on indexing columns that are used in filtering conditions or have lower cardinality, which can provide more substantial performance improvements.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in WHERE clauses or JOIN conditions. Instead, prioritize single-column indexes for such columns to optimize query performance.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Prioritize indexes on date columns used in range queries and joins, and ensure indexes cover columns involved in frequent joins and filters across multiple queries.\"}"], ["train_workload_random_8_10q", "[catalog_sales(cs_item_sk), date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), item(i_item_id), item(i_current_price), date_dim(d_week_seq), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), date_dim(d_moy), catalog_returns(cr_order_number), catalog_sales(cs_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_returned_date_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on date columns used in range filters, and ensure indexes on columns involved in join conditions across large tables.\"}"], ["train_workload_random_8_10q", " [store(s_store_sk, s_store_id), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk), household_demographics(hd_buy_potential)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained or added, especially when they are frequently used in the workload queries. Avoid removing or not including indexes on columns that are part of join conditions across large tables, as this can lead to performance regressions.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Ensure that indexes cover both the join keys and the filtering conditions. Avoid creating indexes that only cover join keys without considering the filtering conditions used in WHERE clauses, especially for large tables. This can lead to regressions in query performance.\"}"], ["train_workload_random_8_10q", " [catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), web_sales(ws_sold_date_sk), customer_address(ca_address_sk)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across the workload. Prioritize indexing columns that are consistently used in filtering and joining operations, such as date keys and foreign keys, to optimize query performance.\"}"], ["train_workload_random_8_10q", "[catalog_sales(cs_item_sk), date_dim(d_date_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), date_dim(d_date), item(i_item_id), item(i_current_price), date_dim(d_week_seq), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_site(web_site_sk), date_dim(d_moy), catalog_returns(cr_order_number), catalog_sales(cs_sold_date_sk), web_returns(wr_returned_date_sk), catalog_returns(cr_returned_date_sk), store_returns(sr_item_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on date columns used in filtering (e.g., date_dim(d_date_sk), date_dim(d_date), date_dim(d_week_seq), date_dim(d_moy)) and ensure indexes on columns involved in joins across tables (e.g., store(s_store_sk), promotion(p_promo_sk), item(i_item_sk), customer_address(ca_address_sk)). Avoid omitting indexes on critical date columns and join keys that are frequently used in the workload.\"}"], ["train_workload_random_8_10q", " [date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), store_returns(sr_item_sk)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid indexing columns that are only used in specific queries or less frequently accessed, as they may not provide significant performance benefits and could lead to regression.\"}"], ["train_workload_random_8_10q", " [date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), store_returns(sr_item_sk)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained or added, especially when they are frequently used in the workload. Avoid removing or altering indexes on columns that are part of composite keys in join conditions, as this can lead to performance regressions.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Ensure indexes cover all join conditions and filter predicates. Avoid partial indexes that miss key columns used in joins or filters, especially in large tables. Prioritize composite indexes for multi-column conditions to prevent regressions.\"}"], ["train_workload_random_8_10q", " [date_dim(d_date_sk), catalog_sales(cs_sold_date_sk), store_sales(ss_sold_date_sk), store_returns(sr_item_sk)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in join conditions or where clauses, especially if they are not part of the primary filtering criteria in the workload. Focus on indexing columns that are consistently used in join conditions and filtering, such as date keys and primary keys, to prevent regression.\"}"], ["train_workload_random_8_10q", "[store(s_store_sk), date_dim(d_date_sk), item(i_item_sk), customer_address(ca_address_sk), web_returns(wr_returned_date_sk), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), customer_demographics(cd_demo_sk)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in joins and filters are prioritized over indexes on columns used in calculations or aggregations. Specifically, prioritize indexes on date_dim(d_date_sk), store(s_store_sk), and item(i_item_sk) over indexes on columns like i_current_price or order numbers, which are less frequently used in join conditions.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. If a query involves multiple tables with join conditions, indexes should be created on the columns used in the join conditions as well as the columns used in WHERE clauses for filtering. Avoid creating indexes only on join columns without considering filter columns, as this can lead to regressions in query performance.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, for regression detection, check if any index is missing for columns involved in join conditions or where clauses, especially for large tables. If a regression index lacks coverage for such columns, consider adding composite indexes that include these columns.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Catalog_returns(cr_order_number, cr_item_sk), Web_returns(wr_order_number, wr_item_sk, wr_returned_date_sk)]", "{rule: \"Ensure composite indexes cover all join and filter conditions in queries. Avoid partial coverage that can lead to regressions. For example, if a query joins on multiple columns, ensure the index includes all those columns in the correct order.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Avoid creating composite indexes on columns that are frequently used individually in join conditions or filters. Instead, prioritize single-column indexes for such columns to optimize query performance.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [catalog_sales(cs_item_sk), store_sales(ss_sold_date_sk), store_returns(sr_ticket_number), item(i_current_price), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), web_sales(ws_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover one aspect, as seen in the regression index where some indexes only cover join keys without considering filter conditions, leading to potential performance regressions.\"}"], ["train_workload_random_8_10q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_week_seq), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [Catalog_sales(cs_item_sk), Store_returns(sr_ticket_number), Web_returns(wr_order_number), Catalog_returns(cr_item_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables. Consider composite indexes for multi-column conditions.\"}"]], "train_workload_random_12_4q": [["train_workload_random_12_4q", " [customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), item(i_color), catalog_sales(cs_sold_date_sk, cs_item_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses with high cardinality, such as date columns and item identifiers, as these are critical for query performance.\"}"], ["train_workload_random_12_4q", " [promotion(p_promo_sk), item(i_item_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized over indexes on columns used in filtering conditions, especially when the filtering conditions involve low cardinality columns or are not frequently used across multiple queries.\"}"], ["train_workload_random_12_4q", "[date_dim(d_date), promotion(p_promo_sk), store(s_store_sk), household_demographics(hd_buy_potential)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a composite index with other columns that are frequently used together in queries. Instead, focus on creating indexes on individual columns that are frequently used in WHERE clauses or JOIN conditions independently.\"}"], ["train_workload_random_12_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure indexes cover join and filter conditions for high cardinality columns, especially when they are used in subqueries or common table expressions. Prioritize indexing columns involved in frequent joins and filters across multiple queries, such as item identifiers and date keys, to prevent regression.\"}"], ["train_workload_random_12_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Specifically, prioritize indexing columns involved in frequent joins and filters across multiple queries, such as date keys, item keys, and address keys. Avoid regression by maintaining composite indexes that cover both join and filter conditions, especially for tables with high row counts or frequent access patterns.\"}"], ["train_workload_random_12_4q", " [customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), item(i_color), catalog_sales(cs_sold_date_sk, cs_item_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses with high cardinality, such as date columns and item identifiers, as these are critical for query performance.\"}"], ["train_workload_random_12_4q", " [customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), item(i_color), catalog_sales(cs_sold_date_sk, cs_item_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables. Avoid removing indexes on columns frequently used in WHERE clauses with high cardinality, such as date columns, to prevent regression in query performance.\"}"], ["train_workload_random_12_4q", " [Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Store(s_store_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Household_demographics(hd_buy_potential), Web_sales(ws_item_sk)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as date keys and foreign keys. Avoid omitting indexes on columns that are part of complex join conditions or subqueries.\"}"], ["train_workload_random_12_4q", "[date_dim(d_date), promotion(p_promo_sk), store(s_store_sk), household_demographics(hd_buy_potential)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{\"rule\": \"Avoid creating composite indexes that include both a primary key and a non-key column from the same table, as it may lead to unnecessary complexity and potential performance regression. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality.\"}"], ["train_workload_random_12_4q", " [customer_address(ca_gmt_offset), catalog_sales(cs_sold_date_sk), store(s_store_sk), item(i_item_id), date_dim(d_date_sk)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Ensure that indexes are created on columns that improve query performance by reducing scan times and enhancing lookup efficiency.\"}"], ["train_workload_random_12_4q", " [customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), item(i_color), catalog_sales(cs_sold_date_sk, cs_item_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_12_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure that indexes cover both join and filter conditions in queries. Avoid removing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially those involving large tables or high cardinality columns.\"}"], ["train_workload_random_12_4q", " [Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Store(s_store_sk), Catalog_page(cp_catalog_page_sk), Web_site(web_site_sk), Household_demographics(hd_buy_potential), Web_sales(ws_item_sk)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries, especially for columns involved in multiple queries or subqueries. Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across different queries, such as date columns and foreign keys. Avoid omitting indexes on columns that are used in subqueries or have high cardinality, as these can significantly impact query performance.\"}"], ["train_workload_random_12_4q", " [Promotion(p_promo_sk), Warehouse(w_warehouse_sk), Store(s_store_id), Web_site(web_site_id, web_site_sk), Household_demographics(hd_buy_potential), Customer_demographics(cd_marital_status)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Prioritize indexing columns that are used in filtering conditions and have high cardinality, as seen in the improvement index selection.\"}"], ["train_workload_random_12_4q", " [customer_address(ca_gmt_offset), store_sales(ss_sold_date_sk), store_returns(sr_item_sk), item(i_color), catalog_sales(cs_sold_date_sk, cs_item_sk), date_dim(d_date_sk), web_sales(ws_sold_date_sk, ws_item_sk), catalog_returns(cr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Prioritize indexing columns involved in frequent joins and filters, especially those with high cardinality or used in multiple queries. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_12_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure indexes cover join and filter conditions for high cardinality columns and frequently queried tables. Prioritize composite indexes for columns used together in WHERE clauses and JOIN conditions, especially for large tables.\"}"], ["train_workload_random_12_4q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", " [store(s_store_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_date), customer_address(ca_gmt_offset), catalog_sales(cs_item_sk), catalog_page(cp_catalog_page_sk)]", "{rule: \"Ensure indexes cover join and filter conditions for high cardinality columns in large tables, especially when they are frequently used in the workload. Prioritize composite indexes that include both join keys and filter conditions to optimize query performance.\"}"]], "NaN": [[NaN, NaN, NaN, "{rule: \"Ensure that indexes are created on columns frequently used in WHERE clauses, JOIN conditions, and ORDER BY clauses, especially for tables with a large number of rows. Avoid creating indexes on columns with low cardinality or columns that are not used in query conditions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered for columns frequently used in WHERE clauses, JOIN conditions, or as foreign keys, especially in large tables with high row counts, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered on columns frequently used in WHERE clauses, JOIN conditions, or as foreign keys, especially in large tables, to prevent performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"If the workload and index selections are not provided, ensure that the schema is correctly parsed and check for any missing data or errors in the input. Validate the presence of workload and index data before proceeding with analysis.\"}"], [NaN, NaN, NaN, "{rule: \"If the workload and index selections are not provided, ensure that the schema is correctly parsed and check for any missing data or errors in the input. Validate the input format and completeness before proceeding with index analysis.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that the index selection process considers the cardinality and distribution of data within columns, prioritizing columns with high cardinality and frequent usage in WHERE clauses, JOIN conditions, and ORDER BY clauses. Avoid creating indexes on columns with low cardinality or columns that are rarely used in query predicates.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered for columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"If the workload and index selections are not provided, ensure that the schema is correctly parsed and check for any missing data or errors in the input. Validate the presence of workload and index data before proceeding with analysis.\"}"], [NaN, NaN, NaN, "{rule: \"If the workload and index selections are not provided, ensure that the schema is correctly parsed and check for any missing data or errors in the input. Validate the presence of workload and index data before proceeding with analysis.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that the index selection process considers the cardinality and distribution of data within columns, prioritizing columns with high cardinality and frequent use in WHERE clauses or JOIN conditions. Avoid creating indexes on columns with low cardinality or those not frequently queried, as they may lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that the index selection process considers the cardinality and distribution of the columns involved in the queries. Avoid creating indexes on columns with low cardinality or uniform distribution, as they may not provide significant performance benefits and could lead to regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered on columns frequently used in WHERE clauses or JOIN conditions, especially for tables with a high number of rows, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"If the workload and index selections are not provided, ensure that the workload is correctly captured and the index selections are specified before proceeding with analysis.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered for columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that the index selection process considers the cardinality and distribution of the columns involved in the queries. Avoid creating indexes on columns with low cardinality or uniform distribution, as they may not provide significant performance benefits and could lead to regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered for columns frequently used in WHERE clauses, JOIN conditions, or as foreign keys, especially in large tables with high row counts, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that the index selection process considers the cardinality and distribution of the columns involved in the queries. Avoid creating indexes on columns with low cardinality or uniform distribution, as they may not provide significant performance benefits and could lead to regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered for columns frequently used in WHERE clauses, JOIN conditions, or as foreign keys, especially in large tables with high row counts, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"If the workload and index selections are not provided, ensure that the schema is correctly parsed and check for any missing data or errors in the input. Validate the presence of workload and index data before proceeding with analysis.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that the index selection process considers the cardinality and distribution of data within columns, especially for columns with high cardinality or skewed distributions, to avoid performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"When comparing index selections, ensure that the regression index does not remove or alter indexes that are critical for high-frequency queries or those that significantly reduce query execution time on large tables.\"}"], [NaN, NaN, NaN, "{rule: \"If the workload and index selections are not provided, ensure that the schema is correctly parsed and check for any missing data or errors in the input. Validate the presence of workload and index data before proceeding with analysis.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes on foreign key columns are maintained and not removed, as they are critical for join operations and can lead to performance regressions if omitted.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered for columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered for columns frequently used in WHERE clauses, JOIN conditions, or as foreign keys, especially in large tables with high row counts.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"If the workload and index selections are not provided, ensure that the schema is correctly parsed and check for missing data inputs before proceeding with index analysis.\"}"], [NaN, NaN, NaN, "{rule: \"If the workload and index selections are not provided, ensure that the schema is correctly parsed and check for any missing data or errors in the input. Validate the presence of workload and index data before proceeding with analysis.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered for columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that the index selection process considers the cardinality and distribution of data within columns, prioritizing columns with high cardinality and frequent usage in WHERE clauses or JOIN conditions. Avoid creating indexes on columns with low cardinality or those not frequently used in query predicates.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are created on columns frequently used in WHERE clauses, JOIN conditions, and ORDER BY clauses, especially for tables with a large number of rows. Avoid creating indexes on columns with low cardinality or columns not involved in query filtering or sorting.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that the index selection process considers the distribution and cardinality of columns, prioritizing columns with high cardinality and frequent use in WHERE clauses, JOIN conditions, and ORDER BY clauses. Avoid creating indexes on columns with low cardinality or those not frequently used in query predicates.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered for columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes on foreign key columns are maintained and not removed, as they are critical for join operations and can lead to performance regressions if omitted.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that the index selection process considers the cardinality and distribution of data within columns, prioritizing columns with high cardinality and frequent use in WHERE clauses or JOIN conditions to prevent regression.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered for columns frequently used in WHERE clauses, JOIN conditions, or as foreign keys, especially in large tables with high row counts, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that the index selection process considers the cardinality and distribution of data within columns, prioritizing columns with high cardinality and frequent use in WHERE clauses or JOIN conditions. Avoid creating indexes on columns with low cardinality or those not frequently queried, as they may lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes on columns with high cardinality and frequent use in WHERE clauses or JOIN conditions are not removed or replaced with less optimal indexes.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that the index selection process considers the distribution and cardinality of columns, prioritizing high cardinality columns and frequently queried columns in the workload to prevent regression.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that indexes are not removed or altered for columns frequently used in WHERE clauses or JOIN conditions, especially for large tables, as this can lead to performance regressions.\"}"], [NaN, NaN, NaN, "{rule: \"Ensure that the index selection process considers the cardinality and distribution of the columns involved in the workload queries. Avoid creating indexes on columns with low cardinality or uniform distribution, as they may not provide significant performance benefits and could lead to regressions.\"}"]], "train_workload_random_30_8q": [["train_workload_random_30_8q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_return_amount)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves frequent joins or filters on those columns. Instead, prioritize single-column indexes that align with the query's filtering and joining conditions, as seen in the improvement index selection.\"}"], ["train_workload_random_30_8q", "[customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_year, d_month_seq), store_returns(sr_ticket_number, sr_item_sk), web_site(web_site_sk), customer_address(ca_address_sk), store(s_store_sk), store_sales(ss_ticket_number), web_sales(ws_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns involved in join conditions or filters. Prioritize single-column indexes on primary key or foreign key columns that are frequently used in joins or where clauses.\"}"], ["train_workload_random_30_8q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_return_amount)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses with high cardinality or are involved in ORDER BY operations to improve query performance.\"}"], ["train_workload_random_30_8q", "[customer(c_customer_sk), promotion(p_promo_sk), date_dim(d_date_sk, d_year, d_month_seq), store_returns(sr_ticket_number, sr_item_sk), web_site(web_site_sk), customer_address(ca_address_sk), store(s_store_sk), store_sales(ss_ticket_number), web_sales(ws_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes solely on individual columns without considering their usage in joins and filters. Prioritize composite indexes that align with query patterns, especially for columns frequently used together in joins and where clauses.\"}"], ["train_workload_random_30_8q", " [date_dim(d_date), promotion(p_promo_sk), store(s_store_sk)].", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these columns are likely to be optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses, especially those involved in filtering large datasets, and ensure that indexes are aligned with the workload's query patterns.\"}"], ["train_workload_random_30_8q", " [date_dim(d_date), promotion(p_promo_sk), store(s_store_sk)].", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these are likely to be covered by existing indexes or constraints. Instead, focus on indexing columns that are used in WHERE clauses, especially those with high cardinality, and consider composite indexes for columns that are often queried together.\"}"], ["train_workload_random_30_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{\"rule\": \"Ensure that all join and filter columns used in the workload queries are indexed. Specifically, check for missing indexes on columns involved in frequent joins or filters, such as 'customer_demographics.cd_demo_sk', 'date_dim.d_year', 'store_returns.sr_return_amt', and composite indexes like 'store_sales.ss_ticket_number, store_sales.ss_item_sk' and 'web_sales.ws_item_sk, web_sales.ws_order_number'.\"}"], ["train_workload_random_30_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all join and filter columns used in the workload queries are indexed. Specifically, check for missing indexes on columns used in join conditions and where clauses, such as 'customer_demographics.cd_demo_sk', 'date_dim.d_year', 'store_returns.sr_return_amt', 'web_sales.ws_sold_date_sk', and composite indexes like 'store_sales.ss_ticket_number, store_sales.ss_item_sk' and 'web_sales.ws_item_sk, web_sales.ws_order_number'.\"}"], ["train_workload_random_30_8q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_return_amount)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves multiple joins and filters on these columns. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, as seen in the improvement index selection.\"}"], ["train_workload_random_30_8q", " [date_dim(d_date), customer(c_customer_sk), item(i_item_sk), store(s_store_sk), promotion(p_promo_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), catalog_sales(cs_item_sk), household_demographics(hd_demo_sk), web_sales(ws_item_sk), customer_demographics(cd_demo_sk), web_sales(ws_sold_date_sk), store_sales(ss_sold_date_sk), web_site(web_site_sk)].", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes are created on columns frequently used in JOIN conditions and WHERE clauses across multiple queries, especially for large tables. Avoid redundant indexes on columns already covered by existing indexes or those not significantly contributing to query performance improvements.\"}"], ["train_workload_random_30_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all join and filter columns used in the workload queries are indexed. Specifically, maintain indexes on columns involved in frequent joins and filters, such as 'customer_demographics.cd_demo_sk', 'date_dim.d_year', 'store_returns.sr_return_amt', 'web_sales.ws_sold_date_sk', and composite indexes like 'store_sales.ss_ticket_number, store_sales.ss_item_sk' and 'web_sales.ws_item_sk, web_sales.ws_order_number'.\"}"], ["train_workload_random_30_8q", " [date_dim(d_date), promotion(p_promo_sk), store(s_store_sk)].", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a foreign key relationship or are frequently used in join conditions, as these columns are likely to be already optimized by the database engine. Instead, focus on indexing columns that are used in WHERE clauses, especially those involved in filtering large datasets, and ensure that indexes are aligned with the workload's most frequent query patterns.\"}"], ["train_workload_random_30_8q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_return_amount)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) on columns that are already indexed individually, especially when the workload involves frequent joins or filters on those columns. Instead, focus on indexing columns that are frequently used in WHERE clauses or JOIN conditions without existing indexes.\"}"], ["train_workload_random_30_8q", " [date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), promotion(p_promo_sk), store(s_store_sk), web_returns(wr_item_sk, wr_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of foreign key relationships or are frequently used in join conditions, as these are likely to be covered by existing indexes or constraints. Instead, focus on indexing columns that are used in WHERE clauses, especially those with high cardinality, and ensure that composite indexes are created for columns that are often queried together.\"}"], ["train_workload_random_30_8q", " [date_dim(d_date), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), catalog_returns(cr_return_amount)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes on columns that are already indexed individually, especially when the workload involves multiple joins and filters on those columns. Instead, focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, and ensure that the indexes align with the query patterns to prevent regression.\"}"], ["train_workload_random_30_8q", " [date_dim(d_date), promotion(p_promo_sk), store(s_store_sk)].", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition or are frequently used in join operations, as this can lead to redundant indexing and potential performance regressions. Instead, focus on indexing columns that are used in WHERE clauses or as part of filtering conditions to improve query performance.\"}"], ["train_workload_random_30_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_year), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_return_amt), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_sold_date_sk), I(C store_sales.ss_ticket_number,C store_sales.ss_item_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "{rule: \"Ensure composite indexes are maintained for frequently joined columns, especially when multiple columns are used in join conditions. For example, maintain composite indexes like I(C store_sales.ss_ticket_number, C store_sales.ss_item_sk) and I(C web_sales.ws_item_sk, C web_sales.ws_order_number) to optimize join operations and prevent regression.\"}"]], "train_workload_random_40_5q": [["train_workload_random_40_5q", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk), store(s_store_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes cover all join conditions and filtering criteria in the workload queries. Specifically, include indexes on columns used in join conditions across multiple tables and those frequently used in WHERE clauses for filtering, such as date columns and item identifiers. Avoid omitting indexes on columns that are critical for query performance, especially when they are part of complex joins or subqueries.\"}"], ["train_workload_random_40_5q", "[date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), store_returns(sr_ticket_number), catalog_returns(cr_item_sk), web_site(web_site_sk), web_site(web_site_id)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover all join keys and filter conditions used in the workload queries. Specifically, check for missing indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as date keys, item keys, and customer keys.\"}"], ["train_workload_random_40_5q", "[date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), store_returns(sr_ticket_number), catalog_returns(cr_item_sk), web_site(web_site_sk), web_site(web_site_id)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover all join keys and filter conditions used in the workload queries. Specifically, avoid removing indexes on columns frequently used in joins or filters across multiple queries, such as date keys and item keys.\"}"], ["train_workload_random_40_5q", "[date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), store_returns(sr_ticket_number), catalog_returns(cr_item_sk), web_site(web_site_sk), web_site(web_site_id)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover all join keys and filter conditions used in the workload queries. Specifically, include indexes on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, such as date keys, item keys, and customer keys. Avoid removing indexes that are used in multiple queries, even if they seem redundant, as they may optimize different parts of the workload.\"}"], ["train_workload_random_40_5q", "[date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), store_returns(sr_ticket_number), catalog_returns(cr_item_sk), web_site(web_site_sk), web_site(web_site_id)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover all join keys and filter conditions used in the workload queries. Specifically, include indexes on date keys and item keys across sales and returns tables, as well as customer and address keys for queries involving customer data. Avoid omitting indexes on frequently joined or filtered columns, such as date_sk and item_sk, which are critical for performance in multi-table joins and aggregations.\"}"], ["train_workload_random_40_5q", "[date_dim(d_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), date_dim(d_date), date_dim(d_year), item(i_item_id), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_site(web_site_sk), web_sales(ws_item_sk), date_dim(d_dow), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_id)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and ensure coverage for UNION operations.\"}"], ["train_workload_random_40_5q", " [web_returns(wr_item_sk), date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk), customer(c_customer_sk), store_returns(sr_ticket_number)].", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure that all tables involved in join operations have indexes on their respective join keys. If an index is removed from a join key, it may cause a regression. For example, ensure indexes on 'web_returns(wr_item_sk)', 'catalog_sales(cs_sold_date_sk)', and 'store(s_store_sk)' are maintained if they are used in join conditions.\"}"], ["train_workload_random_40_5q", "[date_dim(d_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), date_dim(d_date), date_dim(d_year), item(i_item_id), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_site(web_site_sk), web_sales(ws_item_sk), date_dim(d_dow), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_id)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and ensure coverage for all major query patterns to prevent regression.\"}"], ["train_workload_random_40_5q", "[date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), store_returns(sr_ticket_number), catalog_returns(cr_item_sk), web_site(web_site_sk), web_site(web_site_id)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure that all foreign key columns used in joins across multiple queries are indexed, especially those with high cardinality or frequently used in WHERE clauses. Additionally, maintain indexes on columns involved in GROUP BY and ORDER BY operations to prevent regression.\"}"], ["train_workload_random_40_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize indexing columns involved in frequent joins and filters across multiple queries, such as date keys and item keys, to prevent regression in query performance.\"}"], ["train_workload_random_40_5q", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk), store(s_store_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid indexes that only cover filter conditions without considering join conditions, especially for large tables.\"}"], ["train_workload_random_40_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions in queries. Avoid removing composite indexes that cover multiple columns used together in joins or filters, as this can lead to regressions. For example, composite indexes like I(C store_returns.sr_ticket_number, C store_returns.sr_returned_date_sk) should be retained if both columns are frequently used together in queries.\"}"], ["train_workload_random_40_5q", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk), store(s_store_sk)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes that are used in join conditions across large tables, especially when they are frequently queried together. Consider the workload's most common join patterns and ensure indexes support them.\"}"], ["train_workload_random_40_5q", " [customer(c_customer_sk), store_sales(ss_sold_date_sk), catalog_sales(cs_sold_date_sk)].", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Avoid selecting indexes on columns that are not frequently used in join or filter conditions across the workload. Prioritize indexing columns that are consistently used in WHERE clauses or JOIN conditions, especially those with high cardinality and those that appear in multiple queries.\"}"], ["train_workload_random_40_5q", "[date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), store_returns(sr_ticket_number), catalog_returns(cr_item_sk), web_site(web_site_sk), web_site(web_site_id)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Specifically, prioritize indexing columns involved in multiple queries and those used in WHERE clauses, JOIN conditions, and GROUP BY operations. Avoid removing indexes that are frequently used across different queries, especially if they are part of composite indexes that cover multiple columns.\"}"], ["train_workload_random_40_5q", "[date_dim(d_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), date_dim(d_date), date_dim(d_year), item(i_item_id), store_returns(sr_ticket_number), store_returns(sr_item_sk), web_site(web_site_sk), web_sales(ws_item_sk), date_dim(d_dow), customer(c_customer_sk), catalog_returns(cr_item_sk), store(s_store_id)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure that indexes cover both join and filter conditions, especially for large tables and frequently queried columns. Avoid removing indexes that are used in join conditions across multiple queries, such as date_dim(d_date_sk) and store_returns(sr_item_sk).\"}"], ["train_workload_random_40_5q", "[date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), store(s_store_sk), promotion(p_promo_sk), item(i_item_sk, i_item_id), store_returns(sr_ticket_number), catalog_returns(cr_item_sk), web_site(web_site_sk), web_site(web_site_id)]", "[web_sales(ws_sold_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize indexing columns involved in multiple queries and those used in join conditions across large tables. Avoid removing indexes that are used in multiple queries or are critical for join operations.\"}"]], "train_workload_random_47_3q": [["train_workload_random_47_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Specifically, include indexes on columns used in WHERE clauses and JOIN conditions, such as 'customer_address.ca_address_sk', 'store_returns.sr_ticket_number', and 'catalog_returns.cr_order_number', which are missing in the regression index selection.\"}"], ["train_workload_random_47_3q", " [item(i_item_sk, i_current_price), date_dim(d_date), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes cover both the join keys and the filter conditions. In the regression index, the absence of indexes on columns used in WHERE clauses (e.g., i_current_price, d_date) and join conditions (e.g., cs_sold_date_sk, ss_sold_date_sk) can lead to performance degradation. Always include indexes on columns that are frequently used in both joins and filters.\"}"], ["train_workload_random_47_3q", " [item(i_item_sk, i_current_price), date_dim(d_date), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{\"rule\": \"Ensure that indexes cover both the join keys and the filtering conditions. In the regression index, the absence of indexes on 'i_current_price' and 'd_date' can lead to performance degradation as these columns are used in filtering conditions. Additionally, ensure that indexes on date columns are present when date range queries are frequent, as seen with 'd_date' in the improvement index.\"}"], ["train_workload_random_47_3q", " [item(i_item_sk, i_current_price), date_dim(d_date), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover both filtering and join conditions. Avoid removing indexes that support high cardinality columns used in WHERE clauses, especially when they are involved in multiple queries.\"}"], ["train_workload_random_47_3q", "[date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), item(i_item_id), web_returns(wr_order_number), store(s_store_sk), store_returns(sr_ticket_number), web_site(web_site_sk), web_returns(wr_item_sk), date_dim(d_year), store_returns(sr_item_sk), web_sales(ws_item_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on date columns used in date range filters and ensure indexes on columns involved in join conditions across tables.\"}"], ["train_workload_random_47_3q", " [item(i_item_sk, i_current_price), date_dim(d_date), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include columns used in WHERE clauses and JOIN conditions, such as date columns and price columns, to prevent regressions.\"}"], ["train_workload_random_47_3q", "[date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across the workload. Focus on indexing columns that are consistently used in filtering and joining operations, such as date_dim(d_date_sk) and item(i_item_sk), which appear in multiple queries. Additionally, ensure that indexes are not created on columns with high cardinality and low selectivity, as they may not provide significant performance benefits.\"}"], ["train_workload_random_47_3q", "[date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes on date columns used in WHERE clauses are maintained, especially for tables with large row counts and frequent date-based filtering, such as date_dim(d_date_sk).\"}"], ["train_workload_random_47_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_sk,C item.i_current_price)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Prioritize indexes that cover multiple columns involved in frequent joins and filters to prevent regressions.\"}"], ["train_workload_random_47_3q", "[date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across the workload. Prioritize indexing columns that are consistently used in filtering and joining operations, such as date_dim(d_date_sk) and item(i_item_sk), which appear in multiple queries. Remove or reconsider indexes on columns like catalog_sales(cs_sold_date_sk) and web_returns(wr_order_number, wr_item_sk) if they do not significantly contribute to query performance improvements.\"}"], ["train_workload_random_47_3q", "[date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes on date columns used in WHERE clauses for filtering large datasets are maintained, especially when they are used in conjunction with other indexed columns in JOIN operations. This helps in optimizing query performance by reducing the scan time for date-based filters.\"}"], ["train_workload_random_47_3q", " [item(i_item_sk, i_current_price), date_dim(d_date), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{\"rule\": \"Ensure that indexes cover both the join keys and the filtering conditions. In the regression index, the absence of indexes on 'date_dim(d_date)' and 'store_returns(sr_ticket_number, sr_item_sk)' can lead to performance degradation as these columns are frequently used in joins and filters. Additionally, ensure that indexes on 'catalog_sales(cs_sold_date_sk)' and 'store(s_store_sk)' are complemented with indexes on 'date_dim(d_date)' to optimize date range queries.\"}"], ["train_workload_random_47_3q", "[date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns that are part of a join condition with large tables unless they are frequently filtered or aggregated. Prioritize indexing columns that are used in WHERE clauses or GROUP BY clauses, especially if they are part of smaller tables or have high cardinality.\"}"], ["train_workload_random_47_3q", "[date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Avoid creating indexes on columns that are part of a join condition but not frequently filtered or aggregated in the workload. Prioritize indexing columns that are used in WHERE clauses and GROUP BY operations, especially if they are frequently queried across multiple queries.\"}"], ["train_workload_random_47_3q", " [item(i_item_sk, i_current_price), date_dim(d_date), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Specifically, include indexes on date columns used in filtering (e.g., date_dim(d_date)), and ensure indexes cover both join keys and filter conditions (e.g., item(i_item_sk, i_current_price) instead of just item(i_item_sk)).\"}"], ["train_workload_random_47_3q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are composite indexes if they are frequently used together in queries, especially when the workload involves complex joins and filtering on multiple columns. This can prevent regressions by maintaining query performance when multiple columns are involved in join conditions.\"}"], ["train_workload_random_47_3q", " [item(i_item_sk, i_current_price), date_dim(d_date), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number, sr_item_sk)]", "[item(i_item_sk), catalog_sales(cs_sold_date_sk), web_returns(wr_order_number, wr_item_sk), store(s_store_sk), promotion(p_promo_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload. Specifically, include columns used in WHERE clauses and JOIN conditions across all tables involved in the queries. Avoid omitting columns that are frequently used together in joins or filters, as seen in the regression index where 'date_dim(d_date)' was omitted, which is crucial for date-based filtering in the workload.\"}"]], "train_workload_random_57_8q": [["train_workload_random_57_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_net_profit)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in WHERE clauses. Avoid single-column indexes when multi-column indexes can better serve the query patterns.\"}"], ["train_workload_random_57_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_net_profit)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Avoid single-column indexes when multi-column indexes can better serve the query patterns.\"}"], ["train_workload_random_57_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_net_profit)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid single-column indexes when queries involve multiple columns in conditions, as composite indexes can better optimize query performance.\"}"], ["train_workload_random_57_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in range queries, such as date columns. Instead, prioritize indexing columns that are used in join conditions and have high cardinality, such as primary keys or foreign keys.\"}"], ["train_workload_random_57_8q", " [date_dim(d_date, d_date_sk), catalog_returns(cr_item_sk), store_returns(sr_ticket_number), web_returns(wr_order_number, wr_item_sk)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Ensure that indexes on join keys and frequently filtered columns are prioritized. Avoid redundant indexes on the same table that do not cover the join or filter conditions effectively. For example, if a query frequently joins on 'cr_item_sk' and filters on 'd_date', ensure these columns are indexed together rather than separately or redundantly.\"}"], ["train_workload_random_57_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_net_profit)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid creating indexes that only cover filter conditions without considering join conditions, especially for large tables. Prioritize composite indexes that include both join keys and frequently filtered columns.\"}"], ["train_workload_random_57_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_net_profit)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes on columns involved in multi-column conditions.\"}"], ["train_workload_random_57_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_net_profit)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Ensure that composite indexes are used for columns frequently queried together, especially in join and filter conditions. Avoid using single-column indexes when multiple columns are often used together in queries, as this can lead to regressions in query performance.\"}"], ["train_workload_random_57_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_net_profit)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Ensure that indexes on join keys and frequently filtered columns are maintained. Avoid removing composite indexes that cover multiple columns used together in queries, especially those involving joins and group by operations.\"}"], ["train_workload_random_57_8q", "[date_dim(d_date_sk), item(i_manager_id), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially if they are part of large tables or have high cardinality.\"}"], ["train_workload_random_57_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_net_profit)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in WHERE clauses or JOIN conditions. Avoid single-column indexes when multi-column indexes can better serve the query patterns.\"}"], ["train_workload_random_57_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_order_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk,C store_sales.ss_net_profit)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Ensure composite indexes include all columns used in join conditions and filters, especially for large tables. Avoid single-column indexes on columns frequently used in conjunction with others in join conditions or filters.\"}"], ["train_workload_random_57_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries. Instead, prioritize indexing columns that are used in WHERE clauses, have high cardinality, or are involved in frequent join operations.\"}"], ["train_workload_random_57_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple tables. Instead, prioritize indexing columns that are used in WHERE clauses, have high cardinality, or are frequently involved in join conditions with large tables.\"}"], ["train_workload_random_57_8q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables, and avoid replacing them with indexes on non-join columns or columns with low cardinality.\"}"], ["train_workload_random_57_8q", "[date_dim(d_date_sk), item(i_manager_id), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially if they are part of large tables.\"}"], ["train_workload_random_57_8q", "[date_dim(d_date_sk), item(i_manager_id), customer_demographics(cd_marital_status, cd_education_status), item(i_item_id)]", "[date_dim(d_date_sk), catalog_sales(cs_item_sk), customer_demographics(cd_education_status, cd_marital_status), date_dim(d_date)]", "{rule: \"Avoid creating indexes on columns that are not used in join conditions or where clauses in the workload queries, as they may not contribute to query performance improvement. Instead, focus on indexing columns that are frequently used in join conditions, where clauses, or group by clauses.\"}"]], "train_workload_random_65_3q": [["train_workload_random_65_3q", "[catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), date_dim(d_date), item(i_item_sk, i_item_id), promotion(p_promo_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), web_site(web_site_sk), web_site(web_site_id), store(s_store_id)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization, especially for columns involved in joins and filters. Prioritize single-column indexes on frequently joined or filtered columns across multiple queries.\"}"], ["train_workload_random_65_3q", "[customer_address(ca_state), item(i_item_sk), date_dim(d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), web_returns(wr_order_number), web_returns(wr_item_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_id), date_dim(d_year), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Focus on indexing columns that are frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality or involved in range queries.\"}"], ["train_workload_random_65_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on date columns used in WHERE clauses, especially for large tables, to prevent regressions. Include composite indexes for columns frequently used together in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_65_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure composite indexes are maintained for columns frequently used together in join conditions and filters, especially for date-related columns and item identifiers. Avoid removing composite indexes that optimize multi-column access patterns.\"}"], ["train_workload_random_65_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on date columns used in WHERE clauses, especially for large tables, to prevent regressions in query performance. Add composite indexes for columns frequently used together in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_65_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses for filtering by date range are indexed, especially if they are used in multiple queries. Additionally, maintain composite indexes on columns frequently used together in JOIN conditions, such as (item_sk, order_number) for sales and returns tables.\"}"], ["train_workload_random_65_3q", " [date_dim(d_date), customer(c_customer_sk), web_returns(wr_order_number, wr_item_sk), item(i_current_price), store_returns(sr_ticket_number, sr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns already covered by existing single-column indexes, especially when the single-column indexes are on frequently filtered or joined columns in the workload.\"}"], ["train_workload_random_65_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that multi-column indexes are preserved when they cover multiple columns frequently used together in queries, especially when they involve date or time dimensions, as these are often critical for performance in time-based filtering and aggregation.\"}"], ["train_workload_random_65_3q", "[catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), date_dim(d_date), item(i_item_sk, i_item_id), promotion(p_promo_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), web_site(web_site_sk), web_site(web_site_id), store(s_store_id)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes with redundant prefixes 'I(C ' and ensure indexes cover all necessary columns for join and filter conditions across the workload.\"}"], ["train_workload_random_65_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all date-related columns used in WHERE clauses for filtering by date range are indexed, especially if they are used in multiple queries. Additionally, maintain composite indexes on columns frequently used together in JOIN conditions or WHERE clauses, such as (d_date_sk, d_date, d_year) and (i_item_id, i_item_sk).\"}"], ["train_workload_random_65_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on date columns used in WHERE clauses, especially for large tables, to prevent regressions in query performance. Add composite indexes for columns frequently used together in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_65_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure indexes on date columns used in WHERE clauses, especially for large tables, to prevent regressions in query performance. Add composite indexes for columns frequently used together in WHERE clauses or JOIN conditions.\"}"], ["train_workload_random_65_3q", " [date_dim(d_date), customer(c_customer_sk), web_returns(wr_order_number, wr_item_sk), item(i_current_price), store_returns(sr_ticket_number, sr_item_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating composite indexes that include columns already covered by existing single-column indexes, especially when the single-column indexes are on frequently filtered or joined columns in the workload.\"}"], ["train_workload_random_65_3q", "[customer_address(ca_state), item(i_item_sk), date_dim(d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), web_returns(wr_order_number), web_returns(wr_item_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_id), date_dim(d_year), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid using composite indexes (I(C ...)) when single-column indexes are sufficient for query optimization. Prioritize single-column indexes on frequently joined or filtered columns, especially those involved in WHERE clauses and JOIN conditions.\"}"], ["train_workload_random_65_3q", "[catalog_sales(cs_sold_date_sk), customer(c_customer_sk), customer_address(ca_address_sk), date_dim(d_date), item(i_item_sk, i_item_id), promotion(p_promo_sk), catalog_returns(cr_order_number, cr_item_sk), web_returns(wr_order_number, wr_item_sk), store_returns(sr_ticket_number), store(s_store_sk), web_site(web_site_sk), web_site(web_site_id), store(s_store_id)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Avoid creating indexes with redundant columns or on columns that are already indexed in a more comprehensive index. Ensure indexes cover all necessary columns for join conditions and filters used in the workload queries.\"}"], ["train_workload_random_65_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date_sk), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C item.i_item_id,C item.i_item_sk), I(C date_dim.d_date_sk,C date_dim.d_date,C date_dim.d_year)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that multi-column indexes are preserved when they cover multiple columns frequently used together in WHERE clauses or JOIN conditions, especially for columns with high cardinality or frequently queried date ranges. Additionally, maintain indexes on columns involved in JOIN operations across large tables to optimize query performance.\"}"], ["train_workload_random_65_3q", "[customer_address(ca_state), item(i_item_sk), date_dim(d_date_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), web_returns(wr_order_number), web_returns(wr_item_sk), date_dim(d_date), customer_address(ca_address_sk), item(i_item_id), date_dim(d_year), promotion(p_promo_sk)]", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C web_returns.wr_order_number)]", "{rule: \"Ensure that all necessary columns used in join conditions and where clauses are indexed. Avoid redundant indexes on columns that are already covered by existing indexes. Prioritize indexing columns that are frequently used in filtering and joining operations across multiple queries.\"}"]], "train_workload_random_68_9q": [["train_workload_random_68_9q", " [Date_dim(d_date), Web_returns(wr_item_sk, wr_order_number), Customer_address(ca_gmt_offset, ca_state)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in join conditions or where clauses across multiple queries in the workload. Instead, focus on indexing columns that are consistently used in join conditions or filters, such as date columns in date_dim, item_sk in sales and returns tables, and state or offset in customer_address for regional queries.\"}"], ["train_workload_random_68_9q", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk, i_item_id), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), store_returns(sr_ticket_number), store(s_store_sk, s_store_id), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as primary keys or unique identifiers, unless they are frequently used in join conditions or where clauses. Instead, focus on columns that are frequently filtered or joined on, especially those with moderate cardinality and high selectivity.\"}"], ["train_workload_random_68_9q", "[date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_address(ca_state, ca_gmt_offset, ca_address_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), item(i_item_id), warehouse(w_state), store(s_store_sk, s_store_id), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{rule: \"Avoid regression by ensuring indexes cover join and filter conditions across large tables, especially for columns frequently used in WHERE clauses and JOIN operations. Prioritize indexes on columns involved in multiple queries and those with high cardinality.\"}"], ["train_workload_random_68_9q", "[date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_address(ca_state, ca_gmt_offset, ca_address_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), item(i_item_id), warehouse(w_state), store(s_store_sk, s_store_id), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{rule: \"Ensure indexes cover join and filter conditions across all tables involved in the workload queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, such as date keys and foreign keys, to prevent regressions.\"}"], ["train_workload_random_68_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{rule: \"Ensure that all foreign key columns used in joins and filters are indexed, especially those with high cardinality or frequently used in the workload. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve performance by reducing the need for additional lookups.\"}"], ["train_workload_random_68_9q", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk, i_item_id), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), store_returns(sr_ticket_number), store(s_store_sk, s_store_id), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are present in the regression index selection. Specifically, include indexes on columns like 'cs_item_sk', 'wr_item_sk', and 'c_customer_sk' that are frequently used in joins and filters in the workload queries.\"}"], ["train_workload_random_68_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid single-column indexes when queries involve multiple columns in conditions, as composite indexes can significantly improve query performance by reducing the need for multiple lookups.\"}"], ["train_workload_random_68_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{\"rule\": \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes for columns frequently used together in joins and filters, such as date keys and item keys, to prevent regressions.\"}"], ["train_workload_random_68_9q", "[date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_address(ca_state, ca_gmt_offset, ca_address_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), item(i_item_id), warehouse(w_state), store(s_store_sk, s_store_id), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in join conditions, such as 'wr_order_number' in 'web_returns', which is used in joins with 'web_sales'. Additionally, maintain indexes on columns used in WHERE clauses with high cardinality, like 'cs_sold_date_sk' in 'catalog_sales', to prevent regression in query performance.\"}"], ["train_workload_random_68_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize indexing columns involved in join conditions and those frequently used in WHERE clauses. Avoid removing indexes that support high cardinality columns or are used in multiple queries.\"}"], ["train_workload_random_68_9q", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk, i_item_id), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), store_returns(sr_ticket_number), store(s_store_sk, s_store_id), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as primary keys or unique identifiers, unless they are frequently used in join conditions or where clauses. Instead, focus on columns that are frequently filtered or joined on, especially those with moderate cardinality and high selectivity.\"}"], ["train_workload_random_68_9q", " [Date_dim(d_date), Web_returns(wr_item_sk, wr_order_number), Customer_address(ca_gmt_offset, ca_state)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition or are frequently used in WHERE clauses with high cardinality, as they may not provide significant performance benefits and could lead to regression. Instead, focus on indexing columns that are used in filtering conditions with low cardinality or are part of GROUP BY and ORDER BY clauses.\"}"], ["train_workload_random_68_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{rule: \"Ensure that all necessary columns used in join conditions and where clauses are indexed, especially those with high cardinality or frequently used in the workload. Avoid removing composite indexes that cover multiple columns used together in queries.\"}"], ["train_workload_random_68_9q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_demographics.cd_demo_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_state), I(C web_returns.wr_order_number), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C store_returns.sr_ticket_number,C store_returns.sr_returned_date_sk,C store_returns.sr_item_sk)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{\"rule\": \"Ensure that all necessary columns used in join conditions and where clauses are indexed, especially those with high cardinality or frequently used in the workload. Avoid removing composite indexes that cover multiple columns used together in queries, as they can significantly improve query performance by reducing the need for full table scans.\"}"], ["train_workload_random_68_9q", "[date_dim(d_date_sk, d_date, d_year), item(i_item_sk, i_item_id), promotion(p_promo_sk), catalog_page(cp_catalog_page_sk), store_returns(sr_ticket_number), store(s_store_sk, s_store_id), web_sales(ws_item_sk), web_site(web_site_sk), customer_demographics(cd_demo_sk)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{\"rule\": \"Avoid creating indexes on columns that are not frequently used in join conditions or where clauses across multiple queries in the workload. Instead, focus on indexing columns that are consistently used in joins and filters, such as date keys, item keys, and promotion keys, which are present in the improvement index but missing in the regression index.\"}"], ["train_workload_random_68_9q", "[date_dim(d_date_sk, d_year), web_returns(wr_item_sk), customer_address(ca_state, ca_gmt_offset, ca_address_sk), customer_demographics(cd_demo_sk), customer(c_customer_sk), item(i_item_id), warehouse(w_state), store(s_store_sk, s_store_id), catalog_returns(cr_item_sk), web_site(web_site_sk)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in join conditions, such as 'wr_order_number' in 'web_returns', and ensure indexes on columns used in WHERE clauses, like 'cs_sold_date_sk' in 'catalog_sales', are maintained.\"}"], ["train_workload_random_68_9q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C warehouse.w_state), I(C web_returns.wr_order_number)]", "[catalog_sales(cs_sold_date_sk), web_returns(wr_order_number), customer(c_customer_sk)]", "{\"rule\": \"Ensure that all join and filter columns in the workload queries are indexed. Specifically, check for missing indexes on columns frequently used in joins or filters, such as 'store_returns.sr_ticket_number', 'catalog_returns.cr_order_number', and 'customer_address.ca_address_sk', which are present in the improvement index but missing in the regression index.\"}"]], "train_workload_random_77_7q": [["train_workload_random_77_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Ensure that indexes on columns used in join conditions and where clauses are composite and cover all relevant columns to avoid regression. Prioritize composite indexes on columns frequently used together in join conditions and filters, especially for large tables.\"}"], ["train_workload_random_77_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Focus on indexing columns that are used in filtering conditions and are not already covered by existing indexes.\"}"], ["train_workload_random_77_7q", " [date_dim(d_date_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_order_number), item(i_item_id), customer_address(ca_address_sk)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in join conditions or filters in the workload. Prioritize indexing columns that are involved in join conditions and filters, especially those with high cardinality and those that appear in multiple queries. Remove indexes on columns that are primarily used for ordering or grouping unless they are also used in joins or filters.\"}"], ["train_workload_random_77_7q", "[store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Ensure indexes on foreign key columns used in joins and filters, prioritize indexes on columns with high cardinality and frequent usage in WHERE clauses, and avoid redundant indexes on columns with low cardinality or infrequent usage.\"}"], ["train_workload_random_77_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included, especially for large tables. Avoid redundant indexes on columns that are already covered by composite indexes.\"}"], ["train_workload_random_77_7q", "[store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are prioritized, especially for large tables, and avoid redundant indexes on columns with low selectivity or that are not frequently used in join or filter conditions.\"}"], ["train_workload_random_77_7q", " [date_dim(d_date_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_order_number), item(i_item_id), customer_address(ca_address_sk)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions in the workload. Prioritize indexing columns that are involved in filtering or joining operations, especially those with high cardinality or those that are part of large tables.\"}"], ["train_workload_random_77_7q", "[customer_address(ca_address_sk), date_dim(d_date_sk, d_year), web_site(web_site_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_id, s_store_sk), web_site(web_site_id), promotion(p_promo_sk), customer_address(ca_state)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality or those that are part of large tables.\"}"], ["train_workload_random_77_7q", "[customer_address(ca_address_sk), date_dim(d_date_sk, d_year), web_site(web_site_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_id, s_store_sk), web_site(web_site_id), promotion(p_promo_sk), customer_address(ca_state)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are frequently used in join conditions across multiple tables, especially when the column is already indexed in another table. Prioritize indexing columns that are used in WHERE clauses with filtering conditions, and ensure that indexes on columns used in GROUP BY or ORDER BY clauses are optimized for the workload.\"}"], ["train_workload_random_77_7q", "[customer_address(ca_address_sk), date_dim(d_date_sk, d_year), web_site(web_site_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_id, s_store_sk), web_site(web_site_id), promotion(p_promo_sk), customer_address(ca_state)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not used in join conditions or filter predicates in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_77_7q", " [date_dim(d_date_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_order_number), item(i_item_id), customer_address(ca_address_sk)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in join conditions or filters in the workload. Focus on columns that are repeatedly used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_77_7q", "[customer_address(ca_address_sk), date_dim(d_date_sk, d_year), web_site(web_site_sk), item(i_item_sk), web_returns(wr_item_sk), store(s_store_id, s_store_sk), web_site(web_site_id), promotion(p_promo_sk), customer_address(ca_state)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality or those that are part of large tables.\"}"], ["train_workload_random_77_7q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Avoid indexing columns that are frequently used in join conditions across multiple queries, especially if they are already indexed in the improvement selection. Focus on indexing columns that are used in filtering conditions and are not already covered by existing indexes.\"}"], ["train_workload_random_77_7q", " [date_dim(d_date_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_order_number), item(i_item_id), customer_address(ca_address_sk)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in join conditions or filters in the workload. Prioritize indexing columns that are involved in frequent joins or where conditions, especially those with high cardinality or those that are part of foreign key relationships.\"}"], ["train_workload_random_77_7q", " [date_dim(d_date_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_order_number), item(i_item_id), customer_address(ca_address_sk)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Focus on columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_77_7q", "[store_sales(ss_sold_date_sk, ss_item_sk), date_dim(d_date_sk), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), catalog_sales(cs_sold_date_sk), web_sales(ws_sold_date_sk)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Prioritize indexing columns that are frequently used in join conditions and filters across multiple queries, especially those involving large tables. Avoid indexing columns that are primarily used in aggregation or sorting unless they are also heavily involved in joins or filters.\"}"], ["train_workload_random_77_7q", " [date_dim(d_date_sk), store_returns(sr_item_sk, sr_ticket_number), web_returns(wr_order_number), item(i_item_id), customer_address(ca_address_sk)]", "[date_dim(d_date_sk), web_sales(ws_ship_date_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk), customer_address(ca_address_sk), promotion(p_promo_sk), item(i_item_id), store_returns(sr_returned_date_sk), catalog_returns(cr_returned_date_sk), web_returns(wr_returned_date_sk), web_site(web_site_sk), store(s_store_name), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations to optimize query performance.\"}"]], "train_workload_random_88_5q": [["train_workload_random_88_5q", "[date_dim(d_date_sk, d_date, d_year, d_week_seq), item(i_item_sk, i_item_id), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk, s_store_id), web_site(web_site_sk), promotion(p_promo_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are not directly used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_88_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Ensure that indexes on columns involved in join conditions and frequently used in WHERE clauses are maintained. Avoid removing indexes that are used in multiple queries across different tables, especially those that are part of join conditions or filtering criteria. Prioritize indexing columns that are used in join conditions and WHERE clauses across multiple queries, such as date keys and item keys.\"}"], ["train_workload_random_88_5q", "[date_dim(d_date_sk, d_date, d_year, d_week_seq), item(i_item_sk, i_item_id), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk, s_store_id), web_site(web_site_sk), promotion(p_promo_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Avoid indexing columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses to optimize query performance.\"}"], ["train_workload_random_88_5q", " [Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_order_number), Web_returns(wr_order_number, wr_item_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition or are frequently used in WHERE clauses with equality conditions, as these are likely to be covered by existing indexes. Instead, focus on columns involved in range queries or those that are not part of existing indexes.\"}"], ["train_workload_random_88_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, prioritize single-column indexes for columns frequently used in join conditions and multi-column indexes for columns used together in filter conditions. Avoid unnecessary indexes on columns not involved in joins or filters.\"}"], ["train_workload_random_88_5q", "[date_dim(d_date_sk, d_date, d_year, d_week_seq), item(i_item_sk, i_item_id), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk, s_store_id), web_site(web_site_sk), promotion(p_promo_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in join conditions or filtering criteria in the workload queries. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Ensure that indexes are created on columns that improve query performance by reducing scan times and enhancing lookup efficiency.\"}"], ["train_workload_random_88_5q", "[date_dim(d_date_sk, d_date, d_year, d_week_seq), item(i_item_sk, i_item_id), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk, s_store_id), web_site(web_site_sk), promotion(p_promo_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Ensure that indexes cover both join and filter conditions. Avoid redundant indexes on columns that are already covered by other indexes. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially those with high cardinality.\"}"], ["train_workload_random_88_5q", "[date_dim(d_date_sk, d_date, d_year, d_week_seq), item(i_item_sk, i_item_id), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk, s_store_id), web_site(web_site_sk), promotion(p_promo_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in filtering or joining operations in the workload queries. Focus on columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations. Additionally, ensure that indexes are created on columns with high cardinality to improve query performance.\"}"], ["train_workload_random_88_5q", " [Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_order_number), Web_returns(wr_order_number, wr_item_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition or are frequently used in WHERE clauses across multiple queries, as this can lead to redundant indexing and potential performance regressions. Focus on indexing columns that are used in join conditions with high cardinality and are not already indexed in the improvement selection.\"}"], ["train_workload_random_88_5q", "[date_dim(d_date_sk, d_date, d_year, d_week_seq), item(i_item_sk, i_item_id), customer_address(ca_address_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), store(s_store_sk, s_store_id), web_site(web_site_sk), promotion(p_promo_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in join or filter conditions across multiple queries in the workload. Prioritize indexing columns that are consistently used in WHERE clauses, JOIN conditions, and GROUP BY clauses, especially those with high cardinality and those that are part of foreign key relationships.\"}"], ["train_workload_random_88_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Ensure that indexes on join keys and frequently filtered columns are maintained. Avoid removing indexes on columns that are used in join conditions or where clauses, especially those involving large tables or complex queries. Prioritize maintaining composite indexes on columns that are often queried together, such as date and identifier columns in transactional tables.\"}"], ["train_workload_random_88_5q", " [Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_order_number), Web_returns(wr_order_number, wr_item_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition or are frequently used in WHERE clauses with equality conditions, as these are likely to be covered by existing indexes. Instead, focus on columns involved in range queries or those that are not part of existing indexes.\"}"], ["train_workload_random_88_5q", " [Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_order_number), Web_returns(wr_order_number, wr_item_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are already part of a join condition or are frequently used in WHERE clauses across multiple queries, as this can lead to redundant indexing and potential performance regressions. Focus on indexing columns that are used in filtering conditions but not part of join conditions, especially when they are used in aggregation or sorting operations.\"}"], ["train_workload_random_88_5q", " [Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_order_number), Web_returns(wr_order_number, wr_item_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are already part of join conditions or are frequently used in WHERE clauses across multiple queries, as they may lead to redundant indexing and increased maintenance overhead without significant performance benefits.\"}"], ["train_workload_random_88_5q", " [Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_order_number), Web_returns(wr_order_number, wr_item_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are not used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in join conditions and where clauses to improve query performance.\"}"], ["train_workload_random_88_5q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_returns.cr_returned_date_sk), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_returned_date_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_returns.wr_returned_date_sk), I(C web_sales.ws_item_sk), I(C web_sales.ws_sold_date_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Ensure that all join keys and frequently filtered columns in the workload are indexed. Avoid removing indexes on columns that are used in join conditions or as filters in multiple queries, such as 'store_returns.sr_ticket_number', 'store_returns.sr_returned_date_sk', 'web_returns.wr_order_number', and 'web_returns.wr_returned_date_sk'. Additionally, maintain indexes on columns that are part of date range filters, like 'date_dim.d_date' and 'catalog_sales.cs_sold_date_sk', to prevent regression in query performance.\"}"], ["train_workload_random_88_5q", " [Store_returns(sr_ticket_number, sr_item_sk), Catalog_returns(cr_order_number), Web_returns(wr_order_number, wr_item_sk)]", "[Catalog_sales(cs_sold_date_sk), store_returns(sr_ticket_number, sr_returned_date_sk), web_returns(wr_order_number), web_returns(wr_item_sk), item(i_item_id), customer_address(ca_address_sk), catalog_returns(cr_returned_date_sk), date_dim(d_week_seq), web_returns(wr_returned_date_sk), promotion(p_promo_sk), store(s_store_sk), store(s_store_id)]", "{rule: \"Avoid creating indexes on columns that are not used in join conditions or filtering predicates in the workload queries. Focus on indexing columns that are frequently used in join conditions and where clauses, especially those that are part of large tables or have high cardinality.\"}"]], "train_workload_random_90_6q": [["train_workload_random_90_6q", "[customer(c_customer_sk), date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload. Focus on indexing columns that are consistently used for filtering or joining, such as foreign keys and date columns, to improve query performance.\"}"], ["train_workload_random_90_6q", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_return_amount), store_returns(sr_return_amt)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not directly involved in filtering or joining conditions in the workload queries. Prioritize indexes on columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY clauses. Ensure that indexes are created on columns with high cardinality and that are used in conjunction with other indexed columns to optimize query performance.\"}"], ["train_workload_random_90_6q", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_return_amount), store_returns(sr_return_amt)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included, especially for large tables. Avoid redundant indexes on columns that are already covered by composite indexes. Prioritize indexes on columns frequently used in WHERE clauses and GROUP BY operations.\"}"], ["train_workload_random_90_6q", "[customer(c_customer_sk), date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across the workload. Focus on indexing columns that are consistently used in filtering and joining operations, such as foreign keys and date columns, to prevent regression in query performance.\"}"], ["train_workload_random_90_6q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{rule: \"Prioritize indexing columns that are frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those involving large tables. Avoid redundant indexes on columns already covered by composite indexes unless they are used independently in other queries.\"}"], ["train_workload_random_90_6q", "[customer(c_customer_sk), date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in join conditions or filtering criteria across multiple queries in the workload. Focus on indexing columns that are consistently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially those involving large tables.\"}"], ["train_workload_random_90_6q", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_return_amount), store_returns(sr_return_amt)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included, especially for large tables. Avoid redundant indexes on columns that are already covered by composite indexes. Prioritize indexes on columns frequently used in WHERE clauses and GROUP BY operations.\"}"], ["train_workload_random_90_6q", "[customer(c_customer_sk), date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload. Focus on indexing columns that are consistently used for filtering or joining, such as date keys and foreign keys linking large tables.\"}"], ["train_workload_random_90_6q", "[I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are included, especially when they are frequently used in the workload. Avoid removing indexes on columns that are part of composite keys or are heavily used in filtering and joining operations, such as item_sk and order_number in sales and returns tables.\"}"], ["train_workload_random_90_6q", "[item(i_item_sk, i_item_id), store_sales(ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_ticket_number, ss_addr_sk, ss_customer_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number, sr_return_amt), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_order_number), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_order_number), web_returns(wr_item_sk, wr_order_number), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{\"rule\": \"Ensure that all join keys and frequently filtered columns in the workload are indexed. Specifically, include composite indexes for columns that are used together in joins and filters, such as (cs_sold_date_sk, cs_item_sk, cs_order_number) in catalog_sales, (ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_ticket_number) in store_sales, and (ws_sold_date_sk, ws_item_sk, ws_order_number) in web_sales. Avoid omitting important columns like ss_ticket_number and cs_order_number that are used in joins and filters.\"}"], ["train_workload_random_90_6q", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_return_amount), store_returns(sr_return_amt)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{\"rule\": \"Ensure that indexes on foreign key columns used in join conditions are included, especially for large tables. Avoid redundant indexes on columns that are already covered by composite indexes. Prioritize indexes on columns frequently used in WHERE clauses and GROUP BY operations.\"}"], ["train_workload_random_90_6q", "[customer(c_customer_sk), date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in join conditions or filtering criteria across multiple queries in the workload. Focus on indexing columns that are consistently used in WHERE clauses, JOIN conditions, and GROUP BY operations to optimize query performance. Additionally, ensure that indexes are not redundant or overlapping, which can lead to unnecessary overhead.\"}"], ["train_workload_random_90_6q", "[customer(c_customer_sk), date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in join conditions or filtering criteria across multiple queries. Focus on indexing columns that are consistently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially those involving large tables. Ensure indexes are aligned with the most common query patterns to prevent unnecessary overhead and potential regressions.\"}"], ["train_workload_random_90_6q", " [store(s_store_sk), promotion(p_promo_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), customer(c_customer_sk), catalog_returns(cr_return_amount), store_returns(sr_return_amt)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are included, especially for large tables. Avoid redundant indexes on columns that are already covered by composite indexes. Prioritize indexes on columns frequently used in WHERE clauses and GROUP BY operations.\"}"], ["train_workload_random_90_6q", "[customer(c_customer_sk), date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{rule: \"Avoid adding indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across the workload. Focus on indexing columns that are consistently used in filtering and joining operations, such as foreign keys and date columns that appear in multiple queries.\"}"], ["train_workload_random_90_6q", "[customer(c_customer_sk), date_dim(d_date_sk), customer_address(ca_address_sk), store(s_store_sk)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{rule: \"Avoid creating indexes on columns that are not frequently used in WHERE clauses or JOIN conditions across multiple queries in the workload. Focus on indexing columns that are consistently used for filtering or joining, such as foreign keys and date columns, to improve query performance.\"}"], ["train_workload_random_90_6q", "[item(i_item_sk, i_item_id), store_sales(ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_ticket_number, ss_addr_sk, ss_customer_sk, ss_promo_sk), store_returns(sr_item_sk, sr_ticket_number, sr_return_amt), catalog_sales(cs_sold_date_sk, cs_item_sk, cs_order_number), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_sold_date_sk, ws_item_sk, ws_order_number), web_returns(wr_item_sk, wr_order_number), date_dim(d_date_sk, d_date, d_year), customer_address(ca_address_sk, ca_gmt_offset), promotion(p_promo_sk), store(s_store_sk), web_site(web_site_sk), customer(c_customer_sk)]", "[customer(c_customer_sk), date_dim(d_date_sk), catalog_sales(cs_sold_date_sk, cs_item_sk), store(s_store_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), web_site(web_site_sk), web_site(web_site_id)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include composite indexes for columns frequently used together in joins and filters, such as (item_sk, order_number) for sales and returns tables, and (sold_date_sk, item_sk) for sales tables. Additionally, ensure indexes on columns used in WHERE clauses with specific values, such as (gmt_offset) in customer_address and (year, moy) in date_dim.\"}"]], "train_workload_random_63_6q": [["train_workload_random_63_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in conjunction with other columns in join conditions. Instead, focus on indexing columns that are frequently filtered or joined with high cardinality, and consider composite indexes for columns that are often queried together.\"}"], ["train_workload_random_63_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained. Avoid replacing them with indexes on less frequently queried columns or columns with low selectivity.\"}"], ["train_workload_random_63_6q", "[item(i_item_sk, i_item_id, i_manufact_id), date_dim(d_date_sk), promotion(p_promo_sk), customer_address(ca_state, ca_gmt_offset, ca_address_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_id), date_dim(d_week_seq)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{rule: \"Ensure indexes cover columns used in WHERE clauses and JOIN conditions, especially for large tables. Prioritize indexes on columns with high cardinality and those frequently used in filtering conditions. Avoid redundant indexes on columns already covered by existing indexes.\"}"], ["train_workload_random_63_6q", "[item(i_item_sk, i_item_id, i_manufact_id), date_dim(d_date_sk), promotion(p_promo_sk), customer_address(ca_state, ca_gmt_offset, ca_address_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_id), date_dim(d_week_seq)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{rule: \"Prioritize indexing on columns frequently used in WHERE clauses and JOIN conditions across multiple queries, especially those with high cardinality or involved in range queries. Avoid redundant indexes on columns already covered by composite indexes unless they serve distinct query patterns.\"}"], ["train_workload_random_63_6q", "[item(i_item_sk, i_item_id, i_manufact_id), date_dim(d_date_sk), promotion(p_promo_sk), customer_address(ca_state, ca_gmt_offset, ca_address_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_id), date_dim(d_week_seq)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and avoid redundant indexes on columns with low cardinality or those already covered by other indexes.\"}"], ["train_workload_random_63_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{rule: \"Ensure indexes cover join and filter conditions in queries, especially for large tables. Prioritize composite indexes on columns frequently used together in WHERE clauses and JOIN conditions. Avoid indexes on columns with low cardinality or those not involved in performance-critical operations.\"}"], ["train_workload_random_63_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{rule: \"Ensure indexes cover join and filter conditions in queries. Prioritize composite indexes on columns frequently used together in WHERE clauses, especially for large tables. Avoid indexes on columns with low cardinality or those not involved in join conditions.\"}"], ["train_workload_random_63_6q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk, i_manufact_id), catalog_returns(cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), web_site(web_site_sk), web_site(web_site_id), customer(c_customer_sk)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in range queries, as they may not provide significant performance benefits and can lead to regression. Instead, focus on indexing columns that are frequently used in join conditions and have high cardinality.\"}"], ["train_workload_random_63_6q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk, i_manufact_id), catalog_returns(cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), web_site(web_site_sk), web_site(web_site_id), customer(c_customer_sk)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{\"rule\": \"Ensure indexes cover join and filter columns used in the workload queries, especially for large tables. Avoid redundant indexes on columns with low cardinality or those already covered by existing indexes.\"}"], ["train_workload_random_63_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions with high cardinality columns, as this can lead to regression in query performance. Instead, focus on indexing high cardinality columns and those frequently used in WHERE clauses or as join keys with other high cardinality columns.\"}"], ["train_workload_random_63_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions with high cardinality columns, as this can lead to regression in query performance.\"}"], ["train_workload_random_63_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{rule: \"Ensure indexes cover join and filter conditions, especially for large tables. Avoid indexes on columns with low cardinality or those not involved in frequent joins or filters.\"}"], ["train_workload_random_63_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C date_dim.d_date_sk), I(C item.i_item_id), I(C item.i_item_sk), I(C store_returns.sr_ticket_number), I(C web_returns.wr_order_number), I(C web_sales.ws_order_number), I(C customer_demographics.cd_demo_sk,C customer_demographics.cd_marital_status), I(C store_sales.ss_sold_date_sk,C store_sales.ss_store_sk), I(C web_sales.ws_item_sk,C web_sales.ws_order_number,C web_sales.ws_ext_discount_amt)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{rule: \"Ensure that indexes on foreign key columns and frequently joined columns are maintained. Avoid replacing them with indexes on less frequently filtered columns or columns with low cardinality, such as boolean or categorical columns with few distinct values.\"}"], ["train_workload_random_63_6q", "[item(i_item_sk, i_item_id, i_manufact_id), date_dim(d_date_sk), promotion(p_promo_sk), customer_address(ca_state, ca_gmt_offset, ca_address_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_id), date_dim(d_week_seq)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions across multiple queries, as they may lead to regression in query performance. Instead, focus on indexing columns that are used in filtering conditions with high cardinality and are critical for query optimization.\"}"], ["train_workload_random_63_6q", "[date_dim(d_date), catalog_sales(cs_sold_date_sk), item(i_item_sk, i_manufact_id), catalog_returns(cr_order_number), web_returns(wr_item_sk, wr_order_number), promotion(p_promo_sk), store(s_store_sk), customer_address(ca_address_sk), web_site(web_site_sk), web_site(web_site_id), customer(c_customer_sk)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{rule: \"Avoid creating indexes on columns with low cardinality or high selectivity, such as boolean or flag columns, unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in JOINs, WHERE clauses, and have high cardinality.\"}"], ["train_workload_random_63_6q", "[item(i_item_sk, i_item_id, i_manufact_id), date_dim(d_date_sk), promotion(p_promo_sk), customer_address(ca_state, ca_gmt_offset, ca_address_sk), web_returns(wr_item_sk, wr_order_number), store(s_store_id), date_dim(d_week_seq)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{rule: \"Ensure that indexes cover both join and filter conditions, especially for large tables. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, and avoid redundant indexes that do not contribute to query performance improvement.\"}"], ["train_workload_random_63_6q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C date_dim.d_date), I(C item.i_item_sk), I(C web_sales.ws_item_sk)]", " [promotion(p_promo_sk), store(s_store_sk, s_gmt_offset), catalog_page(cp_catalog_page_sk), household_demographics(hd_buy_potential), web_site(web_site_sk), customer_address(ca_gmt_offset), date_dim(d_date_sk), item(i_item_id, i_category)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are frequently used in join conditions with high cardinality columns, as this can lead to regression in query performance. Instead, focus on indexing high cardinality columns that are frequently filtered or joined in the workload.\"}"]], "train_workload_random_10_3q": [["train_workload_random_10_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover join and filter conditions. Avoid missing indexes on columns frequently used in WHERE clauses or JOIN conditions, especially for large tables. Prioritize composite indexes that combine columns used together in queries.\"}"], ["train_workload_random_10_3q", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C warehouse.w_warehouse_name)]", " [date_dim(d_date), item(i_current_price)].", "{\"rule\": \"Ensure that indexes cover both join and filter conditions. Avoid removing indexes on columns frequently used in join conditions, such as 'item.i_item_sk' and 'date_dim.d_date', as this can lead to performance regressions.\"}"], ["train_workload_random_10_3q", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, such as character or character varying types, unless they are frequently used in WHERE clauses or JOIN conditions. Prioritize indexing integer or numeric columns that are used in JOINs or WHERE clauses with high selectivity.\"}"], ["train_workload_random_10_3q", " [date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_sold_date_sk)]", " [date_dim(d_date), item(i_current_price)].", "{rule: \"Ensure that indexes cover join keys and filter conditions in queries. Avoid replacing multi-column indexes that cover both join and filter conditions with single-column indexes that only cover filter conditions, as this can lead to performance regressions.\"}"], ["train_workload_random_10_3q", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or non-selective predicates, especially when they are not frequently used in join conditions or filters in the workload. Prioritize indexing columns that are involved in join conditions and have high cardinality or are frequently used in selective predicates.\"}"], ["train_workload_random_10_3q", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk)]", " [date_dim(d_date), item(i_current_price)].", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Avoid replacing indexes that cover multiple join conditions with those that cover only filter conditions, especially when the join conditions involve large tables.\"}"], ["train_workload_random_10_3q", " [date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Ensure that indexes on foreign key columns used in join conditions are maintained, especially for large tables, to prevent regression. Avoid replacing these with indexes on non-join columns unless they are critical for filtering or sorting.\"}"], ["train_workload_random_10_3q", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C warehouse.w_warehouse_name)]", " [date_dim(d_date), item(i_current_price)].", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize indexes on columns frequently used in WHERE clauses and JOIN conditions, especially for large tables. Avoid indexes that only cover columns used in ORDER BY or GROUP BY without filtering or joining.\"}"], ["train_workload_random_10_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover join conditions and filter conditions. Prioritize composite indexes for columns frequently used together in WHERE clauses, especially for large tables. Avoid single-column indexes on columns with low cardinality or those not directly involved in filtering or joining.\"}"], ["train_workload_random_10_3q", " [date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk)]", " [date_dim(d_date), item(i_current_price)].", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload. Avoid removing indexes on columns frequently used in joins or filters, such as foreign keys or date columns, as this can lead to performance regressions.\"}"], ["train_workload_random_10_3q", " [date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_sold_date_sk)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are involved in filtering, joining, or sorting operations, especially those with high cardinality or those that are part of composite keys in JOIN conditions.\"}"], ["train_workload_random_10_3q", " [date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_sold_date_sk)]", " [date_dim(d_date), item(i_current_price)].", "{rule: \"Avoid creating indexes solely on columns with high cardinality and low selectivity, such as item(i_current_price), unless they are frequently used in WHERE clauses or JOIN conditions. Instead, prioritize indexing columns that are part of JOIN conditions or WHERE clauses with high selectivity, as seen in the improvement index selection.\"}"], ["train_workload_random_10_3q", " [date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_sold_date_sk)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or non-selective predicates, especially when they are not frequently used in join conditions or filters in the workload. Prioritize indexing columns involved in join conditions and filters that significantly reduce the result set size.\"}"], ["train_workload_random_10_3q", " [date_dim(d_date), item(i_item_sk), promotion(p_promo_sk), store(s_store_sk), catalog_page(cp_catalog_page_sk), web_site(web_site_sk)]", " [date_dim(d_date), item(i_current_price)].", "{rule: \"Avoid creating indexes on columns with high cardinality and frequent range queries, such as 'i_current_price', unless they are frequently used in equality conditions. Instead, prioritize indexes on columns that are used in join conditions and have lower cardinality, like 'i_item_sk' and 'p_promo_sk'.\"}"], ["train_workload_random_10_3q", "[store(s_store_sk), web_site(web_site_sk)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in filtering conditions and have high cardinality to improve query performance.\"}"], ["train_workload_random_10_3q", "[store(s_store_sk), web_site(web_site_sk)]", " [date_dim(d_date), item(i_current_price)].", "{rule: \"Avoid indexing columns with high cardinality and frequent range queries, such as date columns and price columns, as they may lead to performance regressions. Instead, prioritize indexing columns that are frequently used in join conditions and have lower cardinality.\"}"], ["train_workload_random_10_3q", "[customer_address(ca_address_sk), date_dim(d_date), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_sold_date_sk), web_site(web_site_id), store(s_store_sk), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in JOINs, WHERE clauses, and have high cardinality to improve query performance.\"}"], ["train_workload_random_10_3q", "[customer_address(ca_address_sk), date_dim(d_date), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_sold_date_sk), web_site(web_site_id), store(s_store_sk), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", " [date_dim(d_date), item(i_current_price)].", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns used in join conditions and frequently filtered columns, such as 'customer_address(ca_address_sk)', 'web_returns(wr_item_sk, wr_order_number)', 'web_sales(ws_sold_date_sk)', 'web_site(web_site_id)', 'store(s_store_sk)', 'catalog_returns(cr_item_sk)', and 'promotion(p_promo_sk)'. Avoid removing indexes that are critical for join operations and filtering, even if they seem less frequently used, as they can significantly impact query performance.\"}"], ["train_workload_random_10_3q", "[I(C customer.c_current_addr_sk), I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C customer_address.ca_zip), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C store_returns.sr_ticket_number), I(C store_sales.ss_sold_date_sk), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C web_sales.ws_bill_customer_sk), I(C web_sales.ws_sold_date_sk), I(C date_dim.d_date,C date_dim.d_date_sk), I(C date_dim.d_date_sk,C date_dim.d_date), I(C item.i_item_sk,C item.i_current_price)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Ensure that composite indexes in the regression selection cover all join and filter conditions present in the workload queries, similar to the improvement selection. Specifically, include indexes on combinations of columns that are frequently used together in joins and filters, such as (date_dim.d_date_sk, date_dim.d_date) and (item.i_item_sk, item.i_current_price).\"}"], ["train_workload_random_10_3q", "[date_dim(d_date), promotion(p_promo_sk), catalog_returns(cr_item_sk), web_returns(wr_item_sk), item(i_item_sk), customer(c_customer_sk), store(s_store_id)]", " [date_dim(d_date), item(i_current_price)].", "{rule: \"Avoid creating indexes on columns with high cardinality and low selectivity, especially if they are not frequently used in WHERE clauses or JOIN conditions. Instead, prioritize indexing columns that are frequently used in filtering conditions and have lower cardinality, as they are more likely to improve query performance.\"}"], ["train_workload_random_10_3q", " [date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), web_sales(ws_sold_date_sk), store_returns(sr_item_sk), catalog_returns(cr_item_sk), catalog_sales(cs_sold_date_sk), promotion(p_promo_sk)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are used in filtering conditions and have high cardinality, especially in large tables. Ensure indexes align with the workload's query patterns, focusing on columns involved in JOINs and WHERE clauses.\"}"], ["train_workload_random_10_3q", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C warehouse.w_warehouse_name)]", " [date_dim(d_date), item(i_current_price)].", "{rule: \"Ensure indexes cover all join conditions and filter predicates. Avoid indexes that only cover filter predicates without considering join conditions, especially when multiple tables are involved in the query.\"}"], ["train_workload_random_10_3q", " [date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_sold_date_sk)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or columns that are not used in join conditions or filters in the workload. Prioritize indexing columns that are frequently used in WHERE clauses, JOIN conditions, and GROUP BY operations, especially those with high cardinality.\"}"], ["train_workload_random_10_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date), item(i_current_price)].", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple tables are involved in the query. Avoid using single-column indexes when composite indexes can better optimize the query performance.\"}"], ["train_workload_random_10_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover join conditions and filter predicates. Prioritize composite indexes on columns frequently used together in WHERE clauses, especially for large tables. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_10_3q", " [date_dim(d_date), customer_address(ca_address_sk), customer(c_customer_sk), store_returns(sr_item_sk, sr_ticket_number), catalog_returns(cr_item_sk, cr_order_number), web_sales(ws_sold_date_sk)]", " [date_dim(d_date), item(i_current_price)].", "{rule: \"Ensure that indexes cover join keys and filter conditions in the workload. Avoid removing indexes on columns frequently used in joins or where clauses, especially for large tables.\"}"], ["train_workload_random_10_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover join and filter conditions, especially for large tables. Prioritize composite indexes for columns frequently used together in WHERE clauses and JOIN conditions. Avoid redundant indexes on columns already covered by composite indexes.\"}"], ["train_workload_random_10_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date), item(i_current_price)].", "{rule: \"Ensure that composite indexes are used for columns frequently queried together, especially when they involve filtering and joining operations. Avoid replacing composite indexes with single-column indexes if the workload involves complex queries with multiple conditions on those columns.\"}"], ["train_workload_random_10_3q", "[date_dim(d_date), warehouse(w_warehouse_name), item(i_item_sk), store_returns(sr_ticket_number), promotion(p_promo_sk), item(i_current_price), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), store(s_store_sk), web_sales(ws_sold_date_sk)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Ensure indexes cover all join and filter conditions in the workload queries. Specifically, include indexes on columns involved in join conditions across multiple tables and those used in WHERE clauses for filtering, especially for large tables.\"}"], ["train_workload_random_10_3q", "[I(C customer.c_customer_sk), I(C customer_address.ca_address_sk), I(C catalog_returns.cr_order_number), I(C catalog_sales.cs_sold_date_sk), I(C date_dim.d_date), I(C store_returns.sr_ticket_number), I(C warehouse.w_warehouse_name), I(C web_returns.wr_order_number), I(C item.i_item_sk,C item.i_current_price)]", " [date_dim(d_date), item(i_current_price)].", "{rule: \"Ensure composite indexes are used for columns frequently involved in join conditions and filters, especially when multiple columns are used together in queries. Avoid using single-column indexes when composite indexes can provide better performance for complex queries.\"}"], ["train_workload_random_10_3q", "[customer_address(ca_address_sk), date_dim(d_date), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_sold_date_sk), web_site(web_site_id), store(s_store_sk), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Avoid creating indexes on columns with low cardinality or non-selective columns, especially when they are not frequently used in WHERE clauses or JOIN conditions. Prioritize indexing columns that are frequently used in JOINs and WHERE clauses with high cardinality and selective conditions.\"}"], ["train_workload_random_10_3q", "[customer_address(ca_address_sk), date_dim(d_date), item(i_item_sk), web_returns(wr_item_sk, wr_order_number), web_sales(ws_sold_date_sk), web_site(web_site_id), store(s_store_sk), catalog_returns(cr_item_sk), promotion(p_promo_sk)]", " [date_dim(d_date), item(i_current_price)].", "{rule: \"Ensure that indexes cover all join and filter conditions in the workload queries, especially for large tables. Avoid removing indexes that are used in join conditions or frequently filtered columns, such as primary keys or foreign keys, as seen with the missing indexes on 'customer_address(ca_address_sk)', 'web_returns(wr_item_sk, wr_order_number)', 'web_sales(ws_sold_date_sk)', 'web_site(web_site_id)', 'store(s_store_sk)', 'catalog_returns(cr_item_sk)', and 'promotion(p_promo_sk)' in the regression index selection.\"}"], ["train_workload_random_10_3q", "[date_dim(d_date), warehouse(w_warehouse_name), item(i_item_sk), store_returns(sr_ticket_number), promotion(p_promo_sk), item(i_current_price), catalog_returns(cr_order_number), catalog_returns(cr_item_sk), customer(c_customer_sk), customer_address(ca_address_sk), catalog_sales(cs_sold_date_sk), store_returns(sr_item_sk), store(s_store_sk), web_sales(ws_sold_date_sk)]", " [Warehouse(w_warehouse_name), Item(i_item_sk, i_current_price), Date_dim(d_date), Promotion(p_promo_sk), Customer(c_customer_sk), Customer_address(ca_address_sk)]", "{rule: \"Ensure that all necessary join keys and frequently filtered columns are indexed. In the regression index, missing indexes on 'store_returns(sr_ticket_number)', 'catalog_returns(cr_order_number)', 'catalog_returns(cr_item_sk)', 'store_returns(sr_item_sk)', 'store(s_store_sk)', 'web_sales(ws_sold_date_sk)', and 'catalog_sales(cs_sold_date_sk)' could lead to performance degradation. Always include indexes for columns involved in joins and filters across large tables.\"}"], ["train_workload_random_10_3q", "[I(C customer.c_customer_sk), I(C catalog_returns.cr_order_number), I(C date_dim.d_date), I(C item.i_item_sk), I(C warehouse.w_warehouse_name)]", " [date_dim(d_date), item(i_current_price)].", "{rule: \"Ensure indexes cover join conditions and filter predicates. Avoid indexes that only cover filter predicates without considering join conditions, especially when multiple tables are involved in the query.\"}"]]}